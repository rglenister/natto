<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="168892"><g><title>natto::core::position::Position::make_move (32 samples, 0.02%)</title><rect x="0.0172%" y="165" width="0.0189%" height="15" fill="rgb(227,0,7)" fg:x="29" fg:w="32"/><text x="0.2672%" y="175.50"></text></g><g><title>natto::core::position::Position::update_hash_code (17 samples, 0.01%)</title><rect x="0.0361%" y="165" width="0.0101%" height="15" fill="rgb(217,0,24)" fg:x="61" fg:w="17"/><text x="0.2861%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.02%)</title><rect x="0.0586%" y="149" width="0.0201%" height="15" fill="rgb(221,193,54)" fg:x="99" fg:w="34"/><text x="0.3086%" y="159.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (17 samples, 0.01%)</title><rect x="0.0835%" y="149" width="0.0101%" height="15" fill="rgb(248,212,6)" fg:x="141" fg:w="17"/><text x="0.3335%" y="159.50"></text></g><g><title>_szone_free (20 samples, 0.01%)</title><rect x="0.1119%" y="133" width="0.0118%" height="15" fill="rgb(208,68,35)" fg:x="189" fg:w="20"/><text x="0.3619%" y="143.50"></text></g><g><title>free_small (28 samples, 0.02%)</title><rect x="0.1237%" y="133" width="0.0166%" height="15" fill="rgb(232,128,0)" fg:x="209" fg:w="28"/><text x="0.3737%" y="143.50"></text></g><g><title>_platform_memset (26 samples, 0.02%)</title><rect x="0.1551%" y="117" width="0.0154%" height="15" fill="rgb(207,160,47)" fg:x="262" fg:w="26"/><text x="0.4051%" y="127.50"></text></g><g><title>free_tiny (101 samples, 0.06%)</title><rect x="0.1403%" y="133" width="0.0598%" height="15" fill="rgb(228,23,34)" fg:x="237" fg:w="101"/><text x="0.3903%" y="143.50"></text></g><g><title>tiny_free_no_lock (47 samples, 0.03%)</title><rect x="0.1723%" y="117" width="0.0278%" height="15" fill="rgb(218,30,26)" fg:x="291" fg:w="47"/><text x="0.4223%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (186 samples, 0.11%)</title><rect x="0.0983%" y="149" width="0.1101%" height="15" fill="rgb(220,122,19)" fg:x="166" fg:w="186"/><text x="0.3483%" y="159.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (111 samples, 0.07%)</title><rect x="0.2256%" y="149" width="0.0657%" height="15" fill="rgb(250,228,42)" fg:x="381" fg:w="111"/><text x="0.4756%" y="159.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (111 samples, 0.07%)</title><rect x="0.2256%" y="133" width="0.0657%" height="15" fill="rgb(240,193,28)" fg:x="381" fg:w="111"/><text x="0.4756%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (247 samples, 0.15%)</title><rect x="0.3079%" y="149" width="0.1462%" height="15" fill="rgb(216,20,37)" fg:x="520" fg:w="247"/><text x="0.5579%" y="159.50"></text></g><g><title>natto::core::board::Board::remove_piece (45 samples, 0.03%)</title><rect x="0.4571%" y="133" width="0.0266%" height="15" fill="rgb(206,188,39)" fg:x="772" fg:w="45"/><text x="0.7071%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (25 samples, 0.01%)</title><rect x="0.4837%" y="133" width="0.0148%" height="15" fill="rgb(217,207,13)" fg:x="817" fg:w="25"/><text x="0.7337%" y="143.50"></text></g><g><title>natto::core::board::Board::remove_piece (71 samples, 0.04%)</title><rect x="0.4985%" y="117" width="0.0420%" height="15" fill="rgb(231,73,38)" fg:x="842" fg:w="71"/><text x="0.7485%" y="127.50"></text></g><g><title>natto::core::position::Position::move_piece (84 samples, 0.05%)</title><rect x="0.4985%" y="133" width="0.0497%" height="15" fill="rgb(225,20,46)" fg:x="842" fg:w="84"/><text x="0.7485%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (170 samples, 0.10%)</title><rect x="0.4571%" y="149" width="0.1007%" height="15" fill="rgb(210,31,41)" fg:x="772" fg:w="170"/><text x="0.7071%" y="159.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (102 samples, 0.06%)</title><rect x="0.5838%" y="117" width="0.0604%" height="15" fill="rgb(221,200,47)" fg:x="986" fg:w="102"/><text x="0.8338%" y="127.50"></text></g><g><title>natto::util::util::process_bits (30 samples, 0.02%)</title><rect x="0.6442%" y="117" width="0.0178%" height="15" fill="rgb(226,26,5)" fg:x="1088" fg:w="30"/><text x="0.8942%" y="127.50"></text></g><g><title>natto::core::position::Position::get_board_hash (209 samples, 0.12%)</title><rect x="0.5731%" y="133" width="0.1237%" height="15" fill="rgb(249,33,26)" fg:x="968" fg:w="209"/><text x="0.8231%" y="143.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (59 samples, 0.03%)</title><rect x="0.6620%" y="117" width="0.0349%" height="15" fill="rgb(235,183,28)" fg:x="1118" fg:w="59"/><text x="0.9120%" y="127.50"></text></g><g><title>natto::core::position::Position::update_hash_code (240 samples, 0.14%)</title><rect x="0.5578%" y="149" width="0.1421%" height="15" fill="rgb(221,5,38)" fg:x="942" fg:w="240"/><text x="0.8078%" y="159.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (133 samples, 0.08%)</title><rect x="0.6999%" y="149" width="0.0787%" height="15" fill="rgb(247,18,42)" fg:x="1182" fg:w="133"/><text x="0.9499%" y="159.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (30 samples, 0.02%)</title><rect x="0.8467%" y="133" width="0.0178%" height="15" fill="rgb(241,131,45)" fg:x="1430" fg:w="30"/><text x="1.0967%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (288 samples, 0.17%)</title><rect x="0.8645%" y="133" width="0.1705%" height="15" fill="rgb(249,31,29)" fg:x="1460" fg:w="288"/><text x="1.1145%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (201 samples, 0.12%)</title><rect x="1.0350%" y="133" width="0.1190%" height="15" fill="rgb(225,111,53)" fg:x="1748" fg:w="201"/><text x="1.2850%" y="143.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (230 samples, 0.14%)</title><rect x="1.1540%" y="133" width="0.1362%" height="15" fill="rgb(238,160,17)" fg:x="1949" fg:w="230"/><text x="1.4040%" y="143.50"></text></g><g><title>_nanov2_free (38 samples, 0.02%)</title><rect x="1.2902%" y="133" width="0.0225%" height="15" fill="rgb(214,148,48)" fg:x="2179" fg:w="38"/><text x="1.5402%" y="143.50"></text></g><g><title>_szone_free (38 samples, 0.02%)</title><rect x="1.3127%" y="133" width="0.0225%" height="15" fill="rgb(232,36,49)" fg:x="2217" fg:w="38"/><text x="1.5627%" y="143.50"></text></g><g><title>DYLD-STUB$$free (48 samples, 0.03%)</title><rect x="1.3352%" y="117" width="0.0284%" height="15" fill="rgb(209,103,24)" fg:x="2255" fg:w="48"/><text x="1.5852%" y="127.50"></text></g><g><title>_free (107 samples, 0.06%)</title><rect x="1.3636%" y="117" width="0.0634%" height="15" fill="rgb(229,88,8)" fg:x="2303" fg:w="107"/><text x="1.6136%" y="127.50"></text></g><g><title>_nanov2_free (54 samples, 0.03%)</title><rect x="1.4269%" y="117" width="0.0320%" height="15" fill="rgb(213,181,19)" fg:x="2410" fg:w="54"/><text x="1.6769%" y="127.50"></text></g><g><title>_szone_free (158 samples, 0.09%)</title><rect x="1.4589%" y="117" width="0.0936%" height="15" fill="rgb(254,191,54)" fg:x="2464" fg:w="158"/><text x="1.7089%" y="127.50"></text></g><g><title>small_free_list_add_ptr (118 samples, 0.07%)</title><rect x="1.7615%" y="101" width="0.0699%" height="15" fill="rgb(241,83,37)" fg:x="2975" fg:w="118"/><text x="2.0115%" y="111.50"></text></g><g><title>small_free_list_find_by_ptr (24 samples, 0.01%)</title><rect x="1.8313%" y="101" width="0.0142%" height="15" fill="rgb(233,36,39)" fg:x="3093" fg:w="24"/><text x="2.0813%" y="111.50"></text></g><g><title>small_free_list_remove_ptr (24 samples, 0.01%)</title><rect x="1.8456%" y="101" width="0.0142%" height="15" fill="rgb(226,3,54)" fg:x="3117" fg:w="24"/><text x="2.0956%" y="111.50"></text></g><g><title>free_small (557 samples, 0.33%)</title><rect x="1.5525%" y="117" width="0.3298%" height="15" fill="rgb(245,192,40)" fg:x="2622" fg:w="557"/><text x="1.8025%" y="127.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (38 samples, 0.02%)</title><rect x="1.8598%" y="101" width="0.0225%" height="15" fill="rgb(238,167,29)" fg:x="3141" fg:w="38"/><text x="2.1098%" y="111.50"></text></g><g><title>_platform_memset (174 samples, 0.10%)</title><rect x="1.9669%" y="101" width="0.1030%" height="15" fill="rgb(232,182,51)" fg:x="3322" fg:w="174"/><text x="2.2169%" y="111.50"></text></g><g><title>get_tiny_previous_free_msize (22 samples, 0.01%)</title><rect x="2.2121%" y="85" width="0.0130%" height="15" fill="rgb(231,60,39)" fg:x="3736" fg:w="22"/><text x="2.4621%" y="95.50"></text></g><g><title>free_tiny (615 samples, 0.36%)</title><rect x="1.8823%" y="117" width="0.3641%" height="15" fill="rgb(208,69,12)" fg:x="3179" fg:w="615"/><text x="2.1323%" y="127.50"></text></g><g><title>tiny_free_no_lock (292 samples, 0.17%)</title><rect x="2.0735%" y="101" width="0.1729%" height="15" fill="rgb(235,93,37)" fg:x="3502" fg:w="292"/><text x="2.3235%" y="111.50"></text></g><g><title>tiny_free_list_remove_ptr (28 samples, 0.02%)</title><rect x="2.2298%" y="85" width="0.0166%" height="15" fill="rgb(213,116,39)" fg:x="3766" fg:w="28"/><text x="2.4798%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (1,604 samples, 0.95%)</title><rect x="1.3352%" y="133" width="0.9497%" height="15" fill="rgb(222,207,29)" fg:x="2255" fg:w="1604"/><text x="1.5852%" y="143.50"></text></g><g><title>tiny_free_no_lock (38 samples, 0.02%)</title><rect x="2.2624%" y="117" width="0.0225%" height="15" fill="rgb(206,96,30)" fg:x="3821" fg:w="38"/><text x="2.5124%" y="127.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (36 samples, 0.02%)</title><rect x="2.2914%" y="133" width="0.0213%" height="15" fill="rgb(218,138,4)" fg:x="3870" fg:w="36"/><text x="2.5414%" y="143.50"></text></g><g><title>natto::core::board::Board::bitboard_all_pieces (67 samples, 0.04%)</title><rect x="2.3246%" y="133" width="0.0397%" height="15" fill="rgb(250,191,14)" fg:x="3926" fg:w="67"/><text x="2.5746%" y="143.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (17 samples, 0.01%)</title><rect x="2.3642%" y="133" width="0.0101%" height="15" fill="rgb(239,60,40)" fg:x="3993" fg:w="17"/><text x="2.6142%" y="143.50"></text></g><g><title>natto::core::move_gen::generate_moves (35 samples, 0.02%)</title><rect x="2.3743%" y="133" width="0.0207%" height="15" fill="rgb(206,27,48)" fg:x="4010" fg:w="35"/><text x="2.6243%" y="143.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (257 samples, 0.15%)</title><rect x="2.3950%" y="133" width="0.1522%" height="15" fill="rgb(225,35,8)" fg:x="4045" fg:w="257"/><text x="2.6450%" y="143.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (1,631 samples, 0.97%)</title><rect x="2.5472%" y="133" width="0.9657%" height="15" fill="rgb(250,213,24)" fg:x="4302" fg:w="1631"/><text x="2.7972%" y="143.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (1,631 samples, 0.97%)</title><rect x="2.5472%" y="117" width="0.9657%" height="15" fill="rgb(247,123,22)" fg:x="4302" fg:w="1631"/><text x="2.7972%" y="127.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (97 samples, 0.06%)</title><rect x="3.5129%" y="133" width="0.0574%" height="15" fill="rgb(231,138,38)" fg:x="5933" fg:w="97"/><text x="3.7629%" y="143.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (58 samples, 0.03%)</title><rect x="3.5703%" y="133" width="0.0343%" height="15" fill="rgb(231,145,46)" fg:x="6030" fg:w="58"/><text x="3.8203%" y="143.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (164 samples, 0.10%)</title><rect x="3.6047%" y="133" width="0.0971%" height="15" fill="rgb(251,118,11)" fg:x="6088" fg:w="164"/><text x="3.8547%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (2,837 samples, 1.68%)</title><rect x="3.7018%" y="133" width="1.6798%" height="15" fill="rgb(217,147,25)" fg:x="6252" fg:w="2837"/><text x="3.9518%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (130 samples, 0.08%)</title><rect x="5.3815%" y="133" width="0.0770%" height="15" fill="rgb(247,81,37)" fg:x="9089" fg:w="130"/><text x="5.6315%" y="143.50"></text></g><g><title>natto::core::board::Board::remove_piece (763 samples, 0.45%)</title><rect x="5.4603%" y="117" width="0.4518%" height="15" fill="rgb(209,12,38)" fg:x="9222" fg:w="763"/><text x="5.7103%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (304 samples, 0.18%)</title><rect x="5.9121%" y="117" width="0.1800%" height="15" fill="rgb(227,1,9)" fg:x="9985" fg:w="304"/><text x="6.1621%" y="127.50"></text></g><g><title>natto::core::board::Board::remove_piece (1,136 samples, 0.67%)</title><rect x="6.0921%" y="101" width="0.6726%" height="15" fill="rgb(248,47,43)" fg:x="10289" fg:w="1136"/><text x="6.3421%" y="111.50"></text></g><g><title>natto::core::position::Position::put_piece (135 samples, 0.08%)</title><rect x="6.7647%" y="101" width="0.0799%" height="15" fill="rgb(221,10,30)" fg:x="11425" fg:w="135"/><text x="7.0147%" y="111.50"></text></g><g><title>natto::core::position::Position::move_piece (1,330 samples, 0.79%)</title><rect x="6.0921%" y="117" width="0.7875%" height="15" fill="rgb(210,229,1)" fg:x="10289" fg:w="1330"/><text x="6.3421%" y="127.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (58 samples, 0.03%)</title><rect x="6.8452%" y="101" width="0.0343%" height="15" fill="rgb(222,148,37)" fg:x="11561" fg:w="58"/><text x="7.0952%" y="111.50"></text></g><g><title>natto::core::position::Position::put_piece (182 samples, 0.11%)</title><rect x="6.8795%" y="117" width="0.1078%" height="15" fill="rgb(234,67,33)" fg:x="11619" fg:w="182"/><text x="7.1295%" y="127.50"></text></g><g><title>natto::core::position::Position::remove_piece (17 samples, 0.01%)</title><rect x="6.9873%" y="117" width="0.0101%" height="15" fill="rgb(247,98,35)" fg:x="11801" fg:w="17"/><text x="7.2373%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move (2,652 samples, 1.57%)</title><rect x="5.4585%" y="133" width="1.5702%" height="15" fill="rgb(247,138,52)" fg:x="9219" fg:w="2652"/><text x="5.7085%" y="143.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (52 samples, 0.03%)</title><rect x="6.9980%" y="117" width="0.0308%" height="15" fill="rgb(213,79,30)" fg:x="11819" fg:w="52"/><text x="7.2480%" y="127.50"></text></g><g><title>natto::core::board::Board::process_pieces (77 samples, 0.05%)</title><rect x="7.0477%" y="117" width="0.0456%" height="15" fill="rgb(246,177,23)" fg:x="11903" fg:w="77"/><text x="7.2977%" y="127.50"></text></g><g><title>natto::core::position::Position::castling_rights_as_u64 (32 samples, 0.02%)</title><rect x="7.0998%" y="117" width="0.0189%" height="15" fill="rgb(230,62,27)" fg:x="11991" fg:w="32"/><text x="7.3498%" y="127.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (45 samples, 0.03%)</title><rect x="7.1188%" y="117" width="0.0266%" height="15" fill="rgb(216,154,8)" fg:x="12023" fg:w="45"/><text x="7.3688%" y="127.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (74 samples, 0.04%)</title><rect x="7.1454%" y="117" width="0.0438%" height="15" fill="rgb(244,35,45)" fg:x="12068" fg:w="74"/><text x="7.3954%" y="127.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (275 samples, 0.16%)</title><rect x="7.2034%" y="101" width="0.1628%" height="15" fill="rgb(251,115,12)" fg:x="12166" fg:w="275"/><text x="7.4534%" y="111.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (1,585 samples, 0.94%)</title><rect x="7.3757%" y="101" width="0.9385%" height="15" fill="rgb(240,54,50)" fg:x="12457" fg:w="1585"/><text x="7.6257%" y="111.50"></text></g><g><title>natto::util::util::process_bits (430 samples, 0.25%)</title><rect x="8.3142%" y="101" width="0.2546%" height="15" fill="rgb(233,84,52)" fg:x="14042" fg:w="430"/><text x="8.5642%" y="111.50"></text></g><g><title>natto::core::position::Position::get_board_hash (3,153 samples, 1.87%)</title><rect x="7.1892%" y="117" width="1.8669%" height="15" fill="rgb(207,117,47)" fg:x="12142" fg:w="3153"/><text x="7.4392%" y="127.50">n..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (823 samples, 0.49%)</title><rect x="8.5688%" y="101" width="0.4873%" height="15" fill="rgb(249,43,39)" fg:x="14472" fg:w="823"/><text x="8.8188%" y="111.50"></text></g><g><title>natto::core::position::Position::update_hash_code (3,473 samples, 2.06%)</title><rect x="7.0341%" y="133" width="2.0563%" height="15" fill="rgb(209,38,44)" fg:x="11880" fg:w="3473"/><text x="7.2841%" y="143.50">n..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (58 samples, 0.03%)</title><rect x="9.0561%" y="117" width="0.0343%" height="15" fill="rgb(236,212,23)" fg:x="15295" fg:w="58"/><text x="9.3061%" y="127.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (1,375 samples, 0.81%)</title><rect x="9.0904%" y="133" width="0.8141%" height="15" fill="rgb(242,79,21)" fg:x="15353" fg:w="1375"/><text x="9.3404%" y="143.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (471 samples, 0.28%)</title><rect x="10.5582%" y="117" width="0.2789%" height="15" fill="rgb(211,96,35)" fg:x="17832" fg:w="471"/><text x="10.8082%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (151 samples, 0.09%)</title><rect x="10.8371%" y="117" width="0.0894%" height="15" fill="rgb(253,215,40)" fg:x="18303" fg:w="151"/><text x="11.0871%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (54 samples, 0.03%)</title><rect x="10.9265%" y="117" width="0.0320%" height="15" fill="rgb(211,81,21)" fg:x="18454" fg:w="54"/><text x="11.1765%" y="127.50"></text></g><g><title>natto::core::board::Board::bitboard_all_pieces (468 samples, 0.28%)</title><rect x="10.9585%" y="117" width="0.2771%" height="15" fill="rgb(208,190,38)" fg:x="18508" fg:w="468"/><text x="11.2085%" y="127.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (3,105 samples, 1.84%)</title><rect x="11.2433%" y="117" width="1.8385%" height="15" fill="rgb(235,213,38)" fg:x="18989" fg:w="3105"/><text x="11.4933%" y="127.50">n..</text></g><g><title>natto::core::move_gen::square_attacks_finder (17,327 samples, 10.26%)</title><rect x="13.0817%" y="117" width="10.2592%" height="15" fill="rgb(237,122,38)" fg:x="22094" fg:w="17327"/><text x="13.3317%" y="127.50">natto::core::mo..</text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (17,327 samples, 10.26%)</title><rect x="13.0817%" y="101" width="10.2592%" height="15" fill="rgb(244,218,35)" fg:x="22094" fg:w="17327"/><text x="13.3317%" y="111.50">natto::core::mo..</text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (1,074 samples, 0.64%)</title><rect x="23.3410%" y="117" width="0.6359%" height="15" fill="rgb(240,68,47)" fg:x="39421" fg:w="1074"/><text x="23.5910%" y="127.50"></text></g><g><title>natto::core::position::Position::castling_rights_as_u64 (22 samples, 0.01%)</title><rect x="23.9769%" y="117" width="0.0130%" height="15" fill="rgb(210,16,53)" fg:x="40495" fg:w="22"/><text x="24.2269%" y="127.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (502 samples, 0.30%)</title><rect x="23.9899%" y="117" width="0.2972%" height="15" fill="rgb(235,124,12)" fg:x="40517" fg:w="502"/><text x="24.2399%" y="127.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (1,383 samples, 0.82%)</title><rect x="24.2871%" y="117" width="0.8189%" height="15" fill="rgb(224,169,11)" fg:x="41019" fg:w="1383"/><text x="24.5371%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move (5,811 samples, 3.44%)</title><rect x="25.1060%" y="117" width="3.4407%" height="15" fill="rgb(250,166,2)" fg:x="42402" fg:w="5811"/><text x="25.3560%" y="127.50">nat..</text></g><g><title>natto::core::position::Position::make_move::do_basic_move (1,010 samples, 0.60%)</title><rect x="28.5466%" y="117" width="0.5980%" height="15" fill="rgb(242,216,29)" fg:x="48213" fg:w="1010"/><text x="28.7966%" y="127.50"></text></g><g><title>core::num::_&lt;impl isize&gt;::abs (28 samples, 0.02%)</title><rect x="29.1447%" y="101" width="0.0166%" height="15" fill="rgb(230,116,27)" fg:x="49223" fg:w="28"/><text x="29.3947%" y="111.50"></text></g><g><title>natto::core::board::Board::remove_piece (4,027 samples, 2.38%)</title><rect x="29.1624%" y="101" width="2.3844%" height="15" fill="rgb(228,99,48)" fg:x="49253" fg:w="4027"/><text x="29.4124%" y="111.50">na..</text></g><g><title>natto::core::position::Position::make_move::do_basic_move (2,391 samples, 1.42%)</title><rect x="31.5468%" y="101" width="1.4157%" height="15" fill="rgb(253,11,6)" fg:x="53280" fg:w="2391"/><text x="31.7968%" y="111.50"></text></g><g><title>natto::core::board::Board::remove_piece (12,279 samples, 7.27%)</title><rect x="32.9625%" y="85" width="7.2703%" height="15" fill="rgb(247,143,39)" fg:x="55671" fg:w="12279"/><text x="33.2125%" y="95.50">natto::cor..</text></g><g><title>natto::core::position::Position::put_piece (1,426 samples, 0.84%)</title><rect x="40.2328%" y="85" width="0.8443%" height="15" fill="rgb(236,97,10)" fg:x="67950" fg:w="1426"/><text x="40.4828%" y="95.50"></text></g><g><title>natto::core::position::Position::move_piece (14,290 samples, 8.46%)</title><rect x="32.9625%" y="101" width="8.4610%" height="15" fill="rgb(233,208,19)" fg:x="55671" fg:w="14290"/><text x="33.2125%" y="111.50">natto::core:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (585 samples, 0.35%)</title><rect x="41.0771%" y="85" width="0.3464%" height="15" fill="rgb(216,164,2)" fg:x="69376" fg:w="585"/><text x="41.3271%" y="95.50"></text></g><g><title>natto::core::position::Position::put_piece (3,475 samples, 2.06%)</title><rect x="41.4235%" y="101" width="2.0575%" height="15" fill="rgb(220,129,5)" fg:x="69961" fg:w="3475"/><text x="41.6735%" y="111.50">n..</text></g><g><title>natto::core::position::Position::remove_piece (136 samples, 0.08%)</title><rect x="43.4810%" y="101" width="0.0805%" height="15" fill="rgb(242,17,10)" fg:x="73436" fg:w="136"/><text x="43.7310%" y="111.50"></text></g><g><title>natto::core::position::Position::make_move (24,947 samples, 14.77%)</title><rect x="29.1447%" y="117" width="14.7710%" height="15" fill="rgb(242,107,0)" fg:x="49223" fg:w="24947"/><text x="29.3947%" y="127.50">natto::core::position::..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (597 samples, 0.35%)</title><rect x="43.5622%" y="101" width="0.3535%" height="15" fill="rgb(251,28,31)" fg:x="73573" fg:w="597"/><text x="43.8122%" y="111.50"></text></g><g><title>natto::core::position::Position::side_to_move (36 samples, 0.02%)</title><rect x="43.9168%" y="117" width="0.0213%" height="15" fill="rgb(233,223,10)" fg:x="74172" fg:w="36"/><text x="44.1668%" y="127.50"></text></g><g><title>natto::core::board::Board::process_pieces (952 samples, 0.56%)</title><rect x="44.1140%" y="101" width="0.5637%" height="15" fill="rgb(215,21,27)" fg:x="74505" fg:w="952"/><text x="44.3640%" y="111.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (161 samples, 0.10%)</title><rect x="44.6777%" y="101" width="0.0953%" height="15" fill="rgb(232,23,21)" fg:x="75457" fg:w="161"/><text x="44.9277%" y="111.50"></text></g><g><title>natto::core::position::Position::castling_rights_as_u64 (38 samples, 0.02%)</title><rect x="44.7730%" y="101" width="0.0225%" height="15" fill="rgb(244,5,23)" fg:x="75618" fg:w="38"/><text x="45.0230%" y="111.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (36 samples, 0.02%)</title><rect x="44.7955%" y="101" width="0.0213%" height="15" fill="rgb(226,81,46)" fg:x="75656" fg:w="36"/><text x="45.0455%" y="111.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (765 samples, 0.45%)</title><rect x="44.8168%" y="101" width="0.4530%" height="15" fill="rgb(247,70,30)" fg:x="75692" fg:w="765"/><text x="45.0668%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (39 samples, 0.02%)</title><rect x="45.4817%" y="85" width="0.0231%" height="15" fill="rgb(212,68,19)" fg:x="76815" fg:w="39"/><text x="45.7317%" y="95.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (2,779 samples, 1.65%)</title><rect x="45.5048%" y="85" width="1.6454%" height="15" fill="rgb(240,187,13)" fg:x="76854" fg:w="2779"/><text x="45.7548%" y="95.50"></text></g><g><title>natto::core::board::Board::process_pieces (210 samples, 0.12%)</title><rect x="47.1502%" y="85" width="0.1243%" height="15" fill="rgb(223,113,26)" fg:x="79633" fg:w="210"/><text x="47.4002%" y="95.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (17,767 samples, 10.52%)</title><rect x="47.2746%" y="85" width="10.5197%" height="15" fill="rgb(206,192,2)" fg:x="79843" fg:w="17767"/><text x="47.5246%" y="95.50">natto::core::po..</text></g><g><title>natto::util::util::process_bits (4,582 samples, 2.71%)</title><rect x="57.7943%" y="85" width="2.7130%" height="15" fill="rgb(241,108,4)" fg:x="97610" fg:w="4582"/><text x="58.0443%" y="95.50">na..</text></g><g><title>natto::core::position::Position::get_board_hash (36,452 samples, 21.58%)</title><rect x="45.2698%" y="101" width="21.5830%" height="15" fill="rgb(247,173,49)" fg:x="76457" fg:w="36452"/><text x="45.5198%" y="111.50">natto::core::position::Position::g..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (10,717 samples, 6.35%)</title><rect x="60.5073%" y="85" width="6.3455%" height="15" fill="rgb(224,114,35)" fg:x="102192" fg:w="10717"/><text x="60.7573%" y="95.50">once_cel..</text></g><g><title>natto::core::position::Position::update_hash_code (39,374 samples, 23.31%)</title><rect x="43.9381%" y="117" width="23.3131%" height="15" fill="rgb(245,159,27)" fg:x="74208" fg:w="39374"/><text x="44.1881%" y="127.50">natto::core::position::Position::upda..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (673 samples, 0.40%)</title><rect x="66.8528%" y="101" width="0.3985%" height="15" fill="rgb(245,172,44)" fg:x="112909" fg:w="673"/><text x="67.1028%" y="111.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (2,210 samples, 1.31%)</title><rect x="67.2513%" y="117" width="1.3085%" height="15" fill="rgb(236,23,11)" fg:x="113582" fg:w="2210"/><text x="67.5013%" y="127.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (100,153 samples, 59.30%)</title><rect x="9.9046%" y="133" width="59.3000%" height="15" fill="rgb(205,117,38)" fg:x="16728" fg:w="100153"/><text x="10.1546%" y="143.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1,089 samples, 0.64%)</title><rect x="68.5598%" y="117" width="0.6448%" height="15" fill="rgb(237,72,25)" fg:x="115792" fg:w="1089"/><text x="68.8098%" y="127.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (34 samples, 0.02%)</title><rect x="69.2046%" y="117" width="0.0201%" height="15" fill="rgb(244,70,9)" fg:x="116881" fg:w="34"/><text x="69.4546%" y="127.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (41 samples, 0.02%)</title><rect x="69.2247%" y="117" width="0.0243%" height="15" fill="rgb(217,125,39)" fg:x="116915" fg:w="41"/><text x="69.4747%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.01%)</title><rect x="69.2490%" y="117" width="0.0148%" height="15" fill="rgb(235,36,10)" fg:x="116956" fg:w="25"/><text x="69.4990%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (71 samples, 0.04%)</title><rect x="69.2638%" y="117" width="0.0420%" height="15" fill="rgb(251,123,47)" fg:x="116981" fg:w="71"/><text x="69.5138%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="69.3058%" y="101" width="0.0112%" height="15" fill="rgb(221,13,13)" fg:x="117052" fg:w="19"/><text x="69.5558%" y="111.50"></text></g><g><title>DYLD-STUB$$memcpy (33 samples, 0.02%)</title><rect x="69.3745%" y="85" width="0.0195%" height="15" fill="rgb(238,131,9)" fg:x="117168" fg:w="33"/><text x="69.6245%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9,187 samples, 5.44%)</title><rect x="69.3171%" y="101" width="5.4396%" height="15" fill="rgb(211,50,8)" fg:x="117071" fg:w="9187"/><text x="69.5671%" y="111.50">&lt;alloc:..</text></g><g><title>_platform_memmove (9,057 samples, 5.36%)</title><rect x="69.3941%" y="85" width="5.3626%" height="15" fill="rgb(245,182,24)" fg:x="117201" fg:w="9057"/><text x="69.6441%" y="95.50">_platfo..</text></g><g><title>&lt;arrayvec::arrayvec::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (205 samples, 0.12%)</title><rect x="74.7566%" y="101" width="0.1214%" height="15" fill="rgb(242,14,37)" fg:x="126258" fg:w="205"/><text x="75.0066%" y="111.50"></text></g><g><title>_malloc_zone_malloc (95 samples, 0.06%)</title><rect x="74.9005%" y="85" width="0.0562%" height="15" fill="rgb(246,228,12)" fg:x="126501" fg:w="95"/><text x="75.1505%" y="95.50"></text></g><g><title>nanov2_malloc_type (24 samples, 0.01%)</title><rect x="74.9568%" y="85" width="0.0142%" height="15" fill="rgb(213,55,15)" fg:x="126596" fg:w="24"/><text x="75.2068%" y="95.50"></text></g><g><title>small_malloc_should_clear (145 samples, 0.09%)</title><rect x="74.9710%" y="85" width="0.0859%" height="15" fill="rgb(209,9,3)" fg:x="126620" fg:w="145"/><text x="75.2210%" y="95.50"></text></g><g><title>rack_get_thread_index (27 samples, 0.02%)</title><rect x="75.2209%" y="53" width="0.0160%" height="15" fill="rgb(230,59,30)" fg:x="127042" fg:w="27"/><text x="75.4709%" y="63.50"></text></g><g><title>small_malloc_should_clear (177 samples, 0.10%)</title><rect x="75.1350%" y="69" width="0.1048%" height="15" fill="rgb(209,121,21)" fg:x="126897" fg:w="177"/><text x="75.3850%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (17 samples, 0.01%)</title><rect x="75.4044%" y="37" width="0.0101%" height="15" fill="rgb(220,109,13)" fg:x="127352" fg:w="17"/><text x="75.6544%" y="47.50"></text></g><g><title>szone_malloc_should_clear (626 samples, 0.37%)</title><rect x="75.0568%" y="85" width="0.3707%" height="15" fill="rgb(232,18,1)" fg:x="126765" fg:w="626"/><text x="75.3068%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (305 samples, 0.18%)</title><rect x="75.2469%" y="69" width="0.1806%" height="15" fill="rgb(215,41,42)" fg:x="127086" fg:w="305"/><text x="75.4969%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (228 samples, 0.13%)</title><rect x="75.2925%" y="53" width="0.1350%" height="15" fill="rgb(224,123,36)" fg:x="127163" fg:w="228"/><text x="75.5425%" y="63.50"></text></g><g><title>tiny_free_list_add_ptr (22 samples, 0.01%)</title><rect x="75.4145%" y="37" width="0.0130%" height="15" fill="rgb(240,125,3)" fg:x="127369" fg:w="22"/><text x="75.6645%" y="47.50"></text></g><g><title>alloc::alloc::alloc (929 samples, 0.55%)</title><rect x="74.8780%" y="101" width="0.5501%" height="15" fill="rgb(205,98,50)" fg:x="126463" fg:w="929"/><text x="75.1280%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1,387 samples, 0.82%)</title><rect x="75.4281%" y="101" width="0.8212%" height="15" fill="rgb(205,185,37)" fg:x="127392" fg:w="1387"/><text x="75.6781%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (103 samples, 0.06%)</title><rect x="76.2546%" y="101" width="0.0610%" height="15" fill="rgb(238,207,15)" fg:x="128788" fg:w="103"/><text x="76.5046%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1,290 samples, 0.76%)</title><rect x="76.3156%" y="101" width="0.7638%" height="15" fill="rgb(213,199,42)" fg:x="128891" fg:w="1290"/><text x="76.5656%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (62 samples, 0.04%)</title><rect x="77.0794%" y="101" width="0.0367%" height="15" fill="rgb(235,201,11)" fg:x="130181" fg:w="62"/><text x="77.3294%" y="111.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (38 samples, 0.02%)</title><rect x="77.1161%" y="101" width="0.0225%" height="15" fill="rgb(207,46,11)" fg:x="130243" fg:w="38"/><text x="77.3661%" y="111.50"></text></g><g><title>core::ptr::read (681 samples, 0.40%)</title><rect x="77.1386%" y="101" width="0.4032%" height="15" fill="rgb(241,35,35)" fg:x="130281" fg:w="681"/><text x="77.3886%" y="111.50"></text></g><g><title>core::ptr::write (744 samples, 0.44%)</title><rect x="77.5419%" y="101" width="0.4405%" height="15" fill="rgb(243,32,47)" fg:x="130962" fg:w="744"/><text x="77.7919%" y="111.50"></text></g><g><title>nanov2_malloc_type (19 samples, 0.01%)</title><rect x="77.9824%" y="101" width="0.0112%" height="15" fill="rgb(247,202,23)" fg:x="131706" fg:w="19"/><text x="78.2324%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14,689 samples, 8.70%)</title><rect x="69.3058%" y="117" width="8.6973%" height="15" fill="rgb(219,102,11)" fg:x="117052" fg:w="14689"/><text x="69.5558%" y="127.50">&lt;alloc::vec:..</text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (40 samples, 0.02%)</title><rect x="78.0031%" y="117" width="0.0237%" height="15" fill="rgb(243,110,44)" fg:x="131741" fg:w="40"/><text x="78.2531%" y="127.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="78.0268%" y="117" width="0.0124%" height="15" fill="rgb(222,74,54)" fg:x="131781" fg:w="21"/><text x="78.2768%" y="127.50"></text></g><g><title>DYLD-STUB$$memcpy (34 samples, 0.02%)</title><rect x="78.0641%" y="101" width="0.0201%" height="15" fill="rgb(216,99,12)" fg:x="131844" fg:w="34"/><text x="78.3141%" y="111.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7,759 samples, 4.59%)</title><rect x="78.0392%" y="117" width="4.5941%" height="15" fill="rgb(226,22,26)" fg:x="131802" fg:w="7759"/><text x="78.2892%" y="127.50">&lt;arra..</text></g><g><title>_platform_memmove (7,683 samples, 4.55%)</title><rect x="78.0842%" y="101" width="4.5491%" height="15" fill="rgb(217,163,10)" fg:x="131878" fg:w="7683"/><text x="78.3342%" y="111.50">_plat..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (74 samples, 0.04%)</title><rect x="82.6333%" y="117" width="0.0438%" height="15" fill="rgb(213,25,53)" fg:x="139561" fg:w="74"/><text x="82.8833%" y="127.50"></text></g><g><title>&lt;natto::core::move::Move as core::clone::Clone&gt;::clone (481 samples, 0.28%)</title><rect x="82.6830%" y="117" width="0.2848%" height="15" fill="rgb(252,105,26)" fg:x="139645" fg:w="481"/><text x="82.9330%" y="127.50"></text></g><g><title>DYLD-STUB$$memcpy (32 samples, 0.02%)</title><rect x="82.9678%" y="101" width="0.0189%" height="15" fill="rgb(220,39,43)" fg:x="140126" fg:w="32"/><text x="83.2178%" y="111.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (7,578 samples, 4.49%)</title><rect x="82.9678%" y="117" width="4.4869%" height="15" fill="rgb(229,68,48)" fg:x="140126" fg:w="7578"/><text x="83.2178%" y="127.50">&lt;natt..</text></g><g><title>_platform_memmove (7,546 samples, 4.47%)</title><rect x="82.9868%" y="101" width="4.4679%" height="15" fill="rgb(252,8,32)" fg:x="140158" fg:w="7546"/><text x="83.2368%" y="111.50">_plat..</text></g><g><title>_nanov2_free (53 samples, 0.03%)</title><rect x="87.4547%" y="117" width="0.0314%" height="15" fill="rgb(223,20,43)" fg:x="147704" fg:w="53"/><text x="87.7047%" y="127.50"></text></g><g><title>_szone_free (41 samples, 0.02%)</title><rect x="87.4861%" y="117" width="0.0243%" height="15" fill="rgb(229,81,49)" fg:x="147757" fg:w="41"/><text x="87.7361%" y="127.50"></text></g><g><title>DYLD-STUB$$malloc (19 samples, 0.01%)</title><rect x="87.5104%" y="101" width="0.0112%" height="15" fill="rgb(236,28,36)" fg:x="147798" fg:w="19"/><text x="87.7604%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (26 samples, 0.02%)</title><rect x="87.5216%" y="101" width="0.0154%" height="15" fill="rgb(249,185,26)" fg:x="147817" fg:w="26"/><text x="87.7716%" y="111.50"></text></g><g><title>_malloc_zone_malloc (92 samples, 0.05%)</title><rect x="87.5370%" y="101" width="0.0545%" height="15" fill="rgb(249,174,33)" fg:x="147843" fg:w="92"/><text x="87.7870%" y="111.50"></text></g><g><title>nanov2_malloc_type (19 samples, 0.01%)</title><rect x="87.5915%" y="101" width="0.0112%" height="15" fill="rgb(233,201,37)" fg:x="147935" fg:w="19"/><text x="87.8415%" y="111.50"></text></g><g><title>small_malloc_should_clear (22 samples, 0.01%)</title><rect x="87.6027%" y="101" width="0.0130%" height="15" fill="rgb(221,78,26)" fg:x="147954" fg:w="22"/><text x="87.8527%" y="111.50"></text></g><g><title>small_malloc_from_free_list (21 samples, 0.01%)</title><rect x="87.6673%" y="85" width="0.0124%" height="15" fill="rgb(250,127,30)" fg:x="148063" fg:w="21"/><text x="87.9173%" y="95.50"></text></g><g><title>rack_get_thread_index (29 samples, 0.02%)</title><rect x="87.7129%" y="69" width="0.0172%" height="15" fill="rgb(230,49,44)" fg:x="148140" fg:w="29"/><text x="87.9629%" y="79.50"></text></g><g><title>small_free_list_add_ptr (45 samples, 0.03%)</title><rect x="87.9485%" y="53" width="0.0266%" height="15" fill="rgb(229,67,23)" fg:x="148538" fg:w="45"/><text x="88.1985%" y="63.50"></text></g><g><title>small_free_list_remove_ptr (60 samples, 0.04%)</title><rect x="87.9752%" y="53" width="0.0355%" height="15" fill="rgb(249,83,47)" fg:x="148583" fg:w="60"/><text x="88.2252%" y="63.50"></text></g><g><title>small_malloc_should_clear (621 samples, 0.37%)</title><rect x="87.6797%" y="85" width="0.3677%" height="15" fill="rgb(215,43,3)" fg:x="148084" fg:w="621"/><text x="87.9297%" y="95.50"></text></g><g><title>small_malloc_from_free_list (511 samples, 0.30%)</title><rect x="87.7448%" y="69" width="0.3026%" height="15" fill="rgb(238,154,13)" fg:x="148194" fg:w="511"/><text x="87.9948%" y="79.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (62 samples, 0.04%)</title><rect x="88.0107%" y="53" width="0.0367%" height="15" fill="rgb(219,56,2)" fg:x="148643" fg:w="62"/><text x="88.2607%" y="63.50"></text></g><g><title>tiny_malloc_from_free_list (33 samples, 0.02%)</title><rect x="88.0474%" y="85" width="0.0195%" height="15" fill="rgb(233,0,4)" fg:x="148705" fg:w="33"/><text x="88.2974%" y="95.50"></text></g><g><title>rack_get_thread_index (29 samples, 0.02%)</title><rect x="88.1042%" y="69" width="0.0172%" height="15" fill="rgb(235,30,7)" fg:x="148801" fg:w="29"/><text x="88.3542%" y="79.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (24 samples, 0.01%)</title><rect x="88.3014%" y="53" width="0.0142%" height="15" fill="rgb(250,79,13)" fg:x="149134" fg:w="24"/><text x="88.5514%" y="63.50"></text></g><g><title>szone_malloc_should_clear (1,187 samples, 0.70%)</title><rect x="87.6158%" y="101" width="0.7028%" height="15" fill="rgb(211,146,34)" fg:x="147976" fg:w="1187"/><text x="87.8658%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (425 samples, 0.25%)</title><rect x="88.0669%" y="85" width="0.2516%" height="15" fill="rgb(228,22,38)" fg:x="148738" fg:w="425"/><text x="88.3169%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (332 samples, 0.20%)</title><rect x="88.1220%" y="69" width="0.1966%" height="15" fill="rgb(235,168,5)" fg:x="148831" fg:w="332"/><text x="88.3720%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1,369 samples, 0.81%)</title><rect x="87.5104%" y="117" width="0.8106%" height="15" fill="rgb(221,155,16)" fg:x="147798" fg:w="1369"/><text x="87.7604%" y="127.50"></text></g><g><title>DYLD-STUB$$free (60 samples, 0.04%)</title><rect x="88.3209%" y="101" width="0.0355%" height="15" fill="rgb(215,215,53)" fg:x="149167" fg:w="60"/><text x="88.5709%" y="111.50"></text></g><g><title>_free (70 samples, 0.04%)</title><rect x="88.3571%" y="101" width="0.0414%" height="15" fill="rgb(223,4,10)" fg:x="149228" fg:w="70"/><text x="88.6071%" y="111.50"></text></g><g><title>_nanov2_free (65 samples, 0.04%)</title><rect x="88.3985%" y="101" width="0.0385%" height="15" fill="rgb(234,103,6)" fg:x="149298" fg:w="65"/><text x="88.6485%" y="111.50"></text></g><g><title>_szone_free (148 samples, 0.09%)</title><rect x="88.4370%" y="101" width="0.0876%" height="15" fill="rgb(227,97,0)" fg:x="149363" fg:w="148"/><text x="88.6870%" y="111.50"></text></g><g><title>free_small (145 samples, 0.09%)</title><rect x="88.5246%" y="101" width="0.0859%" height="15" fill="rgb(234,150,53)" fg:x="149511" fg:w="145"/><text x="88.7746%" y="111.50"></text></g><g><title>_platform_memset (121 samples, 0.07%)</title><rect x="88.6809%" y="85" width="0.0716%" height="15" fill="rgb(228,201,54)" fg:x="149775" fg:w="121"/><text x="88.9309%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (17 samples, 0.01%)</title><rect x="88.7526%" y="85" width="0.0101%" height="15" fill="rgb(222,22,37)" fg:x="149896" fg:w="17"/><text x="89.0026%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (67 samples, 0.04%)</title><rect x="88.8651%" y="69" width="0.0397%" height="15" fill="rgb(237,53,32)" fg:x="150086" fg:w="67"/><text x="89.1151%" y="79.50"></text></g><g><title>free_tiny (524 samples, 0.31%)</title><rect x="88.6105%" y="101" width="0.3103%" height="15" fill="rgb(233,25,53)" fg:x="149656" fg:w="524"/><text x="88.8605%" y="111.50"></text></g><g><title>tiny_free_no_lock (264 samples, 0.16%)</title><rect x="88.7644%" y="85" width="0.1563%" height="15" fill="rgb(210,40,34)" fg:x="149916" fg:w="264"/><text x="89.0144%" y="95.50"></text></g><g><title>tiny_free_list_remove_ptr (27 samples, 0.02%)</title><rect x="88.9047%" y="69" width="0.0160%" height="15" fill="rgb(241,220,44)" fg:x="150153" fg:w="27"/><text x="89.1547%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (1,088 samples, 0.64%)</title><rect x="88.3209%" y="117" width="0.6442%" height="15" fill="rgb(235,28,35)" fg:x="149167" fg:w="1088"/><text x="88.5709%" y="127.50"></text></g><g><title>tiny_free_no_lock (74 samples, 0.04%)</title><rect x="88.9213%" y="101" width="0.0438%" height="15" fill="rgb(210,56,17)" fg:x="150181" fg:w="74"/><text x="89.1713%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (21 samples, 0.01%)</title><rect x="88.9651%" y="117" width="0.0124%" height="15" fill="rgb(224,130,29)" fg:x="150255" fg:w="21"/><text x="89.2151%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::extend_from_iter (1,283 samples, 0.76%)</title><rect x="88.9811%" y="117" width="0.7597%" height="15" fill="rgb(235,212,8)" fg:x="150282" fg:w="1283"/><text x="89.2311%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (56 samples, 0.03%)</title><rect x="89.7455%" y="117" width="0.0332%" height="15" fill="rgb(223,33,50)" fg:x="151573" fg:w="56"/><text x="89.9955%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::truncate (78 samples, 0.05%)</title><rect x="89.7787%" y="117" width="0.0462%" height="15" fill="rgb(219,149,13)" fg:x="151629" fg:w="78"/><text x="90.0287%" y="127.50"></text></g><g><title>DYLD-STUB$$memcpy (30 samples, 0.02%)</title><rect x="89.8414%" y="101" width="0.0178%" height="15" fill="rgb(250,156,29)" fg:x="151735" fg:w="30"/><text x="90.0914%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (802 samples, 0.47%)</title><rect x="89.8296%" y="117" width="0.4749%" height="15" fill="rgb(216,193,19)" fg:x="151715" fg:w="802"/><text x="90.0796%" y="127.50"></text></g><g><title>_platform_memmove (752 samples, 0.45%)</title><rect x="89.8592%" y="101" width="0.4453%" height="15" fill="rgb(216,135,14)" fg:x="151765" fg:w="752"/><text x="90.1092%" y="111.50"></text></g><g><title>core::mem::size_of_val_raw (31 samples, 0.02%)</title><rect x="90.3045%" y="117" width="0.0184%" height="15" fill="rgb(241,47,5)" fg:x="152517" fg:w="31"/><text x="90.5545%" y="127.50"></text></g><g><title>core::ptr::write (1,379 samples, 0.82%)</title><rect x="90.3293%" y="117" width="0.8165%" height="15" fill="rgb(233,42,35)" fg:x="152559" fg:w="1379"/><text x="90.5793%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (32 samples, 0.02%)</title><rect x="91.1885%" y="117" width="0.0189%" height="15" fill="rgb(231,13,6)" fg:x="154010" fg:w="32"/><text x="91.4385%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::new (50 samples, 0.03%)</title><rect x="91.2074%" y="117" width="0.0296%" height="15" fill="rgb(207,181,40)" fg:x="154042" fg:w="50"/><text x="91.4574%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (63 samples, 0.04%)</title><rect x="91.3223%" y="101" width="0.0373%" height="15" fill="rgb(254,173,49)" fg:x="154236" fg:w="63"/><text x="91.5723%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (787 samples, 0.47%)</title><rect x="93.1003%" y="85" width="0.4660%" height="15" fill="rgb(221,1,38)" fg:x="157239" fg:w="787"/><text x="93.3503%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (383 samples, 0.23%)</title><rect x="93.3395%" y="69" width="0.2268%" height="15" fill="rgb(206,124,46)" fg:x="157643" fg:w="383"/><text x="93.5895%" y="79.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (125 samples, 0.07%)</title><rect x="93.5663%" y="85" width="0.0740%" height="15" fill="rgb(249,21,11)" fg:x="158026" fg:w="125"/><text x="93.8163%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (87 samples, 0.05%)</title><rect x="93.6403%" y="85" width="0.0515%" height="15" fill="rgb(222,201,40)" fg:x="158151" fg:w="87"/><text x="93.8903%" y="95.50"></text></g><g><title>&lt;natto::core::board::BoardSideIter as core::iter::traits::iterator::Iterator&gt;::nth (58 samples, 0.03%)</title><rect x="93.6966%" y="85" width="0.0343%" height="15" fill="rgb(235,61,29)" fg:x="158246" fg:w="58"/><text x="93.9466%" y="95.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (315 samples, 0.19%)</title><rect x="93.7309%" y="85" width="0.1865%" height="15" fill="rgb(219,207,3)" fg:x="158304" fg:w="315"/><text x="93.9809%" y="95.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (1,099 samples, 0.65%)</title><rect x="93.9269%" y="85" width="0.6507%" height="15" fill="rgb(222,56,46)" fg:x="158635" fg:w="1099"/><text x="94.1769%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (24 samples, 0.01%)</title><rect x="94.5776%" y="85" width="0.0142%" height="15" fill="rgb(239,76,54)" fg:x="159734" fg:w="24"/><text x="94.8276%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (99 samples, 0.06%)</title><rect x="94.5983%" y="85" width="0.0586%" height="15" fill="rgb(231,124,27)" fg:x="159769" fg:w="99"/><text x="94.8483%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (368 samples, 0.22%)</title><rect x="94.6569%" y="85" width="0.2179%" height="15" fill="rgb(249,195,6)" fg:x="159868" fg:w="368"/><text x="94.9069%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (111 samples, 0.07%)</title><rect x="94.8748%" y="85" width="0.0657%" height="15" fill="rgb(237,174,47)" fg:x="160236" fg:w="111"/><text x="95.1248%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (402 samples, 0.24%)</title><rect x="94.9406%" y="85" width="0.2380%" height="15" fill="rgb(206,201,31)" fg:x="160347" fg:w="402"/><text x="95.1906%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (19 samples, 0.01%)</title><rect x="95.1786%" y="85" width="0.0112%" height="15" fill="rgb(231,57,52)" fg:x="160749" fg:w="19"/><text x="95.4286%" y="95.50"></text></g><g><title>core::ptr::write (173 samples, 0.10%)</title><rect x="95.1898%" y="85" width="0.1024%" height="15" fill="rgb(248,177,22)" fg:x="160768" fg:w="173"/><text x="95.4398%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (46 samples, 0.03%)</title><rect x="95.2923%" y="85" width="0.0272%" height="15" fill="rgb(215,211,37)" fg:x="160941" fg:w="46"/><text x="95.5423%" y="95.50"></text></g><g><title>natto::core::board::Board::bitboard_all_pieces (43 samples, 0.03%)</title><rect x="95.3195%" y="85" width="0.0255%" height="15" fill="rgb(241,128,51)" fg:x="160987" fg:w="43"/><text x="95.5695%" y="95.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (36 samples, 0.02%)</title><rect x="95.3450%" y="85" width="0.0213%" height="15" fill="rgb(227,165,31)" fg:x="161030" fg:w="36"/><text x="95.5950%" y="95.50"></text></g><g><title>natto::core::move::BaseMove::new (453 samples, 0.27%)</title><rect x="95.3663%" y="85" width="0.2682%" height="15" fill="rgb(228,167,24)" fg:x="161066" fg:w="453"/><text x="95.6163%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (286 samples, 0.17%)</title><rect x="95.6345%" y="85" width="0.1693%" height="15" fill="rgb(228,143,12)" fg:x="161519" fg:w="286"/><text x="95.8845%" y="95.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (749 samples, 0.44%)</title><rect x="95.8038%" y="85" width="0.4435%" height="15" fill="rgb(249,149,8)" fg:x="161805" fg:w="749"/><text x="96.0538%" y="95.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (165 samples, 0.10%)</title><rect x="96.2473%" y="85" width="0.0977%" height="15" fill="rgb(243,35,44)" fg:x="162554" fg:w="165"/><text x="96.4973%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (299 samples, 0.18%)</title><rect x="96.3450%" y="85" width="0.1770%" height="15" fill="rgb(246,89,9)" fg:x="162719" fg:w="299"/><text x="96.5950%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (207 samples, 0.12%)</title><rect x="96.5220%" y="85" width="0.1226%" height="15" fill="rgb(233,213,13)" fg:x="163018" fg:w="207"/><text x="96.7720%" y="95.50"></text></g><g><title>natto::core::position::Position::can_castle (74 samples, 0.04%)</title><rect x="96.6446%" y="85" width="0.0438%" height="15" fill="rgb(233,141,41)" fg:x="163225" fg:w="74"/><text x="96.8946%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (9,232 samples, 5.47%)</title><rect x="91.3596%" y="101" width="5.4662%" height="15" fill="rgb(239,167,4)" fg:x="154299" fg:w="9232"/><text x="91.6096%" y="111.50">natto::..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (226 samples, 0.13%)</title><rect x="96.6920%" y="85" width="0.1338%" height="15" fill="rgb(209,217,16)" fg:x="163305" fg:w="226"/><text x="96.9420%" y="95.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (75 samples, 0.04%)</title><rect x="96.8258%" y="101" width="0.0444%" height="15" fill="rgb(219,88,35)" fg:x="163531" fg:w="75"/><text x="97.0758%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves (9,661 samples, 5.72%)</title><rect x="91.2370%" y="117" width="5.7202%" height="15" fill="rgb(220,193,23)" fg:x="154092" fg:w="9661"/><text x="91.4870%" y="127.50">natto::..</text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (147 samples, 0.09%)</title><rect x="96.8702%" y="101" width="0.0870%" height="15" fill="rgb(230,90,52)" fg:x="163606" fg:w="147"/><text x="97.1202%" y="111.50"></text></g><g><title>natto::core::position::Position::side_to_move (19 samples, 0.01%)</title><rect x="96.9572%" y="117" width="0.0112%" height="15" fill="rgb(252,106,19)" fg:x="163753" fg:w="19"/><text x="97.2072%" y="127.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (46,907 samples, 27.77%)</title><rect x="69.2046%" y="133" width="27.7734%" height="15" fill="rgb(206,74,20)" fg:x="116881" fg:w="46907"/><text x="69.4546%" y="143.50">natto::eval::node_counter::do_count_nodes</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (162,574 samples, 96.26%)</title><rect x="0.7786%" y="149" width="96.2591%" height="15" fill="rgb(230,138,44)" fg:x="1315" fg:w="162574"/><text x="1.0286%" y="159.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (101 samples, 0.06%)</title><rect x="96.9780%" y="133" width="0.0598%" height="15" fill="rgb(235,182,43)" fg:x="163788" fg:w="101"/><text x="97.2280%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (758 samples, 0.45%)</title><rect x="97.0531%" y="117" width="0.4488%" height="15" fill="rgb(242,16,51)" fg:x="163915" fg:w="758"/><text x="97.3031%" y="127.50"></text></g><g><title>_platform_memmove (740 samples, 0.44%)</title><rect x="97.0638%" y="101" width="0.4381%" height="15" fill="rgb(248,9,4)" fg:x="163933" fg:w="740"/><text x="97.3138%" y="111.50"></text></g><g><title>_platform_memmove (108 samples, 0.06%)</title><rect x="97.5114%" y="117" width="0.0639%" height="15" fill="rgb(210,31,22)" fg:x="164689" fg:w="108"/><text x="97.7614%" y="127.50"></text></g><g><title>alloc::alloc::alloc (110 samples, 0.07%)</title><rect x="97.5754%" y="117" width="0.0651%" height="15" fill="rgb(239,54,39)" fg:x="164797" fg:w="110"/><text x="97.8254%" y="127.50"></text></g><g><title>szone_malloc_should_clear (79 samples, 0.05%)</title><rect x="97.5937%" y="101" width="0.0468%" height="15" fill="rgb(230,99,41)" fg:x="164828" fg:w="79"/><text x="97.8437%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (45 samples, 0.03%)</title><rect x="97.6139%" y="85" width="0.0266%" height="15" fill="rgb(253,106,12)" fg:x="164862" fg:w="45"/><text x="97.8639%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (38 samples, 0.02%)</title><rect x="97.6180%" y="69" width="0.0225%" height="15" fill="rgb(213,46,41)" fg:x="164869" fg:w="38"/><text x="97.8680%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (133 samples, 0.08%)</title><rect x="97.6405%" y="117" width="0.0787%" height="15" fill="rgb(215,133,35)" fg:x="164907" fg:w="133"/><text x="97.8905%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (125 samples, 0.07%)</title><rect x="97.7222%" y="117" width="0.0740%" height="15" fill="rgb(213,28,5)" fg:x="165045" fg:w="125"/><text x="97.9722%" y="127.50"></text></g><g><title>core::ptr::read (60 samples, 0.04%)</title><rect x="97.8016%" y="117" width="0.0355%" height="15" fill="rgb(215,77,49)" fg:x="165179" fg:w="60"/><text x="98.0516%" y="127.50"></text></g><g><title>core::ptr::write (103 samples, 0.06%)</title><rect x="97.8371%" y="117" width="0.0610%" height="15" fill="rgb(248,100,22)" fg:x="165239" fg:w="103"/><text x="98.0871%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,438 samples, 0.85%)</title><rect x="97.0514%" y="133" width="0.8514%" height="15" fill="rgb(208,67,9)" fg:x="163912" fg:w="1438"/><text x="97.3014%" y="143.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (666 samples, 0.39%)</title><rect x="97.9075%" y="133" width="0.3943%" height="15" fill="rgb(219,133,21)" fg:x="165358" fg:w="666"/><text x="98.1575%" y="143.50"></text></g><g><title>_platform_memmove (657 samples, 0.39%)</title><rect x="97.9129%" y="117" width="0.3890%" height="15" fill="rgb(246,46,29)" fg:x="165367" fg:w="657"/><text x="98.1629%" y="127.50"></text></g><g><title>&lt;natto::core::move::Move as core::clone::Clone&gt;::clone (34 samples, 0.02%)</title><rect x="98.3060%" y="133" width="0.0201%" height="15" fill="rgb(246,185,52)" fg:x="166031" fg:w="34"/><text x="98.5560%" y="143.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (699 samples, 0.41%)</title><rect x="98.3261%" y="133" width="0.4139%" height="15" fill="rgb(252,136,11)" fg:x="166065" fg:w="699"/><text x="98.5761%" y="143.50"></text></g><g><title>_platform_memmove (693 samples, 0.41%)</title><rect x="98.3297%" y="117" width="0.4103%" height="15" fill="rgb(219,138,53)" fg:x="166071" fg:w="693"/><text x="98.5797%" y="127.50"></text></g><g><title>_platform_memmove (187 samples, 0.11%)</title><rect x="98.7442%" y="133" width="0.1107%" height="15" fill="rgb(211,51,23)" fg:x="166771" fg:w="187"/><text x="98.9942%" y="143.50"></text></g><g><title>small_malloc_should_clear (48 samples, 0.03%)</title><rect x="98.8709%" y="101" width="0.0284%" height="15" fill="rgb(247,221,28)" fg:x="166985" fg:w="48"/><text x="99.1209%" y="111.50"></text></g><g><title>small_malloc_from_free_list (39 samples, 0.02%)</title><rect x="98.8762%" y="85" width="0.0231%" height="15" fill="rgb(251,222,45)" fg:x="166994" fg:w="39"/><text x="99.1262%" y="95.50"></text></g><g><title>szone_malloc_should_clear (133 samples, 0.08%)</title><rect x="98.8655%" y="117" width="0.0787%" height="15" fill="rgb(217,162,53)" fg:x="166976" fg:w="133"/><text x="99.1155%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (75 samples, 0.04%)</title><rect x="98.8999%" y="101" width="0.0444%" height="15" fill="rgb(229,93,14)" fg:x="167034" fg:w="75"/><text x="99.1499%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (61 samples, 0.04%)</title><rect x="98.9082%" y="85" width="0.0361%" height="15" fill="rgb(209,67,49)" fg:x="167048" fg:w="61"/><text x="99.1582%" y="95.50"></text></g><g><title>alloc::alloc::alloc (151 samples, 0.09%)</title><rect x="98.8567%" y="133" width="0.0894%" height="15" fill="rgb(213,87,29)" fg:x="166961" fg:w="151"/><text x="99.1067%" y="143.50"></text></g><g><title>free_tiny (80 samples, 0.05%)</title><rect x="98.9662%" y="117" width="0.0474%" height="15" fill="rgb(205,151,52)" fg:x="167146" fg:w="80"/><text x="99.2162%" y="127.50"></text></g><g><title>tiny_free_no_lock (40 samples, 0.02%)</title><rect x="98.9899%" y="101" width="0.0237%" height="15" fill="rgb(253,215,39)" fg:x="167186" fg:w="40"/><text x="99.2399%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (125 samples, 0.07%)</title><rect x="98.9461%" y="133" width="0.0740%" height="15" fill="rgb(221,220,41)" fg:x="167112" fg:w="125"/><text x="99.1961%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::extend_from_iter (117 samples, 0.07%)</title><rect x="99.0201%" y="133" width="0.0693%" height="15" fill="rgb(218,133,21)" fg:x="167237" fg:w="117"/><text x="99.2701%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (73 samples, 0.04%)</title><rect x="99.1006%" y="133" width="0.0432%" height="15" fill="rgb(221,193,43)" fg:x="167373" fg:w="73"/><text x="99.3506%" y="143.50"></text></g><g><title>_platform_memmove (68 samples, 0.04%)</title><rect x="99.1036%" y="117" width="0.0403%" height="15" fill="rgb(240,128,52)" fg:x="167378" fg:w="68"/><text x="99.3536%" y="127.50"></text></g><g><title>core::ptr::write (125 samples, 0.07%)</title><rect x="99.1456%" y="133" width="0.0740%" height="15" fill="rgb(253,114,12)" fg:x="167449" fg:w="125"/><text x="99.3956%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (48 samples, 0.03%)</title><rect x="99.4523%" y="101" width="0.0284%" height="15" fill="rgb(215,223,47)" fg:x="167967" fg:w="48"/><text x="99.7023%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (25 samples, 0.01%)</title><rect x="99.4659%" y="85" width="0.0148%" height="15" fill="rgb(248,225,23)" fg:x="167990" fg:w="25"/><text x="99.7159%" y="95.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (25 samples, 0.01%)</title><rect x="99.4949%" y="101" width="0.0148%" height="15" fill="rgb(250,108,0)" fg:x="168039" fg:w="25"/><text x="99.7449%" y="111.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (101 samples, 0.06%)</title><rect x="99.5097%" y="101" width="0.0598%" height="15" fill="rgb(228,208,7)" fg:x="168064" fg:w="101"/><text x="99.7597%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (27 samples, 0.02%)</title><rect x="99.5778%" y="101" width="0.0160%" height="15" fill="rgb(244,45,10)" fg:x="168179" fg:w="27"/><text x="99.8278%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (58 samples, 0.03%)</title><rect x="99.5968%" y="101" width="0.0343%" height="15" fill="rgb(207,125,25)" fg:x="168211" fg:w="58"/><text x="99.8468%" y="111.50"></text></g><g><title>natto::core::move::BaseMove::new (45 samples, 0.03%)</title><rect x="99.6524%" y="101" width="0.0266%" height="15" fill="rgb(210,195,18)" fg:x="168305" fg:w="45"/><text x="99.9024%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (25 samples, 0.01%)</title><rect x="99.6791%" y="101" width="0.0148%" height="15" fill="rgb(249,80,12)" fg:x="168350" fg:w="25"/><text x="99.9291%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (74 samples, 0.04%)</title><rect x="99.6939%" y="101" width="0.0438%" height="15" fill="rgb(221,65,9)" fg:x="168375" fg:w="74"/><text x="99.9439%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (38 samples, 0.02%)</title><rect x="99.7472%" y="101" width="0.0225%" height="15" fill="rgb(235,49,36)" fg:x="168465" fg:w="38"/><text x="99.9972%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (28 samples, 0.02%)</title><rect x="99.7697%" y="101" width="0.0166%" height="15" fill="rgb(225,32,20)" fg:x="168503" fg:w="28"/><text x="100.0197%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (946 samples, 0.56%)</title><rect x="99.2403%" y="117" width="0.5601%" height="15" fill="rgb(215,141,46)" fg:x="167609" fg:w="946"/><text x="99.4903%" y="127.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (17 samples, 0.01%)</title><rect x="99.7904%" y="101" width="0.0101%" height="15" fill="rgb(250,160,47)" fg:x="168538" fg:w="17"/><text x="100.0404%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves (990 samples, 0.59%)</title><rect x="99.2279%" y="133" width="0.5862%" height="15" fill="rgb(216,222,40)" fg:x="167588" fg:w="990"/><text x="99.4779%" y="143.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (17 samples, 0.01%)</title><rect x="99.8040%" y="117" width="0.0101%" height="15" fill="rgb(234,217,39)" fg:x="168561" fg:w="17"/><text x="100.0540%" y="127.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (4,695 samples, 2.78%)</title><rect x="97.0378%" y="149" width="2.7799%" height="15" fill="rgb(207,178,40)" fg:x="163889" fg:w="4695"/><text x="97.2878%" y="159.50">na..</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (168,505 samples, 99.77%)</title><rect x="0.0521%" y="165" width="99.7709%" height="15" fill="rgb(221,136,13)" fg:x="88" fg:w="168505"/><text x="0.3021%" y="175.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30 samples, 0.02%)</title><rect x="99.8236%" y="133" width="0.0178%" height="15" fill="rgb(249,199,10)" fg:x="168594" fg:w="30"/><text x="100.0736%" y="143.50"></text></g><g><title>_platform_memmove (28 samples, 0.02%)</title><rect x="99.8247%" y="117" width="0.0166%" height="15" fill="rgb(249,222,13)" fg:x="168596" fg:w="28"/><text x="100.0747%" y="127.50"></text></g><g><title>_platform_memmove (27 samples, 0.02%)</title><rect x="99.8413%" y="133" width="0.0160%" height="15" fill="rgb(244,185,38)" fg:x="168624" fg:w="27"/><text x="100.0913%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (89 samples, 0.05%)</title><rect x="99.8236%" y="149" width="0.0527%" height="15" fill="rgb(236,202,9)" fg:x="168594" fg:w="89"/><text x="100.0736%" y="159.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (29 samples, 0.02%)</title><rect x="99.8763%" y="149" width="0.0172%" height="15" fill="rgb(250,229,37)" fg:x="168683" fg:w="29"/><text x="100.1263%" y="159.50"></text></g><g><title>_platform_memmove (28 samples, 0.02%)</title><rect x="99.8768%" y="133" width="0.0166%" height="15" fill="rgb(206,174,23)" fg:x="168684" fg:w="28"/><text x="100.1268%" y="143.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (23 samples, 0.01%)</title><rect x="99.8946%" y="149" width="0.0136%" height="15" fill="rgb(211,33,43)" fg:x="168714" fg:w="23"/><text x="100.1446%" y="159.50"></text></g><g><title>_platform_memmove (23 samples, 0.01%)</title><rect x="99.8946%" y="133" width="0.0136%" height="15" fill="rgb(245,58,50)" fg:x="168714" fg:w="23"/><text x="100.1446%" y="143.50"></text></g><g><title>_platform_memmove (43 samples, 0.03%)</title><rect x="99.9082%" y="149" width="0.0255%" height="15" fill="rgb(244,68,36)" fg:x="168737" fg:w="43"/><text x="100.1582%" y="159.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (168,859 samples, 99.98%)</title><rect x="0.0041%" y="181" width="99.9805%" height="15" fill="rgb(232,229,15)" fg:x="7" fg:w="168859"/><text x="0.2541%" y="191.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes (273 samples, 0.16%)</title><rect x="99.8230%" y="165" width="0.1616%" height="15" fill="rgb(254,30,23)" fg:x="168593" fg:w="273"/><text x="100.0730%" y="175.50"></text></g><g><title>natto::core::move_gen::generate_moves (54 samples, 0.03%)</title><rect x="99.9526%" y="149" width="0.0320%" height="15" fill="rgb(235,160,14)" fg:x="168812" fg:w="54"/><text x="100.2026%" y="159.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (50 samples, 0.03%)</title><rect x="99.9550%" y="133" width="0.0296%" height="15" fill="rgb(212,155,44)" fg:x="168816" fg:w="50"/><text x="100.2050%" y="143.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (168,884 samples, 100.00%)</title><rect x="0.0024%" y="197" width="99.9953%" height="15" fill="rgb(226,2,50)" fg:x="4" fg:w="168884"/><text x="0.2524%" y="207.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes (22 samples, 0.01%)</title><rect x="99.9846%" y="181" width="0.0130%" height="15" fill="rgb(234,177,6)" fg:x="168866" fg:w="22"/><text x="100.2346%" y="191.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (168,885 samples, 100.00%)</title><rect x="0.0024%" y="229" width="99.9959%" height="15" fill="rgb(217,24,9)" fg:x="4" fg:w="168885"/><text x="0.2524%" y="239.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (168,885 samples, 100.00%)</title><rect x="0.0024%" y="213" width="99.9959%" height="15" fill="rgb(220,13,46)" fg:x="4" fg:w="168885"/><text x="0.2524%" y="223.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>all (168,892 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="168892"/><text x="0.2500%" y="367.50"></text></g><g><title>start (168,892 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="168892"/><text x="0.2500%" y="351.50">start</text></g><g><title>main (168,889 samples, 100.00%)</title><rect x="0.0018%" y="325" width="99.9982%" height="15" fill="rgb(211,99,13)" fg:x="3" fg:w="168889"/><text x="0.2518%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (168,889 samples, 100.00%)</title><rect x="0.0018%" y="309" width="99.9982%" height="15" fill="rgb(232,111,31)" fg:x="3" fg:w="168889"/><text x="0.2518%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (168,889 samples, 100.00%)</title><rect x="0.0018%" y="293" width="99.9982%" height="15" fill="rgb(245,82,37)" fg:x="3" fg:w="168889"/><text x="0.2518%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (168,889 samples, 100.00%)</title><rect x="0.0018%" y="277" width="99.9982%" height="15" fill="rgb(227,149,46)" fg:x="3" fg:w="168889"/><text x="0.2518%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>natto::main (168,888 samples, 100.00%)</title><rect x="0.0024%" y="261" width="99.9976%" height="15" fill="rgb(218,36,50)" fg:x="4" fg:w="168888"/><text x="0.2524%" y="271.50">natto::main</text></g><g><title>natto::eval::node_counter::count_nodes (168,888 samples, 100.00%)</title><rect x="0.0024%" y="245" width="99.9976%" height="15" fill="rgb(226,80,48)" fg:x="4" fg:w="168888"/><text x="0.2524%" y="255.50">natto::eval::node_counter::count_nodes</text></g></svg></svg>