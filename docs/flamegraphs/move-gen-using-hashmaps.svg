<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="310500"><g><title>natto::core::move_gen::square_attacks_finder (37 samples, 0.01%)</title><rect x="0.0113%" y="165" width="0.0119%" height="15" fill="rgb(227,0,7)" fg:x="35" fg:w="37"/><text x="0.2613%" y="175.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (32 samples, 0.01%)</title><rect x="0.0129%" y="149" width="0.0103%" height="15" fill="rgb(217,0,24)" fg:x="40" fg:w="32"/><text x="0.2629%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.01%)</title><rect x="0.0477%" y="149" width="0.0106%" height="15" fill="rgb(221,193,54)" fg:x="148" fg:w="33"/><text x="0.2977%" y="159.50"></text></g><g><title>free_small (34 samples, 0.01%)</title><rect x="0.0792%" y="133" width="0.0110%" height="15" fill="rgb(248,212,6)" fg:x="246" fg:w="34"/><text x="0.3292%" y="143.50"></text></g><g><title>free_tiny (110 samples, 0.04%)</title><rect x="0.0902%" y="133" width="0.0354%" height="15" fill="rgb(208,68,35)" fg:x="280" fg:w="110"/><text x="0.3402%" y="143.50"></text></g><g><title>tiny_free_no_lock (60 samples, 0.02%)</title><rect x="0.1063%" y="117" width="0.0193%" height="15" fill="rgb(232,128,0)" fg:x="330" fg:w="60"/><text x="0.3563%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (198 samples, 0.06%)</title><rect x="0.0641%" y="149" width="0.0638%" height="15" fill="rgb(207,160,47)" fg:x="199" fg:w="198"/><text x="0.3141%" y="159.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (84 samples, 0.03%)</title><rect x="0.1414%" y="133" width="0.0271%" height="15" fill="rgb(228,23,34)" fg:x="439" fg:w="84"/><text x="0.3914%" y="143.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (110 samples, 0.04%)</title><rect x="0.1955%" y="117" width="0.0354%" height="15" fill="rgb(218,30,26)" fg:x="607" fg:w="110"/><text x="0.4455%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (78 samples, 0.03%)</title><rect x="0.2641%" y="101" width="0.0251%" height="15" fill="rgb(220,122,19)" fg:x="820" fg:w="78"/><text x="0.5141%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (78 samples, 0.03%)</title><rect x="0.2641%" y="85" width="0.0251%" height="15" fill="rgb(250,228,42)" fg:x="820" fg:w="78"/><text x="0.5141%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (64 samples, 0.02%)</title><rect x="0.2902%" y="101" width="0.0206%" height="15" fill="rgb(240,193,28)" fg:x="901" fg:w="64"/><text x="0.5402%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (212 samples, 0.07%)</title><rect x="0.2506%" y="117" width="0.0683%" height="15" fill="rgb(216,20,37)" fg:x="778" fg:w="212"/><text x="0.5006%" y="127.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (586 samples, 0.19%)</title><rect x="0.1414%" y="149" width="0.1887%" height="15" fill="rgb(206,188,39)" fg:x="439" fg:w="586"/><text x="0.3914%" y="159.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (487 samples, 0.16%)</title><rect x="0.1733%" y="133" width="0.1568%" height="15" fill="rgb(217,207,13)" fg:x="538" fg:w="487"/><text x="0.4233%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (280 samples, 0.09%)</title><rect x="0.3362%" y="149" width="0.0902%" height="15" fill="rgb(231,73,38)" fg:x="1044" fg:w="280"/><text x="0.5862%" y="159.50"></text></g><g><title>natto::core::board::Board::remove_piece (61 samples, 0.02%)</title><rect x="0.4290%" y="133" width="0.0196%" height="15" fill="rgb(225,20,46)" fg:x="1332" fg:w="61"/><text x="0.6790%" y="143.50"></text></g><g><title>natto::core::board::Board::remove_piece (73 samples, 0.02%)</title><rect x="0.4576%" y="117" width="0.0235%" height="15" fill="rgb(210,31,41)" fg:x="1421" fg:w="73"/><text x="0.7076%" y="127.50"></text></g><g><title>natto::core::position::Position::move_piece (81 samples, 0.03%)</title><rect x="0.4576%" y="133" width="0.0261%" height="15" fill="rgb(221,200,47)" fg:x="1421" fg:w="81"/><text x="0.7076%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (188 samples, 0.06%)</title><rect x="0.4290%" y="149" width="0.0605%" height="15" fill="rgb(226,26,5)" fg:x="1332" fg:w="188"/><text x="0.6790%" y="159.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (147 samples, 0.05%)</title><rect x="0.5375%" y="117" width="0.0473%" height="15" fill="rgb(249,33,26)" fg:x="1669" fg:w="147"/><text x="0.7875%" y="127.50"></text></g><g><title>natto::util::util::process_bits (71 samples, 0.02%)</title><rect x="0.5849%" y="117" width="0.0229%" height="15" fill="rgb(235,183,28)" fg:x="1816" fg:w="71"/><text x="0.8349%" y="127.50"></text></g><g><title>natto::core::position::Position::get_board_hash (326 samples, 0.10%)</title><rect x="0.5262%" y="133" width="0.1050%" height="15" fill="rgb(221,5,38)" fg:x="1634" fg:w="326"/><text x="0.7762%" y="143.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (73 samples, 0.02%)</title><rect x="0.6077%" y="117" width="0.0235%" height="15" fill="rgb(247,18,42)" fg:x="1887" fg:w="73"/><text x="0.8577%" y="127.50"></text></g><g><title>natto::core::position::Position::update_hash_code (446 samples, 0.14%)</title><rect x="0.4895%" y="149" width="0.1436%" height="15" fill="rgb(241,131,45)" fg:x="1520" fg:w="446"/><text x="0.7395%" y="159.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (134 samples, 0.04%)</title><rect x="0.6332%" y="149" width="0.0432%" height="15" fill="rgb(249,31,29)" fg:x="1966" fg:w="134"/><text x="0.8832%" y="159.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (55 samples, 0.02%)</title><rect x="0.7024%" y="133" width="0.0177%" height="15" fill="rgb(225,111,53)" fg:x="2181" fg:w="55"/><text x="0.9524%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (287 samples, 0.09%)</title><rect x="0.7201%" y="133" width="0.0924%" height="15" fill="rgb(238,160,17)" fg:x="2236" fg:w="287"/><text x="0.9701%" y="143.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (162 samples, 0.05%)</title><rect x="0.8148%" y="133" width="0.0522%" height="15" fill="rgb(214,148,48)" fg:x="2530" fg:w="162"/><text x="1.0648%" y="143.50"></text></g><g><title>_nanov2_free (39 samples, 0.01%)</title><rect x="0.8670%" y="133" width="0.0126%" height="15" fill="rgb(232,36,49)" fg:x="2692" fg:w="39"/><text x="1.1170%" y="143.50"></text></g><g><title>_szone_free (40 samples, 0.01%)</title><rect x="0.8795%" y="133" width="0.0129%" height="15" fill="rgb(209,103,24)" fg:x="2731" fg:w="40"/><text x="1.1295%" y="143.50"></text></g><g><title>DYLD-STUB$$free (60 samples, 0.02%)</title><rect x="0.8924%" y="117" width="0.0193%" height="15" fill="rgb(229,88,8)" fg:x="2771" fg:w="60"/><text x="1.1424%" y="127.50"></text></g><g><title>_free (82 samples, 0.03%)</title><rect x="0.9118%" y="117" width="0.0264%" height="15" fill="rgb(213,181,19)" fg:x="2831" fg:w="82"/><text x="1.1618%" y="127.50"></text></g><g><title>_nanov2_free (84 samples, 0.03%)</title><rect x="0.9382%" y="117" width="0.0271%" height="15" fill="rgb(254,191,54)" fg:x="2913" fg:w="84"/><text x="1.1882%" y="127.50"></text></g><g><title>_szone_free (166 samples, 0.05%)</title><rect x="0.9652%" y="117" width="0.0535%" height="15" fill="rgb(241,83,37)" fg:x="2997" fg:w="166"/><text x="1.2152%" y="127.50"></text></g><g><title>small_free_list_add_ptr (103 samples, 0.03%)</title><rect x="1.1127%" y="101" width="0.0332%" height="15" fill="rgb(233,36,39)" fg:x="3455" fg:w="103"/><text x="1.3627%" y="111.50"></text></g><g><title>small_free_list_find_by_ptr (32 samples, 0.01%)</title><rect x="1.1459%" y="101" width="0.0103%" height="15" fill="rgb(226,3,54)" fg:x="3558" fg:w="32"/><text x="1.3959%" y="111.50"></text></g><g><title>free_small (497 samples, 0.16%)</title><rect x="1.0190%" y="117" width="0.1601%" height="15" fill="rgb(245,192,40)" fg:x="3164" fg:w="497"/><text x="1.2690%" y="127.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (40 samples, 0.01%)</title><rect x="1.1662%" y="101" width="0.0129%" height="15" fill="rgb(238,167,29)" fg:x="3621" fg:w="40"/><text x="1.4162%" y="111.50"></text></g><g><title>_platform_memset (169 samples, 0.05%)</title><rect x="1.2193%" y="101" width="0.0544%" height="15" fill="rgb(232,182,51)" fg:x="3786" fg:w="169"/><text x="1.4693%" y="111.50"></text></g><g><title>free_tiny (589 samples, 0.19%)</title><rect x="1.1791%" y="117" width="0.1897%" height="15" fill="rgb(231,60,39)" fg:x="3661" fg:w="589"/><text x="1.4291%" y="127.50"></text></g><g><title>tiny_free_no_lock (288 samples, 0.09%)</title><rect x="1.2760%" y="101" width="0.0928%" height="15" fill="rgb(208,69,12)" fg:x="3962" fg:w="288"/><text x="1.5260%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (1,562 samples, 0.50%)</title><rect x="0.8924%" y="133" width="0.5031%" height="15" fill="rgb(235,93,37)" fg:x="2771" fg:w="1562"/><text x="1.1424%" y="143.50"></text></g><g><title>tiny_free_no_lock (45 samples, 0.01%)</title><rect x="1.3810%" y="117" width="0.0145%" height="15" fill="rgb(213,116,39)" fg:x="4288" fg:w="45"/><text x="1.6310%" y="127.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (272 samples, 0.09%)</title><rect x="1.3990%" y="133" width="0.0876%" height="15" fill="rgb(222,207,29)" fg:x="4344" fg:w="272"/><text x="1.6490%" y="143.50"></text></g><g><title>natto::core::board::Board::bitboard_all_pieces (39 samples, 0.01%)</title><rect x="1.4986%" y="133" width="0.0126%" height="15" fill="rgb(206,96,30)" fg:x="4653" fg:w="39"/><text x="1.7486%" y="143.50"></text></g><g><title>natto::core::move_gen::generate_moves (33 samples, 0.01%)</title><rect x="1.5137%" y="133" width="0.0106%" height="15" fill="rgb(218,138,4)" fg:x="4700" fg:w="33"/><text x="1.7637%" y="143.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (169 samples, 0.05%)</title><rect x="1.5243%" y="133" width="0.0544%" height="15" fill="rgb(250,191,14)" fg:x="4733" fg:w="169"/><text x="1.7743%" y="143.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (1,064 samples, 0.34%)</title><rect x="1.5787%" y="117" width="0.3427%" height="15" fill="rgb(239,60,40)" fg:x="4902" fg:w="1064"/><text x="1.8287%" y="127.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (221 samples, 0.07%)</title><rect x="1.9214%" y="117" width="0.0712%" height="15" fill="rgb(206,27,48)" fg:x="5966" fg:w="221"/><text x="2.1714%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (212 samples, 0.07%)</title><rect x="2.2805%" y="101" width="0.0683%" height="15" fill="rgb(225,35,8)" fg:x="7081" fg:w="212"/><text x="2.5305%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (212 samples, 0.07%)</title><rect x="2.2805%" y="85" width="0.0683%" height="15" fill="rgb(250,213,24)" fg:x="7081" fg:w="212"/><text x="2.5305%" y="95.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (38 samples, 0.01%)</title><rect x="2.3488%" y="101" width="0.0122%" height="15" fill="rgb(247,123,22)" fg:x="7293" fg:w="38"/><text x="2.5988%" y="111.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (1,811 samples, 0.58%)</title><rect x="2.3610%" y="101" width="0.5833%" height="15" fill="rgb(231,138,38)" fg:x="7331" fg:w="1811"/><text x="2.6110%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (147 samples, 0.05%)</title><rect x="2.9491%" y="101" width="0.0473%" height="15" fill="rgb(231,145,46)" fg:x="9157" fg:w="147"/><text x="3.1991%" y="111.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (168 samples, 0.05%)</title><rect x="2.9965%" y="101" width="0.0541%" height="15" fill="rgb(251,118,11)" fg:x="9304" fg:w="168"/><text x="3.2465%" y="111.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (141 samples, 0.05%)</title><rect x="3.0506%" y="101" width="0.0454%" height="15" fill="rgb(217,147,25)" fg:x="9472" fg:w="141"/><text x="3.3006%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (254 samples, 0.08%)</title><rect x="3.0960%" y="101" width="0.0818%" height="15" fill="rgb(247,81,37)" fg:x="9613" fg:w="254"/><text x="3.3460%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (80 samples, 0.03%)</title><rect x="3.1810%" y="101" width="0.0258%" height="15" fill="rgb(209,12,38)" fg:x="9877" fg:w="80"/><text x="3.4310%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (105 samples, 0.03%)</title><rect x="3.2068%" y="101" width="0.0338%" height="15" fill="rgb(227,1,9)" fg:x="9957" fg:w="105"/><text x="3.4568%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (37 samples, 0.01%)</title><rect x="3.2473%" y="101" width="0.0119%" height="15" fill="rgb(248,47,43)" fg:x="10083" fg:w="37"/><text x="3.4973%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (144 samples, 0.05%)</title><rect x="3.2602%" y="85" width="0.0464%" height="15" fill="rgb(221,10,30)" fg:x="10123" fg:w="144"/><text x="3.5102%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (166 samples, 0.05%)</title><rect x="3.3066%" y="85" width="0.0535%" height="15" fill="rgb(210,229,1)" fg:x="10267" fg:w="166"/><text x="3.5566%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (241 samples, 0.08%)</title><rect x="3.3601%" y="85" width="0.0776%" height="15" fill="rgb(222,148,37)" fg:x="10433" fg:w="241"/><text x="3.6101%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,165 samples, 0.38%)</title><rect x="3.4377%" y="85" width="0.3752%" height="15" fill="rgb(234,67,33)" fg:x="10674" fg:w="1165"/><text x="3.6877%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,162 samples, 0.37%)</title><rect x="3.4386%" y="69" width="0.3742%" height="15" fill="rgb(247,98,35)" fg:x="10677" fg:w="1162"/><text x="3.6886%" y="79.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (84 samples, 0.03%)</title><rect x="3.8129%" y="85" width="0.0271%" height="15" fill="rgb(247,138,52)" fg:x="11839" fg:w="84"/><text x="4.0629%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,046 samples, 0.34%)</title><rect x="3.8399%" y="85" width="0.3369%" height="15" fill="rgb(213,79,30)" fg:x="11923" fg:w="1046"/><text x="4.0899%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (124 samples, 0.04%)</title><rect x="4.1787%" y="85" width="0.0399%" height="15" fill="rgb(246,177,23)" fg:x="12975" fg:w="124"/><text x="4.4287%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (188 samples, 0.06%)</title><rect x="4.2187%" y="85" width="0.0605%" height="15" fill="rgb(230,62,27)" fg:x="13099" fg:w="188"/><text x="4.4687%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (3,451 samples, 1.11%)</title><rect x="3.2602%" y="101" width="1.1114%" height="15" fill="rgb(216,154,8)" fg:x="10123" fg:w="3451"/><text x="3.5102%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (287 samples, 0.09%)</title><rect x="4.2792%" y="85" width="0.0924%" height="15" fill="rgb(244,35,45)" fg:x="13287" fg:w="287"/><text x="4.5292%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (108 samples, 0.03%)</title><rect x="4.3829%" y="101" width="0.0348%" height="15" fill="rgb(251,115,12)" fg:x="13609" fg:w="108"/><text x="4.6329%" y="111.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (46 samples, 0.01%)</title><rect x="4.4177%" y="101" width="0.0148%" height="15" fill="rgb(240,54,50)" fg:x="13717" fg:w="46"/><text x="4.6677%" y="111.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (9,214 samples, 2.97%)</title><rect x="1.5787%" y="133" width="2.9675%" height="15" fill="rgb(233,84,52)" fg:x="4902" fg:w="9214"/><text x="1.8287%" y="143.50">nat..</text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (7,929 samples, 2.55%)</title><rect x="1.9926%" y="117" width="2.5536%" height="15" fill="rgb(207,117,47)" fg:x="6187" fg:w="7929"/><text x="2.2426%" y="127.50">na..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (353 samples, 0.11%)</title><rect x="4.4325%" y="101" width="0.1137%" height="15" fill="rgb(249,43,39)" fg:x="13763" fg:w="353"/><text x="4.6825%" y="111.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (297 samples, 0.10%)</title><rect x="4.5462%" y="133" width="0.0957%" height="15" fill="rgb(209,38,44)" fg:x="14116" fg:w="297"/><text x="4.7962%" y="143.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (41 samples, 0.01%)</title><rect x="4.6432%" y="133" width="0.0132%" height="15" fill="rgb(236,212,23)" fg:x="14417" fg:w="41"/><text x="4.8932%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (2,649 samples, 0.85%)</title><rect x="4.6564%" y="133" width="0.8531%" height="15" fill="rgb(242,79,21)" fg:x="14458" fg:w="2649"/><text x="4.9064%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (95 samples, 0.03%)</title><rect x="5.5095%" y="133" width="0.0306%" height="15" fill="rgb(211,96,35)" fg:x="17107" fg:w="95"/><text x="5.7595%" y="143.50"></text></g><g><title>natto::core::board::Board::remove_piece (1,060 samples, 0.34%)</title><rect x="5.5404%" y="117" width="0.3414%" height="15" fill="rgb(253,215,40)" fg:x="17203" fg:w="1060"/><text x="5.7904%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (322 samples, 0.10%)</title><rect x="5.8818%" y="117" width="0.1037%" height="15" fill="rgb(211,81,21)" fg:x="18263" fg:w="322"/><text x="6.1318%" y="127.50"></text></g><g><title>natto::core::board::Board::remove_piece (1,066 samples, 0.34%)</title><rect x="5.9855%" y="101" width="0.3433%" height="15" fill="rgb(208,190,38)" fg:x="18585" fg:w="1066"/><text x="6.2355%" y="111.50"></text></g><g><title>natto::core::position::Position::put_piece (92 samples, 0.03%)</title><rect x="6.3288%" y="101" width="0.0296%" height="15" fill="rgb(235,213,38)" fg:x="19651" fg:w="92"/><text x="6.5788%" y="111.50"></text></g><g><title>natto::core::position::Position::move_piece (1,206 samples, 0.39%)</title><rect x="5.9855%" y="117" width="0.3884%" height="15" fill="rgb(237,122,38)" fg:x="18585" fg:w="1206"/><text x="6.2355%" y="127.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (46 samples, 0.01%)</title><rect x="6.3591%" y="101" width="0.0148%" height="15" fill="rgb(244,218,35)" fg:x="19745" fg:w="46"/><text x="6.6091%" y="111.50"></text></g><g><title>natto::core::position::Position::put_piece (95 samples, 0.03%)</title><rect x="6.3739%" y="117" width="0.0306%" height="15" fill="rgb(240,68,47)" fg:x="19791" fg:w="95"/><text x="6.6239%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move (2,751 samples, 0.89%)</title><rect x="5.5401%" y="133" width="0.8860%" height="15" fill="rgb(210,16,53)" fg:x="17202" fg:w="2751"/><text x="5.7901%" y="143.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (57 samples, 0.02%)</title><rect x="6.4077%" y="117" width="0.0184%" height="15" fill="rgb(235,124,12)" fg:x="19896" fg:w="57"/><text x="6.6577%" y="127.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (33 samples, 0.01%)</title><rect x="6.4957%" y="117" width="0.0106%" height="15" fill="rgb(224,169,11)" fg:x="20169" fg:w="33"/><text x="6.7457%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.01%)</title><rect x="6.5201%" y="117" width="0.0113%" height="15" fill="rgb(250,166,2)" fg:x="20245" fg:w="35"/><text x="6.7701%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (152 samples, 0.05%)</title><rect x="6.5469%" y="101" width="0.0490%" height="15" fill="rgb(242,216,29)" fg:x="20328" fg:w="152"/><text x="6.7969%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (152 samples, 0.05%)</title><rect x="6.5469%" y="85" width="0.0490%" height="15" fill="rgb(230,116,27)" fg:x="20328" fg:w="152"/><text x="6.7969%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (123 samples, 0.04%)</title><rect x="6.5981%" y="101" width="0.0396%" height="15" fill="rgb(228,99,48)" fg:x="20487" fg:w="123"/><text x="6.8481%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (422 samples, 0.14%)</title><rect x="6.5346%" y="117" width="0.1359%" height="15" fill="rgb(253,11,6)" fg:x="20290" fg:w="422"/><text x="6.7846%" y="127.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (32 samples, 0.01%)</title><rect x="6.6602%" y="101" width="0.0103%" height="15" fill="rgb(247,143,39)" fg:x="20680" fg:w="32"/><text x="6.9102%" y="111.50"></text></g><g><title>natto::core::board::Board::process_pieces (78 samples, 0.03%)</title><rect x="6.6789%" y="117" width="0.0251%" height="15" fill="rgb(236,97,10)" fg:x="20738" fg:w="78"/><text x="6.9289%" y="127.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (407 samples, 0.13%)</title><rect x="6.7040%" y="117" width="0.1311%" height="15" fill="rgb(233,208,19)" fg:x="20816" fg:w="407"/><text x="6.9540%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (57 samples, 0.02%)</title><rect x="6.8741%" y="85" width="0.0184%" height="15" fill="rgb(216,164,2)" fg:x="21344" fg:w="57"/><text x="7.1241%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (57 samples, 0.02%)</title><rect x="6.8741%" y="69" width="0.0184%" height="15" fill="rgb(220,129,5)" fg:x="21344" fg:w="57"/><text x="7.1241%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (58 samples, 0.02%)</title><rect x="6.8960%" y="85" width="0.0187%" height="15" fill="rgb(242,17,10)" fg:x="21412" fg:w="58"/><text x="7.1460%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (163 samples, 0.05%)</title><rect x="6.8721%" y="101" width="0.0525%" height="15" fill="rgb(242,107,0)" fg:x="21338" fg:w="163"/><text x="7.1221%" y="111.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (50 samples, 0.02%)</title><rect x="6.9295%" y="101" width="0.0161%" height="15" fill="rgb(251,28,31)" fg:x="21516" fg:w="50"/><text x="7.1795%" y="111.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (52 samples, 0.02%)</title><rect x="6.9456%" y="101" width="0.0167%" height="15" fill="rgb(233,223,10)" fg:x="21566" fg:w="52"/><text x="7.1956%" y="111.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (386 samples, 0.12%)</title><rect x="6.8425%" y="117" width="0.1243%" height="15" fill="rgb(215,21,27)" fg:x="21246" fg:w="386"/><text x="7.0925%" y="127.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (75 samples, 0.02%)</title><rect x="6.9668%" y="117" width="0.0242%" height="15" fill="rgb(232,23,21)" fg:x="21632" fg:w="75"/><text x="7.2168%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (106 samples, 0.03%)</title><rect x="7.0103%" y="101" width="0.0341%" height="15" fill="rgb(244,5,23)" fg:x="21767" fg:w="106"/><text x="7.2603%" y="111.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (250 samples, 0.08%)</title><rect x="7.0444%" y="101" width="0.0805%" height="15" fill="rgb(226,81,46)" fg:x="21873" fg:w="250"/><text x="7.2944%" y="111.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (2,233 samples, 0.72%)</title><rect x="7.1340%" y="101" width="0.7192%" height="15" fill="rgb(247,70,30)" fg:x="22151" fg:w="2233"/><text x="7.3840%" y="111.50"></text></g><g><title>natto::util::util::process_bits (1,328 samples, 0.43%)</title><rect x="7.8531%" y="101" width="0.4277%" height="15" fill="rgb(212,68,19)" fg:x="24384" fg:w="1328"/><text x="8.1031%" y="111.50"></text></g><g><title>natto::core::position::Position::get_board_hash (5,252 samples, 1.69%)</title><rect x="6.9910%" y="117" width="1.6915%" height="15" fill="rgb(240,187,13)" fg:x="21707" fg:w="5252"/><text x="7.2410%" y="127.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1,247 samples, 0.40%)</title><rect x="8.2808%" y="101" width="0.4016%" height="15" fill="rgb(223,113,26)" fg:x="25712" fg:w="1247"/><text x="8.5308%" y="111.50"></text></g><g><title>natto::core::position::Position::update_hash_code (7,105 samples, 2.29%)</title><rect x="6.4300%" y="133" width="2.2882%" height="15" fill="rgb(206,192,2)" fg:x="19965" fg:w="7105"/><text x="6.6800%" y="143.50">n..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (103 samples, 0.03%)</title><rect x="8.6850%" y="117" width="0.0332%" height="15" fill="rgb(241,108,4)" fg:x="26967" fg:w="103"/><text x="8.9350%" y="127.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (1,310 samples, 0.42%)</title><rect x="8.7182%" y="133" width="0.4219%" height="15" fill="rgb(247,173,49)" fg:x="27070" fg:w="1310"/><text x="8.9682%" y="143.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (210 samples, 0.07%)</title><rect x="9.4419%" y="117" width="0.0676%" height="15" fill="rgb(224,114,35)" fg:x="29317" fg:w="210"/><text x="9.6919%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (134 samples, 0.04%)</title><rect x="9.5095%" y="117" width="0.0432%" height="15" fill="rgb(245,159,27)" fg:x="29527" fg:w="134"/><text x="9.7595%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (182 samples, 0.06%)</title><rect x="9.5527%" y="117" width="0.0586%" height="15" fill="rgb(245,172,44)" fg:x="29661" fg:w="182"/><text x="9.8027%" y="127.50"></text></g><g><title>natto::core::board::Board::bitboard_all_pieces (453 samples, 0.15%)</title><rect x="9.6113%" y="117" width="0.1459%" height="15" fill="rgb(236,23,11)" fg:x="29843" fg:w="453"/><text x="9.8613%" y="127.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (1,704 samples, 0.55%)</title><rect x="9.7655%" y="117" width="0.5488%" height="15" fill="rgb(205,117,38)" fg:x="30322" fg:w="1704"/><text x="10.0155%" y="127.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (7,993 samples, 2.57%)</title><rect x="10.3143%" y="101" width="2.5742%" height="15" fill="rgb(237,72,25)" fg:x="32026" fg:w="7993"/><text x="10.5643%" y="111.50">na..</text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (2,632 samples, 0.85%)</title><rect x="12.8886%" y="101" width="0.8477%" height="15" fill="rgb(244,70,9)" fg:x="40019" fg:w="2632"/><text x="13.1386%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (79 samples, 0.03%)</title><rect x="16.0361%" y="85" width="0.0254%" height="15" fill="rgb(217,125,39)" fg:x="49792" fg:w="79"/><text x="16.2861%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (158 samples, 0.05%)</title><rect x="16.0615%" y="85" width="0.0509%" height="15" fill="rgb(235,36,10)" fg:x="49871" fg:w="158"/><text x="16.3115%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (148 samples, 0.05%)</title><rect x="16.1124%" y="85" width="0.0477%" height="15" fill="rgb(251,123,47)" fg:x="50029" fg:w="148"/><text x="16.3624%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,573 samples, 0.83%)</title><rect x="16.1601%" y="85" width="0.8287%" height="15" fill="rgb(221,13,13)" fg:x="50177" fg:w="2573"/><text x="16.4101%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,573 samples, 0.83%)</title><rect x="16.1601%" y="69" width="0.8287%" height="15" fill="rgb(238,131,9)" fg:x="50177" fg:w="2573"/><text x="16.4101%" y="79.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (419 samples, 0.13%)</title><rect x="16.9887%" y="85" width="0.1349%" height="15" fill="rgb(211,50,8)" fg:x="52750" fg:w="419"/><text x="17.2387%" y="95.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (21,913 samples, 7.06%)</title><rect x="17.1237%" y="85" width="7.0573%" height="15" fill="rgb(245,182,24)" fg:x="53169" fg:w="21913"/><text x="17.3737%" y="95.50">&lt;u64 as b..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (175 samples, 0.06%)</title><rect x="24.1865%" y="85" width="0.0564%" height="15" fill="rgb(242,14,37)" fg:x="75099" fg:w="175"/><text x="24.4365%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1,702 samples, 0.55%)</title><rect x="24.2457%" y="85" width="0.5481%" height="15" fill="rgb(246,228,12)" fg:x="75283" fg:w="1702"/><text x="24.4957%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,976 samples, 0.64%)</title><rect x="24.7939%" y="85" width="0.6364%" height="15" fill="rgb(213,55,15)" fg:x="76985" fg:w="1976"/><text x="25.0439%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1,776 samples, 0.57%)</title><rect x="25.4303%" y="85" width="0.5720%" height="15" fill="rgb(209,9,3)" fg:x="78961" fg:w="1776"/><text x="25.6803%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,472 samples, 0.80%)</title><rect x="26.0023%" y="85" width="0.7961%" height="15" fill="rgb(230,59,30)" fg:x="80737" fg:w="2472"/><text x="26.2523%" y="95.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (36 samples, 0.01%)</title><rect x="26.8016%" y="85" width="0.0116%" height="15" fill="rgb(209,121,21)" fg:x="83219" fg:w="36"/><text x="27.0516%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (84 samples, 0.03%)</title><rect x="26.8132%" y="85" width="0.0271%" height="15" fill="rgb(220,109,13)" fg:x="83255" fg:w="84"/><text x="27.0632%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (746 samples, 0.24%)</title><rect x="26.8422%" y="85" width="0.2403%" height="15" fill="rgb(232,18,1)" fg:x="83345" fg:w="746"/><text x="27.0922%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1,064 samples, 0.34%)</title><rect x="27.0824%" y="85" width="0.3427%" height="15" fill="rgb(215,41,42)" fg:x="84091" fg:w="1064"/><text x="27.3324%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (160 samples, 0.05%)</title><rect x="27.4251%" y="85" width="0.0515%" height="15" fill="rgb(224,123,36)" fg:x="85155" fg:w="160"/><text x="27.6751%" y="95.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (129 samples, 0.04%)</title><rect x="27.4767%" y="85" width="0.0415%" height="15" fill="rgb(240,125,3)" fg:x="85315" fg:w="129"/><text x="27.7267%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (460 samples, 0.15%)</title><rect x="27.5182%" y="85" width="0.1481%" height="15" fill="rgb(205,98,50)" fg:x="85444" fg:w="460"/><text x="27.7682%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (43 samples, 0.01%)</title><rect x="27.6663%" y="85" width="0.0138%" height="15" fill="rgb(205,185,37)" fg:x="85904" fg:w="43"/><text x="27.9163%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,927 samples, 0.62%)</title><rect x="27.6812%" y="69" width="0.6206%" height="15" fill="rgb(238,207,15)" fg:x="85950" fg:w="1927"/><text x="27.9312%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,030 samples, 0.65%)</title><rect x="28.3018%" y="69" width="0.6538%" height="15" fill="rgb(213,199,42)" fg:x="87877" fg:w="2030"/><text x="28.5518%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,790 samples, 0.90%)</title><rect x="28.9556%" y="69" width="0.8986%" height="15" fill="rgb(235,201,11)" fg:x="89907" fg:w="2790"/><text x="29.2056%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (12,814 samples, 4.13%)</title><rect x="29.8541%" y="69" width="4.1269%" height="15" fill="rgb(207,46,11)" fg:x="92697" fg:w="12814"/><text x="30.1041%" y="79.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12,795 samples, 4.12%)</title><rect x="29.8602%" y="53" width="4.1208%" height="15" fill="rgb(241,35,35)" fg:x="92716" fg:w="12795"/><text x="30.1102%" y="63.50">&lt;cor..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (967 samples, 0.31%)</title><rect x="33.9810%" y="69" width="0.3114%" height="15" fill="rgb(243,32,47)" fg:x="105511" fg:w="967"/><text x="34.2310%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11,268 samples, 3.63%)</title><rect x="34.2924%" y="69" width="3.6290%" height="15" fill="rgb(247,202,23)" fg:x="106478" fg:w="11268"/><text x="34.5424%" y="79.50">core..</text></g><g><title>core::hash::Hasher::write_u8 (192 samples, 0.06%)</title><rect x="37.9214%" y="69" width="0.0618%" height="15" fill="rgb(219,102,11)" fg:x="117746" fg:w="192"/><text x="38.1714%" y="79.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1,318 samples, 0.42%)</title><rect x="37.9858%" y="69" width="0.4245%" height="15" fill="rgb(243,110,44)" fg:x="117946" fg:w="1318"/><text x="38.2358%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (2,339 samples, 0.75%)</title><rect x="38.4103%" y="69" width="0.7533%" height="15" fill="rgb(222,74,54)" fg:x="119264" fg:w="2339"/><text x="38.6603%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (38,536 samples, 12.41%)</title><rect x="27.6802%" y="85" width="12.4110%" height="15" fill="rgb(216,99,12)" fg:x="85947" fg:w="38536"/><text x="27.9302%" y="95.50">hashbrown::map::mak..</text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (2,880 samples, 0.93%)</title><rect x="39.1636%" y="69" width="0.9275%" height="15" fill="rgb(226,22,26)" fg:x="121603" fg:w="2880"/><text x="39.4136%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (119 samples, 0.04%)</title><rect x="40.0911%" y="85" width="0.0383%" height="15" fill="rgb(217,163,10)" fg:x="124483" fg:w="119"/><text x="40.3411%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (230 samples, 0.07%)</title><rect x="40.1295%" y="85" width="0.0741%" height="15" fill="rgb(213,25,53)" fg:x="124602" fg:w="230"/><text x="40.3795%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (218 samples, 0.07%)</title><rect x="40.2035%" y="85" width="0.0702%" height="15" fill="rgb(252,105,26)" fg:x="124832" fg:w="218"/><text x="40.4535%" y="95.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (44 samples, 0.01%)</title><rect x="40.2738%" y="85" width="0.0142%" height="15" fill="rgb(220,39,43)" fg:x="125050" fg:w="44"/><text x="40.5238%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (1,013 samples, 0.33%)</title><rect x="40.2879%" y="85" width="0.3262%" height="15" fill="rgb(229,68,48)" fg:x="125094" fg:w="1013"/><text x="40.5379%" y="95.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (650 samples, 0.21%)</title><rect x="40.6142%" y="85" width="0.2093%" height="15" fill="rgb(252,8,32)" fg:x="126107" fg:w="650"/><text x="40.8642%" y="95.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (98,048 samples, 31.58%)</title><rect x="10.3143%" y="117" width="31.5775%" height="15" fill="rgb(223,20,43)" fg:x="32026" fg:w="98048"/><text x="10.5643%" y="127.50">natto::core::move_gen::square_attacks_finder</text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (87,423 samples, 28.16%)</title><rect x="13.7362%" y="101" width="28.1556%" height="15" fill="rgb(229,81,49)" fg:x="42651" fg:w="87423"/><text x="13.9862%" y="111.50">natto::core::move_gen::square_attacks_finder_..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (3,317 samples, 1.07%)</title><rect x="40.8235%" y="85" width="1.0683%" height="15" fill="rgb(236,28,36)" fg:x="126757" fg:w="3317"/><text x="41.0735%" y="95.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (2,707 samples, 0.87%)</title><rect x="41.8918%" y="117" width="0.8718%" height="15" fill="rgb(249,185,26)" fg:x="130074" fg:w="2707"/><text x="42.1418%" y="127.50"></text></g><g><title>natto::core::position::Position::castling_rights_as_u64 (61 samples, 0.02%)</title><rect x="42.7636%" y="117" width="0.0196%" height="15" fill="rgb(249,174,33)" fg:x="132781" fg:w="61"/><text x="43.0136%" y="127.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (342 samples, 0.11%)</title><rect x="42.7833%" y="117" width="0.1101%" height="15" fill="rgb(233,201,37)" fg:x="132842" fg:w="342"/><text x="43.0333%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move (6,149 samples, 1.98%)</title><rect x="42.8934%" y="117" width="1.9804%" height="15" fill="rgb(221,78,26)" fg:x="133184" fg:w="6149"/><text x="43.1434%" y="127.50">n..</text></g><g><title>natto::core::position::Position::make_move::do_basic_move (767 samples, 0.25%)</title><rect x="44.8738%" y="117" width="0.2470%" height="15" fill="rgb(250,127,30)" fg:x="139333" fg:w="767"/><text x="45.1238%" y="127.50"></text></g><g><title>natto::core::board::Board::remove_piece (8,690 samples, 2.80%)</title><rect x="45.1221%" y="101" width="2.7987%" height="15" fill="rgb(230,49,44)" fg:x="140104" fg:w="8690"/><text x="45.3721%" y="111.50">na..</text></g><g><title>natto::core::position::Position::make_move::do_basic_move (2,699 samples, 0.87%)</title><rect x="47.9208%" y="101" width="0.8692%" height="15" fill="rgb(229,67,23)" fg:x="148794" fg:w="2699"/><text x="48.1708%" y="111.50"></text></g><g><title>natto::core::board::Board::remove_piece (11,091 samples, 3.57%)</title><rect x="48.7907%" y="85" width="3.5720%" height="15" fill="rgb(249,83,47)" fg:x="151495" fg:w="11091"/><text x="49.0407%" y="95.50">natt..</text></g><g><title>natto::core::position::Position::put_piece (1,141 samples, 0.37%)</title><rect x="52.3626%" y="85" width="0.3675%" height="15" fill="rgb(215,43,3)" fg:x="162586" fg:w="1141"/><text x="52.6126%" y="95.50"></text></g><g><title>natto::core::position::Position::move_piece (12,845 samples, 4.14%)</title><rect x="48.7900%" y="101" width="4.1369%" height="15" fill="rgb(238,154,13)" fg:x="151493" fg:w="12845"/><text x="49.0400%" y="111.50">natto..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (611 samples, 0.20%)</title><rect x="52.7301%" y="85" width="0.1968%" height="15" fill="rgb(219,56,2)" fg:x="163727" fg:w="611"/><text x="52.9801%" y="95.50"></text></g><g><title>natto::core::position::Position::put_piece (1,287 samples, 0.41%)</title><rect x="52.9269%" y="101" width="0.4145%" height="15" fill="rgb(233,0,4)" fg:x="164338" fg:w="1287"/><text x="53.1769%" y="111.50"></text></g><g><title>natto::core::position::Position::remove_piece (144 samples, 0.05%)</title><rect x="53.3414%" y="101" width="0.0464%" height="15" fill="rgb(235,30,7)" fg:x="165625" fg:w="144"/><text x="53.5914%" y="111.50"></text></g><g><title>natto::core::position::Position::make_move (26,424 samples, 8.51%)</title><rect x="45.1208%" y="117" width="8.5101%" height="15" fill="rgb(250,79,13)" fg:x="140100" fg:w="26424"/><text x="45.3708%" y="127.50">natto::core:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (754 samples, 0.24%)</title><rect x="53.3881%" y="101" width="0.2428%" height="15" fill="rgb(211,146,34)" fg:x="165770" fg:w="754"/><text x="53.6381%" y="111.50"></text></g><g><title>natto::core::position::Position::side_to_move (72 samples, 0.02%)</title><rect x="53.6322%" y="117" width="0.0232%" height="15" fill="rgb(228,22,38)" fg:x="166528" fg:w="72"/><text x="53.8822%" y="127.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (175 samples, 0.06%)</title><rect x="54.4744%" y="101" width="0.0564%" height="15" fill="rgb(235,168,5)" fg:x="169143" fg:w="175"/><text x="54.7244%" y="111.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (130 samples, 0.04%)</title><rect x="54.5308%" y="101" width="0.0419%" height="15" fill="rgb(221,155,16)" fg:x="169318" fg:w="130"/><text x="54.7808%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (55 samples, 0.02%)</title><rect x="54.5733%" y="101" width="0.0177%" height="15" fill="rgb(215,215,53)" fg:x="169450" fg:w="55"/><text x="54.8233%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (75 samples, 0.02%)</title><rect x="54.5910%" y="101" width="0.0242%" height="15" fill="rgb(223,4,10)" fg:x="169505" fg:w="75"/><text x="54.8410%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (41 samples, 0.01%)</title><rect x="54.6177%" y="85" width="0.0132%" height="15" fill="rgb(234,103,6)" fg:x="169588" fg:w="41"/><text x="54.8677%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (203 samples, 0.07%)</title><rect x="54.6309%" y="85" width="0.0654%" height="15" fill="rgb(227,97,0)" fg:x="169629" fg:w="203"/><text x="54.8809%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (79 samples, 0.03%)</title><rect x="54.6963%" y="85" width="0.0254%" height="15" fill="rgb(234,150,53)" fg:x="169832" fg:w="79"/><text x="54.9463%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,476 samples, 0.48%)</title><rect x="54.7217%" y="85" width="0.4754%" height="15" fill="rgb(228,201,54)" fg:x="169911" fg:w="1476"/><text x="54.9717%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,470 samples, 0.47%)</title><rect x="54.7237%" y="69" width="0.4734%" height="15" fill="rgb(222,22,37)" fg:x="169917" fg:w="1470"/><text x="54.9737%" y="79.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (68 samples, 0.02%)</title><rect x="55.1971%" y="85" width="0.0219%" height="15" fill="rgb(237,53,32)" fg:x="171387" fg:w="68"/><text x="55.4471%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,138 samples, 0.37%)</title><rect x="55.2190%" y="85" width="0.3665%" height="15" fill="rgb(233,25,53)" fg:x="171455" fg:w="1138"/><text x="55.4690%" y="95.50"></text></g><g><title>core::hash::Hasher::write_u8 (130 samples, 0.04%)</title><rect x="55.5855%" y="85" width="0.0419%" height="15" fill="rgb(210,40,34)" fg:x="172593" fg:w="130"/><text x="55.8355%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (226 samples, 0.07%)</title><rect x="55.6309%" y="85" width="0.0728%" height="15" fill="rgb(241,220,44)" fg:x="172734" fg:w="226"/><text x="55.8809%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (235 samples, 0.08%)</title><rect x="55.7037%" y="85" width="0.0757%" height="15" fill="rgb(235,28,35)" fg:x="172960" fg:w="235"/><text x="55.9537%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (3,884 samples, 1.25%)</title><rect x="54.6151%" y="101" width="1.2509%" height="15" fill="rgb(210,56,17)" fg:x="169580" fg:w="3884"/><text x="54.8651%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (269 samples, 0.09%)</title><rect x="55.7794%" y="85" width="0.0866%" height="15" fill="rgb(224,130,29)" fg:x="173195" fg:w="269"/><text x="56.0294%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (62 samples, 0.02%)</title><rect x="55.8660%" y="101" width="0.0200%" height="15" fill="rgb(235,212,8)" fg:x="173464" fg:w="62"/><text x="56.1160%" y="111.50"></text></g><g><title>natto::core::board::Board::process_pieces (581 samples, 0.19%)</title><rect x="55.8895%" y="101" width="0.1871%" height="15" fill="rgb(223,33,50)" fg:x="173537" fg:w="581"/><text x="56.1395%" y="111.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (3,791 samples, 1.22%)</title><rect x="56.0767%" y="101" width="1.2209%" height="15" fill="rgb(219,149,13)" fg:x="174118" fg:w="3791"/><text x="56.3267%" y="111.50"></text></g><g><title>natto::core::position::Position::castling_rights_as_u64 (38 samples, 0.01%)</title><rect x="57.2976%" y="101" width="0.0122%" height="15" fill="rgb(250,156,29)" fg:x="177909" fg:w="38"/><text x="57.5476%" y="111.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (110 samples, 0.04%)</title><rect x="57.4451%" y="85" width="0.0354%" height="15" fill="rgb(216,193,19)" fg:x="178367" fg:w="110"/><text x="57.6951%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (76 samples, 0.02%)</title><rect x="57.4805%" y="85" width="0.0245%" height="15" fill="rgb(216,135,14)" fg:x="178477" fg:w="76"/><text x="57.7305%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (463 samples, 0.15%)</title><rect x="57.5250%" y="69" width="0.1491%" height="15" fill="rgb(241,47,5)" fg:x="178615" fg:w="463"/><text x="57.7750%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (463 samples, 0.15%)</title><rect x="57.5250%" y="53" width="0.1491%" height="15" fill="rgb(233,42,35)" fg:x="178615" fg:w="463"/><text x="57.7750%" y="63.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (120 samples, 0.04%)</title><rect x="57.6741%" y="69" width="0.0386%" height="15" fill="rgb(231,13,6)" fg:x="179078" fg:w="120"/><text x="57.9241%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (418 samples, 0.13%)</title><rect x="57.7127%" y="69" width="0.1346%" height="15" fill="rgb(207,181,40)" fg:x="179198" fg:w="418"/><text x="57.9627%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (36 samples, 0.01%)</title><rect x="57.8480%" y="69" width="0.0116%" height="15" fill="rgb(254,173,49)" fg:x="179618" fg:w="36"/><text x="58.0980%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (1,374 samples, 0.44%)</title><rect x="57.5053%" y="85" width="0.4425%" height="15" fill="rgb(221,1,38)" fg:x="178554" fg:w="1374"/><text x="57.7553%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (274 samples, 0.09%)</title><rect x="57.8596%" y="69" width="0.0882%" height="15" fill="rgb(206,124,46)" fg:x="179654" fg:w="274"/><text x="58.1096%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (106 samples, 0.03%)</title><rect x="57.9478%" y="85" width="0.0341%" height="15" fill="rgb(249,21,11)" fg:x="179928" fg:w="106"/><text x="58.1978%" y="95.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (464 samples, 0.15%)</title><rect x="57.9823%" y="85" width="0.1494%" height="15" fill="rgb(222,201,40)" fg:x="180035" fg:w="464"/><text x="58.2323%" y="95.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (579 samples, 0.19%)</title><rect x="58.1317%" y="85" width="0.1865%" height="15" fill="rgb(235,61,29)" fg:x="180499" fg:w="579"/><text x="58.3817%" y="95.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (3,227 samples, 1.04%)</title><rect x="57.3098%" y="101" width="1.0393%" height="15" fill="rgb(219,207,3)" fg:x="177947" fg:w="3227"/><text x="57.5598%" y="111.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (96 samples, 0.03%)</title><rect x="58.3182%" y="85" width="0.0309%" height="15" fill="rgb(222,56,46)" fg:x="181078" fg:w="96"/><text x="58.5682%" y="95.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (957 samples, 0.31%)</title><rect x="58.3491%" y="101" width="0.3082%" height="15" fill="rgb(239,76,54)" fg:x="181174" fg:w="957"/><text x="58.5991%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (929 samples, 0.30%)</title><rect x="58.8641%" y="85" width="0.2992%" height="15" fill="rgb(231,124,27)" fg:x="182773" fg:w="929"/><text x="59.1141%" y="95.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (2,711 samples, 0.87%)</title><rect x="59.1633%" y="85" width="0.8731%" height="15" fill="rgb(249,195,6)" fg:x="183702" fg:w="2711"/><text x="59.4133%" y="95.50"></text></g><g><title>natto::core::board::Board::process_pieces (266 samples, 0.09%)</title><rect x="60.0364%" y="85" width="0.0857%" height="15" fill="rgb(237,174,47)" fg:x="186413" fg:w="266"/><text x="60.2864%" y="95.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (24,182 samples, 7.79%)</title><rect x="60.1221%" y="85" width="7.7881%" height="15" fill="rgb(206,201,31)" fg:x="186679" fg:w="24182"/><text x="60.3721%" y="95.50">natto::core..</text></g><g><title>natto::util::util::process_bits (16,411 samples, 5.29%)</title><rect x="67.9101%" y="85" width="5.2853%" height="15" fill="rgb(231,57,52)" fg:x="210861" fg:w="16411"/><text x="68.1601%" y="95.50">natto:..</text></g><g><title>natto::core::position::Position::get_board_hash (59,322 samples, 19.11%)</title><rect x="58.6573%" y="101" width="19.1053%" height="15" fill="rgb(248,177,22)" fg:x="182131" fg:w="59322"/><text x="58.9073%" y="111.50">natto::core::position::Positio..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (14,181 samples, 4.57%)</title><rect x="73.1955%" y="85" width="4.5671%" height="15" fill="rgb(215,211,37)" fg:x="227272" fg:w="14181"/><text x="73.4455%" y="95.50">once_..</text></g><g><title>natto::core::position::Position::opposing_side (40 samples, 0.01%)</title><rect x="77.7626%" y="101" width="0.0129%" height="15" fill="rgb(241,128,51)" fg:x="241453" fg:w="40"/><text x="78.0126%" y="111.50"></text></g><g><title>natto::core::position::Position::update_hash_code (75,925 samples, 24.45%)</title><rect x="53.6554%" y="117" width="24.4525%" height="15" fill="rgb(227,165,31)" fg:x="166600" fg:w="75925"/><text x="53.9054%" y="127.50">natto::core::position::Position::update..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1,032 samples, 0.33%)</title><rect x="77.7755%" y="101" width="0.3324%" height="15" fill="rgb(228,167,24)" fg:x="241493" fg:w="1032"/><text x="78.0255%" y="111.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (1,889 samples, 0.61%)</title><rect x="78.1079%" y="117" width="0.6084%" height="15" fill="rgb(228,143,12)" fg:x="242525" fg:w="1889"/><text x="78.3579%" y="127.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (216,779 samples, 69.82%)</title><rect x="9.1401%" y="133" width="69.8161%" height="15" fill="rgb(249,149,8)" fg:x="28380" fg:w="216779"/><text x="9.3901%" y="143.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (745 samples, 0.24%)</title><rect x="78.7163%" y="117" width="0.2399%" height="15" fill="rgb(243,35,44)" fg:x="244414" fg:w="745"/><text x="78.9663%" y="127.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (36 samples, 0.01%)</title><rect x="78.9562%" y="117" width="0.0116%" height="15" fill="rgb(246,89,9)" fg:x="245159" fg:w="36"/><text x="79.2062%" y="127.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (36 samples, 0.01%)</title><rect x="78.9678%" y="117" width="0.0116%" height="15" fill="rgb(233,213,13)" fg:x="245195" fg:w="36"/><text x="79.2178%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (81 samples, 0.03%)</title><rect x="78.9842%" y="117" width="0.0261%" height="15" fill="rgb(233,141,41)" fg:x="245246" fg:w="81"/><text x="79.2342%" y="127.50"></text></g><g><title>DYLD-STUB$$memcpy (32 samples, 0.01%)</title><rect x="79.0519%" y="85" width="0.0103%" height="15" fill="rgb(239,167,4)" fg:x="245456" fg:w="32"/><text x="79.3019%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8,909 samples, 2.87%)</title><rect x="79.0180%" y="101" width="2.8692%" height="15" fill="rgb(209,217,16)" fg:x="245351" fg:w="8909"/><text x="79.2680%" y="111.50">&lt;a..</text></g><g><title>_platform_memmove (8,772 samples, 2.83%)</title><rect x="79.0622%" y="85" width="2.8251%" height="15" fill="rgb(219,88,35)" fg:x="245488" fg:w="8772"/><text x="79.3122%" y="95.50">_p..</text></g><g><title>&lt;arrayvec::arrayvec::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (173 samples, 0.06%)</title><rect x="81.8873%" y="101" width="0.0557%" height="15" fill="rgb(220,193,23)" fg:x="254260" fg:w="173"/><text x="82.1373%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (32 samples, 0.01%)</title><rect x="81.9530%" y="85" width="0.0103%" height="15" fill="rgb(230,90,52)" fg:x="254464" fg:w="32"/><text x="82.2030%" y="95.50"></text></g><g><title>_malloc_zone_malloc (99 samples, 0.03%)</title><rect x="81.9633%" y="85" width="0.0319%" height="15" fill="rgb(252,106,19)" fg:x="254496" fg:w="99"/><text x="82.2133%" y="95.50"></text></g><g><title>small_malloc_should_clear (165 samples, 0.05%)</title><rect x="82.0010%" y="85" width="0.0531%" height="15" fill="rgb(206,74,20)" fg:x="254613" fg:w="165"/><text x="82.2510%" y="95.50"></text></g><g><title>rack_get_thread_index (33 samples, 0.01%)</title><rect x="82.1404%" y="53" width="0.0106%" height="15" fill="rgb(230,138,44)" fg:x="255046" fg:w="33"/><text x="82.3904%" y="63.50"></text></g><g><title>small_malloc_should_clear (184 samples, 0.06%)</title><rect x="82.0928%" y="69" width="0.0593%" height="15" fill="rgb(235,182,43)" fg:x="254898" fg:w="184"/><text x="82.3428%" y="79.50"></text></g><g><title>rack_get_thread_index (32 samples, 0.01%)</title><rect x="82.1771%" y="53" width="0.0103%" height="15" fill="rgb(242,16,51)" fg:x="255160" fg:w="32"/><text x="82.4271%" y="63.50"></text></g><g><title>szone_malloc_should_clear (673 samples, 0.22%)</title><rect x="82.0541%" y="85" width="0.2167%" height="15" fill="rgb(248,9,4)" fg:x="254778" fg:w="673"/><text x="82.3041%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (346 samples, 0.11%)</title><rect x="82.1594%" y="69" width="0.1114%" height="15" fill="rgb(210,31,22)" fg:x="255105" fg:w="346"/><text x="82.4094%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (249 samples, 0.08%)</title><rect x="82.1907%" y="53" width="0.0802%" height="15" fill="rgb(239,54,39)" fg:x="255202" fg:w="249"/><text x="82.4407%" y="63.50"></text></g><g><title>alloc::alloc::alloc (1,029 samples, 0.33%)</title><rect x="81.9430%" y="101" width="0.3314%" height="15" fill="rgb(230,99,41)" fg:x="254433" fg:w="1029"/><text x="82.1930%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1,154 samples, 0.37%)</title><rect x="82.2744%" y="101" width="0.3717%" height="15" fill="rgb(253,106,12)" fg:x="255462" fg:w="1154"/><text x="82.5244%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (99 samples, 0.03%)</title><rect x="82.6470%" y="101" width="0.0319%" height="15" fill="rgb(213,46,41)" fg:x="256619" fg:w="99"/><text x="82.8970%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1,125 samples, 0.36%)</title><rect x="82.6789%" y="101" width="0.3623%" height="15" fill="rgb(215,133,35)" fg:x="256718" fg:w="1125"/><text x="82.9289%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (66 samples, 0.02%)</title><rect x="83.0412%" y="101" width="0.0213%" height="15" fill="rgb(213,28,5)" fg:x="257843" fg:w="66"/><text x="83.2912%" y="111.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (41 samples, 0.01%)</title><rect x="83.0625%" y="101" width="0.0132%" height="15" fill="rgb(215,77,49)" fg:x="257909" fg:w="41"/><text x="83.3125%" y="111.50"></text></g><g><title>core::ptr::read (636 samples, 0.20%)</title><rect x="83.0757%" y="101" width="0.2048%" height="15" fill="rgb(248,100,22)" fg:x="257950" fg:w="636"/><text x="83.3257%" y="111.50"></text></g><g><title>core::ptr::write (986 samples, 0.32%)</title><rect x="83.2805%" y="101" width="0.3176%" height="15" fill="rgb(208,67,9)" fg:x="258586" fg:w="986"/><text x="83.5305%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14,296 samples, 4.60%)</title><rect x="79.0103%" y="117" width="4.6042%" height="15" fill="rgb(219,133,21)" fg:x="245327" fg:w="14296"/><text x="79.2603%" y="127.50">&lt;allo..</text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (38 samples, 0.01%)</title><rect x="83.6145%" y="117" width="0.0122%" height="15" fill="rgb(246,46,29)" fg:x="259623" fg:w="38"/><text x="83.8645%" y="127.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8,511 samples, 2.74%)</title><rect x="83.6267%" y="117" width="2.7411%" height="15" fill="rgb(246,185,52)" fg:x="259661" fg:w="8511"/><text x="83.8767%" y="127.50">&lt;a..</text></g><g><title>_platform_memmove (8,451 samples, 2.72%)</title><rect x="83.6461%" y="101" width="2.7217%" height="15" fill="rgb(252,136,11)" fg:x="259721" fg:w="8451"/><text x="83.8961%" y="111.50">_p..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (104 samples, 0.03%)</title><rect x="86.3678%" y="117" width="0.0335%" height="15" fill="rgb(219,138,53)" fg:x="268172" fg:w="104"/><text x="86.6178%" y="127.50"></text></g><g><title>&lt;natto::core::move::Move as core::clone::Clone&gt;::clone (1,194 samples, 0.38%)</title><rect x="86.4064%" y="117" width="0.3845%" height="15" fill="rgb(211,51,23)" fg:x="268292" fg:w="1194"/><text x="86.6564%" y="127.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (7,661 samples, 2.47%)</title><rect x="86.7910%" y="117" width="2.4673%" height="15" fill="rgb(247,221,28)" fg:x="269486" fg:w="7661"/><text x="87.0410%" y="127.50">&lt;n..</text></g><g><title>_platform_memmove (7,632 samples, 2.46%)</title><rect x="86.8003%" y="101" width="2.4580%" height="15" fill="rgb(251,222,45)" fg:x="269515" fg:w="7632"/><text x="87.0503%" y="111.50">_p..</text></g><g><title>_nanov2_free (58 samples, 0.02%)</title><rect x="89.2583%" y="117" width="0.0187%" height="15" fill="rgb(217,162,53)" fg:x="277147" fg:w="58"/><text x="89.5083%" y="127.50"></text></g><g><title>_szone_free (40 samples, 0.01%)</title><rect x="89.2770%" y="117" width="0.0129%" height="15" fill="rgb(229,93,14)" fg:x="277205" fg:w="40"/><text x="89.5270%" y="127.50"></text></g><g><title>_malloc_zone_malloc (92 samples, 0.03%)</title><rect x="89.3018%" y="101" width="0.0296%" height="15" fill="rgb(209,67,49)" fg:x="277282" fg:w="92"/><text x="89.5518%" y="111.50"></text></g><g><title>rack_get_thread_index (39 samples, 0.01%)</title><rect x="89.4116%" y="69" width="0.0126%" height="15" fill="rgb(213,87,29)" fg:x="277623" fg:w="39"/><text x="89.6616%" y="79.50"></text></g><g><title>small_free_list_add_ptr (45 samples, 0.01%)</title><rect x="89.5501%" y="53" width="0.0145%" height="15" fill="rgb(205,151,52)" fg:x="278053" fg:w="45"/><text x="89.8001%" y="63.50"></text></g><g><title>small_free_list_remove_ptr (68 samples, 0.02%)</title><rect x="89.5646%" y="53" width="0.0219%" height="15" fill="rgb(253,215,39)" fg:x="278098" fg:w="68"/><text x="89.8146%" y="63.50"></text></g><g><title>small_malloc_should_clear (703 samples, 0.23%)</title><rect x="89.3890%" y="85" width="0.2264%" height="15" fill="rgb(221,220,41)" fg:x="277553" fg:w="703"/><text x="89.6390%" y="95.50"></text></g><g><title>small_malloc_from_free_list (572 samples, 0.18%)</title><rect x="89.4312%" y="69" width="0.1842%" height="15" fill="rgb(218,133,21)" fg:x="277684" fg:w="572"/><text x="89.6812%" y="79.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (90 samples, 0.03%)</title><rect x="89.5865%" y="53" width="0.0290%" height="15" fill="rgb(221,193,43)" fg:x="278166" fg:w="90"/><text x="89.8365%" y="63.50"></text></g><g><title>tiny_malloc_from_free_list (41 samples, 0.01%)</title><rect x="89.6155%" y="85" width="0.0132%" height="15" fill="rgb(240,128,52)" fg:x="278256" fg:w="41"/><text x="89.8655%" y="95.50"></text></g><g><title>rack_get_thread_index (32 samples, 0.01%)</title><rect x="89.6483%" y="69" width="0.0103%" height="15" fill="rgb(253,114,12)" fg:x="278358" fg:w="32"/><text x="89.8983%" y="79.50"></text></g><g><title>szone_malloc_should_clear (1,300 samples, 0.42%)</title><rect x="89.3462%" y="101" width="0.4187%" height="15" fill="rgb(215,223,47)" fg:x="277420" fg:w="1300"/><text x="89.5962%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (423 samples, 0.14%)</title><rect x="89.6287%" y="85" width="0.1362%" height="15" fill="rgb(248,225,23)" fg:x="278297" fg:w="423"/><text x="89.8787%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (328 samples, 0.11%)</title><rect x="89.6593%" y="69" width="0.1056%" height="15" fill="rgb(250,108,0)" fg:x="278392" fg:w="328"/><text x="89.9093%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1,482 samples, 0.48%)</title><rect x="89.2899%" y="117" width="0.4773%" height="15" fill="rgb(228,208,7)" fg:x="277245" fg:w="1482"/><text x="89.5399%" y="127.50"></text></g><g><title>DYLD-STUB$$free (62 samples, 0.02%)</title><rect x="89.7671%" y="101" width="0.0200%" height="15" fill="rgb(244,45,10)" fg:x="278727" fg:w="62"/><text x="90.0171%" y="111.50"></text></g><g><title>_free (86 samples, 0.03%)</title><rect x="89.7910%" y="101" width="0.0277%" height="15" fill="rgb(207,125,25)" fg:x="278801" fg:w="86"/><text x="90.0410%" y="111.50"></text></g><g><title>_nanov2_free (68 samples, 0.02%)</title><rect x="89.8187%" y="101" width="0.0219%" height="15" fill="rgb(210,195,18)" fg:x="278887" fg:w="68"/><text x="90.0687%" y="111.50"></text></g><g><title>_szone_free (145 samples, 0.05%)</title><rect x="89.8406%" y="101" width="0.0467%" height="15" fill="rgb(249,80,12)" fg:x="278955" fg:w="145"/><text x="90.0906%" y="111.50"></text></g><g><title>free_small (255 samples, 0.08%)</title><rect x="89.8873%" y="101" width="0.0821%" height="15" fill="rgb(221,65,9)" fg:x="279100" fg:w="255"/><text x="90.1373%" y="111.50"></text></g><g><title>_platform_memset (115 samples, 0.04%)</title><rect x="90.0035%" y="85" width="0.0370%" height="15" fill="rgb(235,49,36)" fg:x="279461" fg:w="115"/><text x="90.2535%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (72 samples, 0.02%)</title><rect x="90.1092%" y="69" width="0.0232%" height="15" fill="rgb(225,32,20)" fg:x="279789" fg:w="72"/><text x="90.3592%" y="79.50"></text></g><g><title>free_tiny (534 samples, 0.17%)</title><rect x="89.9694%" y="101" width="0.1720%" height="15" fill="rgb(215,141,46)" fg:x="279355" fg:w="534"/><text x="90.2194%" y="111.50"></text></g><g><title>tiny_free_no_lock (296 samples, 0.10%)</title><rect x="90.0461%" y="85" width="0.0953%" height="15" fill="rgb(250,160,47)" fg:x="279593" fg:w="296"/><text x="90.2961%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (1,235 samples, 0.40%)</title><rect x="89.7671%" y="117" width="0.3977%" height="15" fill="rgb(216,222,40)" fg:x="278727" fg:w="1235"/><text x="90.0171%" y="127.50"></text></g><g><title>tiny_free_no_lock (71 samples, 0.02%)</title><rect x="90.1420%" y="101" width="0.0229%" height="15" fill="rgb(234,217,39)" fg:x="279891" fg:w="71"/><text x="90.3920%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::extend_from_iter (265 samples, 0.09%)</title><rect x="90.1720%" y="117" width="0.0853%" height="15" fill="rgb(207,178,40)" fg:x="279984" fg:w="265"/><text x="90.4220%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (61 samples, 0.02%)</title><rect x="90.2589%" y="117" width="0.0196%" height="15" fill="rgb(221,136,13)" fg:x="280254" fg:w="61"/><text x="90.5089%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::truncate (76 samples, 0.02%)</title><rect x="90.2786%" y="117" width="0.0245%" height="15" fill="rgb(249,199,10)" fg:x="280315" fg:w="76"/><text x="90.5286%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (880 samples, 0.28%)</title><rect x="90.3079%" y="117" width="0.2834%" height="15" fill="rgb(249,222,13)" fg:x="280406" fg:w="880"/><text x="90.5579%" y="127.50"></text></g><g><title>_platform_memmove (846 samples, 0.27%)</title><rect x="90.3188%" y="101" width="0.2725%" height="15" fill="rgb(244,185,38)" fg:x="280440" fg:w="846"/><text x="90.5688%" y="111.50"></text></g><g><title>core::ptr::write (1,611 samples, 0.52%)</title><rect x="90.6042%" y="117" width="0.5188%" height="15" fill="rgb(236,202,9)" fg:x="281326" fg:w="1611"/><text x="90.8542%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (36 samples, 0.01%)</title><rect x="91.1449%" y="117" width="0.0116%" height="15" fill="rgb(250,229,37)" fg:x="283005" fg:w="36"/><text x="91.3949%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::new (40 samples, 0.01%)</title><rect x="91.1565%" y="117" width="0.0129%" height="15" fill="rgb(206,174,23)" fg:x="283041" fg:w="40"/><text x="91.4065%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (506 samples, 0.16%)</title><rect x="91.2296%" y="101" width="0.1630%" height="15" fill="rgb(211,33,43)" fg:x="283268" fg:w="506"/><text x="91.4796%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (282 samples, 0.09%)</title><rect x="91.3018%" y="85" width="0.0908%" height="15" fill="rgb(245,58,50)" fg:x="283492" fg:w="282"/><text x="91.5518%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (169 samples, 0.05%)</title><rect x="91.3926%" y="101" width="0.0544%" height="15" fill="rgb(244,68,36)" fg:x="283774" fg:w="169"/><text x="91.6426%" y="111.50"></text></g><g><title>&lt;natto::core::board::BoardSideIter as core::iter::traits::iterator::Iterator&gt;::nth (60 samples, 0.02%)</title><rect x="91.4683%" y="85" width="0.0193%" height="15" fill="rgb(232,229,15)" fg:x="284009" fg:w="60"/><text x="91.7183%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (106 samples, 0.03%)</title><rect x="91.4882%" y="85" width="0.0341%" height="15" fill="rgb(254,30,23)" fg:x="284071" fg:w="106"/><text x="91.7382%" y="95.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (40 samples, 0.01%)</title><rect x="91.5320%" y="85" width="0.0129%" height="15" fill="rgb(235,160,14)" fg:x="284207" fg:w="40"/><text x="91.7820%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (364 samples, 0.12%)</title><rect x="91.4470%" y="101" width="0.1172%" height="15" fill="rgb(212,155,44)" fg:x="283943" fg:w="364"/><text x="91.6970%" y="111.50"></text></g><g><title>natto::core::position::Position::can_castle (57 samples, 0.02%)</title><rect x="91.5459%" y="85" width="0.0184%" height="15" fill="rgb(226,2,50)" fg:x="284250" fg:w="57"/><text x="91.7959%" y="95.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 0.03%)</title><rect x="91.5643%" y="101" width="0.0329%" height="15" fill="rgb(234,177,6)" fg:x="284307" fg:w="102"/><text x="91.8143%" y="111.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (286 samples, 0.09%)</title><rect x="91.5971%" y="101" width="0.0921%" height="15" fill="rgb(217,24,9)" fg:x="284409" fg:w="286"/><text x="91.8471%" y="111.50"></text></g><g><title>&lt;natto::util::bitboard_iterator::BitboardIterator as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.01%)</title><rect x="91.6892%" y="101" width="0.0103%" height="15" fill="rgb(220,13,46)" fg:x="284695" fg:w="32"/><text x="91.9392%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (148 samples, 0.05%)</title><rect x="91.6995%" y="101" width="0.0477%" height="15" fill="rgb(239,221,27)" fg:x="284727" fg:w="148"/><text x="91.9495%" y="111.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (141 samples, 0.05%)</title><rect x="91.7543%" y="101" width="0.0454%" height="15" fill="rgb(222,198,25)" fg:x="284897" fg:w="141"/><text x="92.0043%" y="111.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (83 samples, 0.03%)</title><rect x="91.7997%" y="101" width="0.0267%" height="15" fill="rgb(211,99,13)" fg:x="285038" fg:w="83"/><text x="92.0497%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (364 samples, 0.12%)</title><rect x="91.8271%" y="101" width="0.1172%" height="15" fill="rgb(232,111,31)" fg:x="285123" fg:w="364"/><text x="92.0771%" y="111.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (83 samples, 0.03%)</title><rect x="91.9443%" y="101" width="0.0267%" height="15" fill="rgb(245,82,37)" fg:x="285487" fg:w="83"/><text x="92.1943%" y="111.50"></text></g><g><title>core::ptr::read (307 samples, 0.10%)</title><rect x="91.9823%" y="101" width="0.0989%" height="15" fill="rgb(227,149,46)" fg:x="285605" fg:w="307"/><text x="92.2323%" y="111.50"></text></g><g><title>core::ptr::write (99 samples, 0.03%)</title><rect x="92.0812%" y="101" width="0.0319%" height="15" fill="rgb(218,36,50)" fg:x="285912" fg:w="99"/><text x="92.3312%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (126 samples, 0.04%)</title><rect x="92.1130%" y="101" width="0.0406%" height="15" fill="rgb(226,80,48)" fg:x="286011" fg:w="126"/><text x="92.3630%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (287 samples, 0.09%)</title><rect x="92.1536%" y="85" width="0.0924%" height="15" fill="rgb(238,224,15)" fg:x="286137" fg:w="287"/><text x="92.4036%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (50 samples, 0.02%)</title><rect x="92.2461%" y="85" width="0.0161%" height="15" fill="rgb(241,136,10)" fg:x="286424" fg:w="50"/><text x="92.4961%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (347 samples, 0.11%)</title><rect x="92.2622%" y="85" width="0.1118%" height="15" fill="rgb(208,32,45)" fg:x="286474" fg:w="347"/><text x="92.5122%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,163 samples, 0.37%)</title><rect x="92.3739%" y="85" width="0.3746%" height="15" fill="rgb(207,135,9)" fg:x="286821" fg:w="1163"/><text x="92.6239%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,147 samples, 0.37%)</title><rect x="92.3791%" y="69" width="0.3694%" height="15" fill="rgb(206,86,44)" fg:x="286837" fg:w="1147"/><text x="92.6291%" y="79.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (74 samples, 0.02%)</title><rect x="92.7485%" y="85" width="0.0238%" height="15" fill="rgb(245,177,15)" fg:x="287984" fg:w="74"/><text x="92.9985%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (809 samples, 0.26%)</title><rect x="92.7723%" y="85" width="0.2605%" height="15" fill="rgb(206,64,50)" fg:x="288058" fg:w="809"/><text x="93.0223%" y="95.50"></text></g><g><title>core::hash::Hasher::write_u8 (34 samples, 0.01%)</title><rect x="93.0329%" y="85" width="0.0110%" height="15" fill="rgb(234,36,40)" fg:x="288867" fg:w="34"/><text x="93.2829%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (71 samples, 0.02%)</title><rect x="93.0448%" y="85" width="0.0229%" height="15" fill="rgb(213,64,8)" fg:x="288904" fg:w="71"/><text x="93.2948%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (68 samples, 0.02%)</title><rect x="93.0676%" y="85" width="0.0219%" height="15" fill="rgb(210,75,36)" fg:x="288975" fg:w="68"/><text x="93.3176%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (3,412 samples, 1.10%)</title><rect x="92.1536%" y="101" width="1.0989%" height="15" fill="rgb(229,88,21)" fg:x="286137" fg:w="3412"/><text x="92.4036%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (506 samples, 0.16%)</title><rect x="93.0895%" y="85" width="0.1630%" height="15" fill="rgb(252,204,47)" fg:x="289043" fg:w="506"/><text x="93.3395%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (60 samples, 0.02%)</title><rect x="93.2853%" y="101" width="0.0193%" height="15" fill="rgb(208,77,27)" fg:x="289651" fg:w="60"/><text x="93.5353%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (730 samples, 0.24%)</title><rect x="93.3955%" y="85" width="0.2351%" height="15" fill="rgb(221,76,26)" fg:x="289993" fg:w="730"/><text x="93.6455%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (361 samples, 0.12%)</title><rect x="93.5143%" y="69" width="0.1163%" height="15" fill="rgb(225,139,18)" fg:x="290362" fg:w="361"/><text x="93.7643%" y="79.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (80 samples, 0.03%)</title><rect x="93.6306%" y="85" width="0.0258%" height="15" fill="rgb(230,137,11)" fg:x="290723" fg:w="80"/><text x="93.8806%" y="95.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (344 samples, 0.11%)</title><rect x="93.6564%" y="85" width="0.1108%" height="15" fill="rgb(212,28,1)" fg:x="290803" fg:w="344"/><text x="93.9064%" y="95.50"></text></g><g><title>&lt;natto::util::bitboard_iterator::BitboardIterator as core::iter::traits::iterator::Iterator&gt;::next (115 samples, 0.04%)</title><rect x="93.7671%" y="85" width="0.0370%" height="15" fill="rgb(248,164,17)" fg:x="291147" fg:w="115"/><text x="94.0171%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (518 samples, 0.17%)</title><rect x="93.8042%" y="85" width="0.1668%" height="15" fill="rgb(222,171,42)" fg:x="291262" fg:w="518"/><text x="94.0542%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.01%)</title><rect x="93.9710%" y="85" width="0.0103%" height="15" fill="rgb(243,84,45)" fg:x="291780" fg:w="32"/><text x="94.2210%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (33 samples, 0.01%)</title><rect x="93.9813%" y="85" width="0.0106%" height="15" fill="rgb(252,49,23)" fg:x="291812" fg:w="33"/><text x="94.2313%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (453 samples, 0.15%)</title><rect x="93.9952%" y="85" width="0.1459%" height="15" fill="rgb(215,19,7)" fg:x="291855" fg:w="453"/><text x="94.2452%" y="95.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (40 samples, 0.01%)</title><rect x="94.1411%" y="85" width="0.0129%" height="15" fill="rgb(238,81,41)" fg:x="292308" fg:w="40"/><text x="94.3911%" y="95.50"></text></g><g><title>core::ptr::write (266 samples, 0.09%)</title><rect x="94.1539%" y="85" width="0.0857%" height="15" fill="rgb(210,199,37)" fg:x="292348" fg:w="266"/><text x="94.4039%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (340 samples, 0.11%)</title><rect x="94.2583%" y="69" width="0.1095%" height="15" fill="rgb(244,192,49)" fg:x="292672" fg:w="340"/><text x="94.5083%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (332 samples, 0.11%)</title><rect x="94.2609%" y="53" width="0.1069%" height="15" fill="rgb(226,211,11)" fg:x="292680" fg:w="332"/><text x="94.5109%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (165 samples, 0.05%)</title><rect x="94.3752%" y="69" width="0.0531%" height="15" fill="rgb(236,162,54)" fg:x="293035" fg:w="165"/><text x="94.6252%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (48 samples, 0.02%)</title><rect x="94.4367%" y="69" width="0.0155%" height="15" fill="rgb(220,229,9)" fg:x="293226" fg:w="48"/><text x="94.6867%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (729 samples, 0.23%)</title><rect x="94.2412%" y="85" width="0.2348%" height="15" fill="rgb(250,87,22)" fg:x="292619" fg:w="729"/><text x="94.4912%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (74 samples, 0.02%)</title><rect x="94.4522%" y="69" width="0.0238%" height="15" fill="rgb(239,43,17)" fg:x="293274" fg:w="74"/><text x="94.7022%" y="79.50"></text></g><g><title>natto::core::move::BaseMove::new (546 samples, 0.18%)</title><rect x="94.4837%" y="85" width="0.1758%" height="15" fill="rgb(231,177,25)" fg:x="293372" fg:w="546"/><text x="94.7337%" y="95.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (819 samples, 0.26%)</title><rect x="94.6618%" y="85" width="0.2638%" height="15" fill="rgb(219,179,1)" fg:x="293925" fg:w="819"/><text x="94.9118%" y="95.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (57 samples, 0.02%)</title><rect x="94.9256%" y="85" width="0.0184%" height="15" fill="rgb(238,219,53)" fg:x="294744" fg:w="57"/><text x="95.1756%" y="95.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (2,771 samples, 0.89%)</title><rect x="95.0174%" y="69" width="0.8924%" height="15" fill="rgb(232,167,36)" fg:x="295029" fg:w="2771"/><text x="95.2674%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (37 samples, 0.01%)</title><rect x="95.9114%" y="69" width="0.0119%" height="15" fill="rgb(244,19,51)" fg:x="297805" fg:w="37"/><text x="96.1614%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (188 samples, 0.06%)</title><rect x="95.9275%" y="69" width="0.0605%" height="15" fill="rgb(224,6,22)" fg:x="297855" fg:w="188"/><text x="96.1775%" y="79.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (125 samples, 0.04%)</title><rect x="95.9881%" y="69" width="0.0403%" height="15" fill="rgb(224,145,5)" fg:x="298043" fg:w="125"/><text x="96.2381%" y="79.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (87 samples, 0.03%)</title><rect x="96.0283%" y="69" width="0.0280%" height="15" fill="rgb(234,130,49)" fg:x="298168" fg:w="87"/><text x="96.2783%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (211 samples, 0.07%)</title><rect x="96.0564%" y="69" width="0.0680%" height="15" fill="rgb(254,6,2)" fg:x="298255" fg:w="211"/><text x="96.3064%" y="79.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (34 samples, 0.01%)</title><rect x="96.1243%" y="69" width="0.0110%" height="15" fill="rgb(208,96,46)" fg:x="298466" fg:w="34"/><text x="96.3743%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.01%)</title><rect x="96.1353%" y="69" width="0.0113%" height="15" fill="rgb(239,3,39)" fg:x="298500" fg:w="35"/><text x="96.3853%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (58 samples, 0.02%)</title><rect x="96.1485%" y="53" width="0.0187%" height="15" fill="rgb(233,210,1)" fg:x="298541" fg:w="58"/><text x="96.3985%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (54 samples, 0.02%)</title><rect x="96.1671%" y="53" width="0.0174%" height="15" fill="rgb(244,137,37)" fg:x="298599" fg:w="54"/><text x="96.4171%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (129 samples, 0.04%)</title><rect x="96.1845%" y="53" width="0.0415%" height="15" fill="rgb(240,136,2)" fg:x="298653" fg:w="129"/><text x="96.4345%" y="63.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (703 samples, 0.23%)</title><rect x="96.2261%" y="53" width="0.2264%" height="15" fill="rgb(239,18,37)" fg:x="298782" fg:w="703"/><text x="96.4761%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (698 samples, 0.22%)</title><rect x="96.2277%" y="37" width="0.2248%" height="15" fill="rgb(218,185,22)" fg:x="298787" fg:w="698"/><text x="96.4777%" y="47.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (63 samples, 0.02%)</title><rect x="96.4525%" y="53" width="0.0203%" height="15" fill="rgb(225,218,4)" fg:x="299485" fg:w="63"/><text x="96.7025%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (691 samples, 0.22%)</title><rect x="96.4728%" y="53" width="0.2225%" height="15" fill="rgb(230,182,32)" fg:x="299548" fg:w="691"/><text x="96.7228%" y="63.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (72 samples, 0.02%)</title><rect x="96.6982%" y="53" width="0.0232%" height="15" fill="rgb(242,56,43)" fg:x="300248" fg:w="72"/><text x="96.9482%" y="63.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (49 samples, 0.02%)</title><rect x="96.7214%" y="53" width="0.0158%" height="15" fill="rgb(233,99,24)" fg:x="300320" fg:w="49"/><text x="96.9714%" y="63.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (140 samples, 0.05%)</title><rect x="96.7372%" y="53" width="0.0451%" height="15" fill="rgb(234,209,42)" fg:x="300369" fg:w="140"/><text x="96.9872%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (2,124 samples, 0.68%)</title><rect x="96.1485%" y="69" width="0.6841%" height="15" fill="rgb(227,7,12)" fg:x="298541" fg:w="2124"/><text x="96.3985%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (156 samples, 0.05%)</title><rect x="96.7823%" y="53" width="0.0502%" height="15" fill="rgb(245,203,43)" fg:x="300509" fg:w="156"/><text x="97.0323%" y="63.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (190 samples, 0.06%)</title><rect x="96.8493%" y="69" width="0.0612%" height="15" fill="rgb(238,205,33)" fg:x="300717" fg:w="190"/><text x="97.0993%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (6,228 samples, 2.01%)</title><rect x="94.9440%" y="85" width="2.0058%" height="15" fill="rgb(231,56,7)" fg:x="294801" fg:w="6228"/><text x="95.1940%" y="95.50">n..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (122 samples, 0.04%)</title><rect x="96.9105%" y="69" width="0.0393%" height="15" fill="rgb(244,186,29)" fg:x="300907" fg:w="122"/><text x="97.1605%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (220 samples, 0.07%)</title><rect x="96.9498%" y="85" width="0.0709%" height="15" fill="rgb(234,111,31)" fg:x="301029" fg:w="220"/><text x="97.1998%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate_moves_for_piece_type (11,574 samples, 3.73%)</title><rect x="93.3047%" y="101" width="3.7275%" height="15" fill="rgb(241,149,10)" fg:x="289711" fg:w="11574"/><text x="93.5547%" y="111.50">natt..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (36 samples, 0.01%)</title><rect x="97.0206%" y="85" width="0.0116%" height="15" fill="rgb(249,206,44)" fg:x="301249" fg:w="36"/><text x="97.2706%" y="95.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (40 samples, 0.01%)</title><rect x="97.0322%" y="85" width="0.0129%" height="15" fill="rgb(251,153,30)" fg:x="301285" fg:w="40"/><text x="97.2822%" y="95.50"></text></g><g><title>&lt;natto::util::bitboard_iterator::BitboardIterator as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.01%)</title><rect x="97.0538%" y="85" width="0.0116%" height="15" fill="rgb(239,152,38)" fg:x="301352" fg:w="36"/><text x="97.3038%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (75 samples, 0.02%)</title><rect x="97.0763%" y="85" width="0.0242%" height="15" fill="rgb(249,139,47)" fg:x="301422" fg:w="75"/><text x="97.3263%" y="95.50"></text></g><g><title>core::ptr::write (48 samples, 0.02%)</title><rect x="97.1005%" y="85" width="0.0155%" height="15" fill="rgb(244,64,35)" fg:x="301497" fg:w="48"/><text x="97.3505%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (249 samples, 0.08%)</title><rect x="97.1262%" y="69" width="0.0802%" height="15" fill="rgb(216,46,15)" fg:x="301577" fg:w="249"/><text x="97.3762%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (249 samples, 0.08%)</title><rect x="97.1262%" y="53" width="0.0802%" height="15" fill="rgb(250,74,19)" fg:x="301577" fg:w="249"/><text x="97.3762%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (82 samples, 0.03%)</title><rect x="97.2148%" y="69" width="0.0264%" height="15" fill="rgb(249,42,33)" fg:x="301852" fg:w="82"/><text x="97.4648%" y="79.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (218 samples, 0.07%)</title><rect x="97.2438%" y="69" width="0.0702%" height="15" fill="rgb(242,149,17)" fg:x="301942" fg:w="218"/><text x="97.4938%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (658 samples, 0.21%)</title><rect x="97.1159%" y="85" width="0.2119%" height="15" fill="rgb(244,29,21)" fg:x="301545" fg:w="658"/><text x="97.3659%" y="95.50"></text></g><g><title>natto::core::move::BaseMove::new (232 samples, 0.07%)</title><rect x="97.3327%" y="85" width="0.0747%" height="15" fill="rgb(220,130,37)" fg:x="302218" fg:w="232"/><text x="97.5827%" y="95.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (190 samples, 0.06%)</title><rect x="97.4074%" y="85" width="0.0612%" height="15" fill="rgb(211,67,2)" fg:x="302450" fg:w="190"/><text x="97.6574%" y="95.50"></text></g><g><title>natto::core::move_gen::generate_king_moves (1,431 samples, 0.46%)</title><rect x="97.0322%" y="101" width="0.4609%" height="15" fill="rgb(235,68,52)" fg:x="301285" fg:w="1431"/><text x="97.2822%" y="111.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (52 samples, 0.02%)</title><rect x="97.4763%" y="85" width="0.0167%" height="15" fill="rgb(246,142,3)" fg:x="302664" fg:w="52"/><text x="97.7263%" y="95.50"></text></g><g><title>natto::core::move_gen::generate_pawn_moves (863 samples, 0.28%)</title><rect x="97.4931%" y="101" width="0.2779%" height="15" fill="rgb(241,25,7)" fg:x="302716" fg:w="863"/><text x="97.7431%" y="111.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (79 samples, 0.03%)</title><rect x="97.7800%" y="101" width="0.0254%" height="15" fill="rgb(242,119,39)" fg:x="303607" fg:w="79"/><text x="98.0300%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (142 samples, 0.05%)</title><rect x="97.8055%" y="101" width="0.0457%" height="15" fill="rgb(241,98,45)" fg:x="303686" fg:w="142"/><text x="98.0555%" y="111.50"></text></g><g><title>natto::core::position::Position::side_to_move (119 samples, 0.04%)</title><rect x="97.8512%" y="101" width="0.0383%" height="15" fill="rgb(254,28,30)" fg:x="303828" fg:w="119"/><text x="98.1012%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves (20,938 samples, 6.74%)</title><rect x="91.1694%" y="117" width="6.7433%" height="15" fill="rgb(241,142,54)" fg:x="283081" fg:w="20938"/><text x="91.4194%" y="127.50">natto::co..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (72 samples, 0.02%)</title><rect x="97.8895%" y="101" width="0.0232%" height="15" fill="rgb(222,85,15)" fg:x="303947" fg:w="72"/><text x="98.1395%" y="111.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (58,885 samples, 18.96%)</title><rect x="78.9562%" y="133" width="18.9646%" height="15" fill="rgb(210,85,47)" fg:x="245159" fg:w="58885"/><text x="79.2062%" y="143.50">natto::eval::node_counter::do_..</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (302,038 samples, 97.27%)</title><rect x="0.6763%" y="149" width="97.2747%" height="15" fill="rgb(224,206,25)" fg:x="2100" fg:w="302038"/><text x="0.9263%" y="159.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (94 samples, 0.03%)</title><rect x="97.9208%" y="133" width="0.0303%" height="15" fill="rgb(243,201,19)" fg:x="304044" fg:w="94"/><text x="98.1708%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (887 samples, 0.29%)</title><rect x="97.9588%" y="117" width="0.2857%" height="15" fill="rgb(236,59,4)" fg:x="304162" fg:w="887"/><text x="98.2088%" y="127.50"></text></g><g><title>_platform_memmove (865 samples, 0.28%)</title><rect x="97.9659%" y="101" width="0.2786%" height="15" fill="rgb(254,179,45)" fg:x="304184" fg:w="865"/><text x="98.2159%" y="111.50"></text></g><g><title>szone_malloc_should_clear (102 samples, 0.03%)</title><rect x="98.2596%" y="101" width="0.0329%" height="15" fill="rgb(226,14,10)" fg:x="305096" fg:w="102"/><text x="98.5096%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (65 samples, 0.02%)</title><rect x="98.2715%" y="85" width="0.0209%" height="15" fill="rgb(244,27,41)" fg:x="305133" fg:w="65"/><text x="98.5215%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (45 samples, 0.01%)</title><rect x="98.2779%" y="69" width="0.0145%" height="15" fill="rgb(235,35,32)" fg:x="305153" fg:w="45"/><text x="98.5279%" y="79.50"></text></g><g><title>alloc::alloc::alloc (137 samples, 0.04%)</title><rect x="98.2486%" y="117" width="0.0441%" height="15" fill="rgb(218,68,31)" fg:x="305062" fg:w="137"/><text x="98.4986%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (101 samples, 0.03%)</title><rect x="98.2928%" y="117" width="0.0325%" height="15" fill="rgb(207,120,37)" fg:x="305199" fg:w="101"/><text x="98.5428%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (97 samples, 0.03%)</title><rect x="98.3288%" y="117" width="0.0312%" height="15" fill="rgb(227,98,0)" fg:x="305311" fg:w="97"/><text x="98.5788%" y="127.50"></text></g><g><title>core::ptr::read (47 samples, 0.02%)</title><rect x="98.3630%" y="117" width="0.0151%" height="15" fill="rgb(207,7,3)" fg:x="305417" fg:w="47"/><text x="98.6130%" y="127.50"></text></g><g><title>core::ptr::write (127 samples, 0.04%)</title><rect x="98.3781%" y="117" width="0.0409%" height="15" fill="rgb(206,98,19)" fg:x="305464" fg:w="127"/><text x="98.6281%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,436 samples, 0.46%)</title><rect x="97.9575%" y="133" width="0.4625%" height="15" fill="rgb(217,5,26)" fg:x="304158" fg:w="1436"/><text x="98.2075%" y="143.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (846 samples, 0.27%)</title><rect x="98.4213%" y="133" width="0.2725%" height="15" fill="rgb(235,190,38)" fg:x="305598" fg:w="846"/><text x="98.6713%" y="143.50"></text></g><g><title>_platform_memmove (838 samples, 0.27%)</title><rect x="98.4238%" y="117" width="0.2699%" height="15" fill="rgb(247,86,24)" fg:x="305606" fg:w="838"/><text x="98.6738%" y="127.50"></text></g><g><title>&lt;natto::core::move::Move as core::clone::Clone&gt;::clone (110 samples, 0.04%)</title><rect x="98.6995%" y="133" width="0.0354%" height="15" fill="rgb(205,101,16)" fg:x="306462" fg:w="110"/><text x="98.9495%" y="143.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (765 samples, 0.25%)</title><rect x="98.7349%" y="133" width="0.2464%" height="15" fill="rgb(246,168,33)" fg:x="306572" fg:w="765"/><text x="98.9849%" y="143.50"></text></g><g><title>_platform_memmove (764 samples, 0.25%)</title><rect x="98.7353%" y="117" width="0.2461%" height="15" fill="rgb(231,114,1)" fg:x="306573" fg:w="764"/><text x="98.9853%" y="127.50"></text></g><g><title>small_malloc_should_clear (56 samples, 0.02%)</title><rect x="98.9948%" y="101" width="0.0180%" height="15" fill="rgb(207,184,53)" fg:x="307379" fg:w="56"/><text x="99.2448%" y="111.50"></text></g><g><title>small_malloc_from_free_list (43 samples, 0.01%)</title><rect x="98.9990%" y="85" width="0.0138%" height="15" fill="rgb(224,95,51)" fg:x="307392" fg:w="43"/><text x="99.2490%" y="95.50"></text></g><g><title>alloc::alloc::alloc (157 samples, 0.05%)</title><rect x="98.9855%" y="133" width="0.0506%" height="15" fill="rgb(212,188,45)" fg:x="307350" fg:w="157"/><text x="99.2355%" y="143.50"></text></g><g><title>szone_malloc_should_clear (141 samples, 0.05%)</title><rect x="98.9907%" y="117" width="0.0454%" height="15" fill="rgb(223,154,38)" fg:x="307366" fg:w="141"/><text x="99.2407%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (67 samples, 0.02%)</title><rect x="99.0145%" y="101" width="0.0216%" height="15" fill="rgb(251,22,52)" fg:x="307440" fg:w="67"/><text x="99.2645%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (58 samples, 0.02%)</title><rect x="99.0174%" y="85" width="0.0187%" height="15" fill="rgb(229,209,22)" fg:x="307449" fg:w="58"/><text x="99.2674%" y="95.50"></text></g><g><title>free_tiny (90 samples, 0.03%)</title><rect x="99.0525%" y="117" width="0.0290%" height="15" fill="rgb(234,138,34)" fg:x="307558" fg:w="90"/><text x="99.3025%" y="127.50"></text></g><g><title>tiny_free_no_lock (44 samples, 0.01%)</title><rect x="99.0673%" y="101" width="0.0142%" height="15" fill="rgb(212,95,11)" fg:x="307604" fg:w="44"/><text x="99.3173%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (155 samples, 0.05%)</title><rect x="99.0361%" y="133" width="0.0499%" height="15" fill="rgb(240,179,47)" fg:x="307507" fg:w="155"/><text x="99.2861%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 0.02%)</title><rect x="99.1014%" y="133" width="0.0229%" height="15" fill="rgb(240,163,11)" fg:x="307710" fg:w="71"/><text x="99.3514%" y="143.50"></text></g><g><title>_platform_memmove (68 samples, 0.02%)</title><rect x="99.1024%" y="117" width="0.0219%" height="15" fill="rgb(236,37,12)" fg:x="307713" fg:w="68"/><text x="99.3524%" y="127.50"></text></g><g><title>core::ptr::write (136 samples, 0.04%)</title><rect x="99.1253%" y="133" width="0.0438%" height="15" fill="rgb(232,164,16)" fg:x="307784" fg:w="136"/><text x="99.3753%" y="143.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (43 samples, 0.01%)</title><rect x="99.1810%" y="117" width="0.0138%" height="15" fill="rgb(244,205,15)" fg:x="307957" fg:w="43"/><text x="99.4310%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (48 samples, 0.02%)</title><rect x="99.1948%" y="117" width="0.0155%" height="15" fill="rgb(223,117,47)" fg:x="308000" fg:w="48"/><text x="99.4448%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (45 samples, 0.01%)</title><rect x="99.2151%" y="117" width="0.0145%" height="15" fill="rgb(244,107,35)" fg:x="308063" fg:w="45"/><text x="99.4651%" y="127.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (35 samples, 0.01%)</title><rect x="99.2322%" y="117" width="0.0113%" height="15" fill="rgb(205,140,8)" fg:x="308116" fg:w="35"/><text x="99.4822%" y="127.50"></text></g><g><title>core::ptr::read (32 samples, 0.01%)</title><rect x="99.2831%" y="117" width="0.0103%" height="15" fill="rgb(228,84,46)" fg:x="308274" fg:w="32"/><text x="99.5331%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (47 samples, 0.02%)</title><rect x="99.2979%" y="101" width="0.0151%" height="15" fill="rgb(254,188,9)" fg:x="308320" fg:w="47"/><text x="99.5479%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (128 samples, 0.04%)</title><rect x="99.3221%" y="101" width="0.0412%" height="15" fill="rgb(206,112,54)" fg:x="308395" fg:w="128"/><text x="99.5721%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (128 samples, 0.04%)</title><rect x="99.3221%" y="85" width="0.0412%" height="15" fill="rgb(216,84,49)" fg:x="308395" fg:w="128"/><text x="99.5721%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (69 samples, 0.02%)</title><rect x="99.3655%" y="101" width="0.0222%" height="15" fill="rgb(214,194,35)" fg:x="308530" fg:w="69"/><text x="99.6155%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (353 samples, 0.11%)</title><rect x="99.2979%" y="117" width="0.1137%" height="15" fill="rgb(249,28,3)" fg:x="308320" fg:w="353"/><text x="99.5479%" y="127.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (52 samples, 0.02%)</title><rect x="99.3948%" y="101" width="0.0167%" height="15" fill="rgb(222,56,52)" fg:x="308621" fg:w="52"/><text x="99.6448%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (61 samples, 0.02%)</title><rect x="99.4300%" y="101" width="0.0196%" height="15" fill="rgb(245,217,50)" fg:x="308730" fg:w="61"/><text x="99.6800%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (40 samples, 0.01%)</title><rect x="99.4663%" y="101" width="0.0129%" height="15" fill="rgb(213,201,24)" fg:x="308843" fg:w="40"/><text x="99.7163%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (51 samples, 0.02%)</title><rect x="99.4815%" y="101" width="0.0164%" height="15" fill="rgb(248,116,28)" fg:x="308890" fg:w="51"/><text x="99.7315%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (34 samples, 0.01%)</title><rect x="99.5085%" y="85" width="0.0110%" height="15" fill="rgb(219,72,43)" fg:x="308974" fg:w="34"/><text x="99.7585%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34 samples, 0.01%)</title><rect x="99.5085%" y="69" width="0.0110%" height="15" fill="rgb(209,138,14)" fg:x="308974" fg:w="34"/><text x="99.7585%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (88 samples, 0.03%)</title><rect x="99.5056%" y="101" width="0.0283%" height="15" fill="rgb(222,18,33)" fg:x="308965" fg:w="88"/><text x="99.7556%" y="111.50"></text></g><g><title>natto::core::move::BaseMove::new (43 samples, 0.01%)</title><rect x="99.5356%" y="101" width="0.0138%" height="15" fill="rgb(213,199,7)" fg:x="309058" fg:w="43"/><text x="99.7856%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (60 samples, 0.02%)</title><rect x="99.5498%" y="101" width="0.0193%" height="15" fill="rgb(250,110,10)" fg:x="309102" fg:w="60"/><text x="99.7998%" y="111.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (301 samples, 0.10%)</title><rect x="99.5820%" y="85" width="0.0969%" height="15" fill="rgb(248,123,6)" fg:x="309202" fg:w="301"/><text x="99.8320%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (62 samples, 0.02%)</title><rect x="99.7089%" y="69" width="0.0200%" height="15" fill="rgb(206,91,31)" fg:x="309596" fg:w="62"/><text x="99.9589%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (61 samples, 0.02%)</title><rect x="99.7092%" y="53" width="0.0196%" height="15" fill="rgb(211,154,13)" fg:x="309597" fg:w="61"/><text x="99.9592%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (69 samples, 0.02%)</title><rect x="99.7320%" y="69" width="0.0222%" height="15" fill="rgb(225,148,7)" fg:x="309668" fg:w="69"/><text x="99.9820%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (197 samples, 0.06%)</title><rect x="99.7021%" y="85" width="0.0634%" height="15" fill="rgb(220,160,43)" fg:x="309575" fg:w="197"/><text x="99.9521%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (642 samples, 0.21%)</title><rect x="99.5704%" y="101" width="0.2068%" height="15" fill="rgb(213,52,39)" fg:x="309166" fg:w="642"/><text x="99.8204%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate_moves_for_piece_type (1,138 samples, 0.37%)</title><rect x="99.4213%" y="117" width="0.3665%" height="15" fill="rgb(243,137,7)" fg:x="308703" fg:w="1138"/><text x="99.6713%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (59 samples, 0.02%)</title><rect x="99.7926%" y="101" width="0.0190%" height="15" fill="rgb(230,79,13)" fg:x="309856" fg:w="59"/><text x="100.0426%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_king_moves (111 samples, 0.04%)</title><rect x="99.7878%" y="117" width="0.0357%" height="15" fill="rgb(247,105,23)" fg:x="309841" fg:w="111"/><text x="100.0378%" y="127.50"></text></g><g><title>natto::core::move_gen::generate_pawn_moves (89 samples, 0.03%)</title><rect x="99.8235%" y="117" width="0.0287%" height="15" fill="rgb(223,179,41)" fg:x="309952" fg:w="89"/><text x="100.0735%" y="127.50"></text></g><g><title>natto::core::move_gen::generate_moves (2,151 samples, 0.69%)</title><rect x="99.1765%" y="133" width="0.6928%" height="15" fill="rgb(218,9,34)" fg:x="307943" fg:w="2151"/><text x="99.4265%" y="143.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (5,957 samples, 1.92%)</title><rect x="97.9510%" y="149" width="1.9185%" height="15" fill="rgb(222,106,8)" fg:x="304138" fg:w="5957"/><text x="98.2010%" y="159.50">n..</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (309,962 samples, 99.83%)</title><rect x="0.0438%" y="165" width="99.8267%" height="15" fill="rgb(211,220,0)" fg:x="136" fg:w="309962"/><text x="0.2938%" y="175.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (45 samples, 0.01%)</title><rect x="99.8709%" y="133" width="0.0145%" height="15" fill="rgb(229,52,16)" fg:x="310099" fg:w="45"/><text x="100.1209%" y="143.50"></text></g><g><title>_platform_memmove (45 samples, 0.01%)</title><rect x="99.8709%" y="117" width="0.0145%" height="15" fill="rgb(212,155,18)" fg:x="310099" fg:w="45"/><text x="100.1209%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (85 samples, 0.03%)</title><rect x="99.8709%" y="149" width="0.0274%" height="15" fill="rgb(242,21,14)" fg:x="310099" fg:w="85"/><text x="100.1209%" y="159.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (33 samples, 0.01%)</title><rect x="99.8982%" y="149" width="0.0106%" height="15" fill="rgb(222,19,48)" fg:x="310184" fg:w="33"/><text x="100.1482%" y="159.50"></text></g><g><title>_platform_memmove (33 samples, 0.01%)</title><rect x="99.8982%" y="133" width="0.0106%" height="15" fill="rgb(232,45,27)" fg:x="310184" fg:w="33"/><text x="100.1482%" y="143.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (47 samples, 0.02%)</title><rect x="99.9108%" y="149" width="0.0151%" height="15" fill="rgb(249,103,42)" fg:x="310223" fg:w="47"/><text x="100.1608%" y="159.50"></text></g><g><title>_platform_memmove (47 samples, 0.02%)</title><rect x="99.9108%" y="133" width="0.0151%" height="15" fill="rgb(246,81,33)" fg:x="310223" fg:w="47"/><text x="100.1608%" y="143.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (43 samples, 0.01%)</title><rect x="99.9700%" y="117" width="0.0138%" height="15" fill="rgb(252,33,42)" fg:x="310407" fg:w="43"/><text x="100.2200%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate_moves_for_piece_type (79 samples, 0.03%)</title><rect x="99.9591%" y="133" width="0.0254%" height="15" fill="rgb(209,212,41)" fg:x="310373" fg:w="79"/><text x="100.2091%" y="143.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (310,460 samples, 99.99%)</title><rect x="0.0042%" y="181" width="99.9871%" height="15" fill="rgb(207,154,6)" fg:x="13" fg:w="310460"/><text x="0.2542%" y="191.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes (375 samples, 0.12%)</title><rect x="99.8705%" y="165" width="0.1208%" height="15" fill="rgb(223,64,47)" fg:x="310098" fg:w="375"/><text x="100.1205%" y="175.50"></text></g><g><title>natto::core::move_gen::generate_moves (141 samples, 0.05%)</title><rect x="99.9459%" y="149" width="0.0454%" height="15" fill="rgb(211,161,38)" fg:x="310332" fg:w="141"/><text x="100.1959%" y="159.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (310,490 samples, 100.00%)</title><rect x="0.0016%" y="197" width="99.9968%" height="15" fill="rgb(219,138,40)" fg:x="5" fg:w="310490"/><text x="0.2516%" y="207.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (310,492 samples, 100.00%)</title><rect x="0.0013%" y="229" width="99.9974%" height="15" fill="rgb(241,228,46)" fg:x="4" fg:w="310492"/><text x="0.2513%" y="239.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (310,491 samples, 100.00%)</title><rect x="0.0016%" y="213" width="99.9971%" height="15" fill="rgb(223,209,38)" fg:x="5" fg:w="310491"/><text x="0.2516%" y="223.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>all (310,500 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(236,164,45)" fg:x="0" fg:w="310500"/><text x="0.2500%" y="367.50"></text></g><g><title>start (310,499 samples, 100.00%)</title><rect x="0.0003%" y="341" width="99.9997%" height="15" fill="rgb(231,15,5)" fg:x="1" fg:w="310499"/><text x="0.2503%" y="351.50">start</text></g><g><title>main (310,497 samples, 100.00%)</title><rect x="0.0010%" y="325" width="99.9990%" height="15" fill="rgb(252,35,15)" fg:x="3" fg:w="310497"/><text x="0.2510%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (310,497 samples, 100.00%)</title><rect x="0.0010%" y="309" width="99.9990%" height="15" fill="rgb(248,181,18)" fg:x="3" fg:w="310497"/><text x="0.2510%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (310,497 samples, 100.00%)</title><rect x="0.0010%" y="293" width="99.9990%" height="15" fill="rgb(233,39,42)" fg:x="3" fg:w="310497"/><text x="0.2510%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (310,497 samples, 100.00%)</title><rect x="0.0010%" y="277" width="99.9990%" height="15" fill="rgb(238,110,33)" fg:x="3" fg:w="310497"/><text x="0.2510%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>natto::main (310,497 samples, 100.00%)</title><rect x="0.0010%" y="261" width="99.9990%" height="15" fill="rgb(233,195,10)" fg:x="3" fg:w="310497"/><text x="0.2510%" y="271.50">natto::main</text></g><g><title>natto::eval::node_counter::count_nodes (310,496 samples, 100.00%)</title><rect x="0.0013%" y="245" width="99.9987%" height="15" fill="rgb(254,105,3)" fg:x="4" fg:w="310496"/><text x="0.2513%" y="255.50">natto::eval::node_counter::count_nodes</text></g></svg></svg>