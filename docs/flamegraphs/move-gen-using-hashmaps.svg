<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="50018"><g><title>free_small (6 samples, 0.01%)</title><rect x="0.0280%" y="149" width="0.0120%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="6"/><text x="0.2780%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.02%)</title><rect x="0.0280%" y="165" width="0.0220%" height="15" fill="rgb(217,0,24)" fg:x="14" fg:w="11"/><text x="0.2780%" y="175.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (6 samples, 0.01%)</title><rect x="0.0820%" y="133" width="0.0120%" height="15" fill="rgb(221,193,54)" fg:x="41" fg:w="6"/><text x="0.3320%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="0.1040%" y="117" width="0.0160%" height="15" fill="rgb(248,212,6)" fg:x="52" fg:w="8"/><text x="0.3540%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="0.1040%" y="101" width="0.0160%" height="15" fill="rgb(208,68,35)" fg:x="52" fg:w="8"/><text x="0.3540%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (6 samples, 0.01%)</title><rect x="0.1200%" y="117" width="0.0120%" height="15" fill="rgb(232,128,0)" fg:x="60" fg:w="6"/><text x="0.3700%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.03%)</title><rect x="0.1020%" y="133" width="0.0320%" height="15" fill="rgb(207,160,47)" fg:x="51" fg:w="16"/><text x="0.3520%" y="143.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (36 samples, 0.07%)</title><rect x="0.0640%" y="165" width="0.0720%" height="15" fill="rgb(228,23,34)" fg:x="32" fg:w="36"/><text x="0.3140%" y="175.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (30 samples, 0.06%)</title><rect x="0.0760%" y="149" width="0.0600%" height="15" fill="rgb(218,30,26)" fg:x="38" fg:w="30"/><text x="0.3260%" y="159.50"></text></g><g><title>natto::core::position::Position::make_move (17 samples, 0.03%)</title><rect x="0.1399%" y="165" width="0.0340%" height="15" fill="rgb(220,122,19)" fg:x="70" fg:w="17"/><text x="0.3899%" y="175.50"></text></g><g><title>natto::core::position::Position::make_move (6 samples, 0.01%)</title><rect x="0.1779%" y="165" width="0.0120%" height="15" fill="rgb(250,228,42)" fg:x="89" fg:w="6"/><text x="0.4279%" y="175.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (6 samples, 0.01%)</title><rect x="0.2099%" y="133" width="0.0120%" height="15" fill="rgb(240,193,28)" fg:x="105" fg:w="6"/><text x="0.4599%" y="143.50"></text></g><g><title>natto::core::position::Position::get_board_hash (13 samples, 0.03%)</title><rect x="0.2059%" y="149" width="0.0260%" height="15" fill="rgb(216,20,37)" fg:x="103" fg:w="13"/><text x="0.4559%" y="159.50"></text></g><g><title>natto::core::position::Position::update_hash_code (22 samples, 0.04%)</title><rect x="0.1899%" y="165" width="0.0440%" height="15" fill="rgb(206,188,39)" fg:x="95" fg:w="22"/><text x="0.4399%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.03%)</title><rect x="0.2539%" y="149" width="0.0340%" height="15" fill="rgb(217,207,13)" fg:x="127" fg:w="17"/><text x="0.5039%" y="159.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (12 samples, 0.02%)</title><rect x="0.2919%" y="149" width="0.0240%" height="15" fill="rgb(231,73,38)" fg:x="146" fg:w="12"/><text x="0.5419%" y="159.50"></text></g><g><title>DYLD-STUB$$free (6 samples, 0.01%)</title><rect x="0.3279%" y="133" width="0.0120%" height="15" fill="rgb(225,20,46)" fg:x="164" fg:w="6"/><text x="0.5779%" y="143.50"></text></g><g><title>_free (6 samples, 0.01%)</title><rect x="0.3399%" y="133" width="0.0120%" height="15" fill="rgb(210,31,41)" fg:x="170" fg:w="6"/><text x="0.5899%" y="143.50"></text></g><g><title>_szone_free (7 samples, 0.01%)</title><rect x="0.3639%" y="133" width="0.0140%" height="15" fill="rgb(221,200,47)" fg:x="182" fg:w="7"/><text x="0.6139%" y="143.50"></text></g><g><title>free_small (24 samples, 0.05%)</title><rect x="0.3779%" y="133" width="0.0480%" height="15" fill="rgb(226,26,5)" fg:x="189" fg:w="24"/><text x="0.6279%" y="143.50"></text></g><g><title>_platform_memset (17 samples, 0.03%)</title><rect x="0.4498%" y="117" width="0.0340%" height="15" fill="rgb(249,33,26)" fg:x="225" fg:w="17"/><text x="0.6998%" y="127.50"></text></g><g><title>free_tiny (57 samples, 0.11%)</title><rect x="0.4258%" y="133" width="0.1140%" height="15" fill="rgb(235,183,28)" fg:x="213" fg:w="57"/><text x="0.6758%" y="143.50"></text></g><g><title>tiny_free_no_lock (26 samples, 0.05%)</title><rect x="0.4878%" y="117" width="0.0520%" height="15" fill="rgb(221,5,38)" fg:x="244" fg:w="26"/><text x="0.7378%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (110 samples, 0.22%)</title><rect x="0.3279%" y="149" width="0.2199%" height="15" fill="rgb(247,18,42)" fg:x="164" fg:w="110"/><text x="0.5779%" y="159.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (39 samples, 0.08%)</title><rect x="0.5498%" y="149" width="0.0780%" height="15" fill="rgb(241,131,45)" fg:x="275" fg:w="39"/><text x="0.7998%" y="159.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (7 samples, 0.01%)</title><rect x="0.6378%" y="149" width="0.0140%" height="15" fill="rgb(249,31,29)" fg:x="319" fg:w="7"/><text x="0.8878%" y="159.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (58 samples, 0.12%)</title><rect x="0.6518%" y="133" width="0.1160%" height="15" fill="rgb(225,111,53)" fg:x="326" fg:w="58"/><text x="0.9018%" y="143.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (11 samples, 0.02%)</title><rect x="0.7677%" y="133" width="0.0220%" height="15" fill="rgb(238,160,17)" fg:x="384" fg:w="11"/><text x="1.0177%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.03%)</title><rect x="0.8897%" y="117" width="0.0260%" height="15" fill="rgb(214,148,48)" fg:x="445" fg:w="13"/><text x="1.1397%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.03%)</title><rect x="0.8897%" y="101" width="0.0260%" height="15" fill="rgb(232,36,49)" fg:x="445" fg:w="13"/><text x="1.1397%" y="111.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (82 samples, 0.16%)</title><rect x="0.9237%" y="117" width="0.1639%" height="15" fill="rgb(209,103,24)" fg:x="462" fg:w="82"/><text x="1.1737%" y="127.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.02%)</title><rect x="1.0936%" y="117" width="0.0200%" height="15" fill="rgb(229,88,8)" fg:x="547" fg:w="10"/><text x="1.3436%" y="127.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (9 samples, 0.02%)</title><rect x="1.1136%" y="117" width="0.0180%" height="15" fill="rgb(213,181,19)" fg:x="557" fg:w="9"/><text x="1.3636%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.02%)</title><rect x="1.1316%" y="117" width="0.0180%" height="15" fill="rgb(254,191,54)" fg:x="566" fg:w="9"/><text x="1.3816%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.02%)</title><rect x="1.1696%" y="101" width="0.0180%" height="15" fill="rgb(241,83,37)" fg:x="585" fg:w="9"/><text x="1.4196%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16 samples, 0.03%)</title><rect x="1.1876%" y="101" width="0.0320%" height="15" fill="rgb(233,36,39)" fg:x="594" fg:w="16"/><text x="1.4376%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (71 samples, 0.14%)</title><rect x="1.2196%" y="101" width="0.1419%" height="15" fill="rgb(226,3,54)" fg:x="610" fg:w="71"/><text x="1.4696%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (71 samples, 0.14%)</title><rect x="1.2196%" y="85" width="0.1419%" height="15" fill="rgb(245,192,40)" fg:x="610" fg:w="71"/><text x="1.4696%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (78 samples, 0.16%)</title><rect x="1.3655%" y="101" width="0.1559%" height="15" fill="rgb(238,167,29)" fg:x="683" fg:w="78"/><text x="1.6155%" y="111.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (8 samples, 0.02%)</title><rect x="1.5235%" y="101" width="0.0160%" height="15" fill="rgb(232,182,51)" fg:x="762" fg:w="8"/><text x="1.7735%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (209 samples, 0.42%)</title><rect x="1.1596%" y="117" width="0.4178%" height="15" fill="rgb(231,60,39)" fg:x="580" fg:w="209"/><text x="1.4096%" y="127.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (16 samples, 0.03%)</title><rect x="1.5454%" y="101" width="0.0320%" height="15" fill="rgb(208,69,12)" fg:x="773" fg:w="16"/><text x="1.7954%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (6 samples, 0.01%)</title><rect x="1.5814%" y="117" width="0.0120%" height="15" fill="rgb(235,93,37)" fg:x="791" fg:w="6"/><text x="1.8314%" y="127.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (490 samples, 0.98%)</title><rect x="0.6518%" y="149" width="0.9796%" height="15" fill="rgb(213,116,39)" fg:x="326" fg:w="490"/><text x="0.9018%" y="159.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (421 samples, 0.84%)</title><rect x="0.7897%" y="133" width="0.8417%" height="15" fill="rgb(222,207,29)" fg:x="395" fg:w="421"/><text x="1.0397%" y="143.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (15 samples, 0.03%)</title><rect x="1.6014%" y="117" width="0.0300%" height="15" fill="rgb(206,96,30)" fg:x="801" fg:w="15"/><text x="1.8514%" y="127.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (14 samples, 0.03%)</title><rect x="1.6314%" y="149" width="0.0280%" height="15" fill="rgb(218,138,4)" fg:x="816" fg:w="14"/><text x="1.8814%" y="159.50"></text></g><g><title>natto::core::position::Position::make_move (139 samples, 0.28%)</title><rect x="1.6654%" y="149" width="0.2779%" height="15" fill="rgb(250,191,14)" fg:x="833" fg:w="139"/><text x="1.9154%" y="159.50"></text></g><g><title>natto::core::board::Board::remove_piece (47 samples, 0.09%)</title><rect x="1.9473%" y="133" width="0.0940%" height="15" fill="rgb(239,60,40)" fg:x="974" fg:w="47"/><text x="2.1973%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (15 samples, 0.03%)</title><rect x="2.0413%" y="133" width="0.0300%" height="15" fill="rgb(206,27,48)" fg:x="1021" fg:w="15"/><text x="2.2913%" y="143.50"></text></g><g><title>natto::core::board::Board::remove_piece (58 samples, 0.12%)</title><rect x="2.0713%" y="117" width="0.1160%" height="15" fill="rgb(225,35,8)" fg:x="1036" fg:w="58"/><text x="2.3213%" y="127.50"></text></g><g><title>natto::core::position::Position::put_piece (8 samples, 0.02%)</title><rect x="2.1872%" y="117" width="0.0160%" height="15" fill="rgb(250,213,24)" fg:x="1094" fg:w="8"/><text x="2.4372%" y="127.50"></text></g><g><title>natto::core::position::Position::move_piece (67 samples, 0.13%)</title><rect x="2.0713%" y="133" width="0.1340%" height="15" fill="rgb(247,123,22)" fg:x="1036" fg:w="67"/><text x="2.3213%" y="143.50"></text></g><g><title>natto::core::position::Position::put_piece (7 samples, 0.01%)</title><rect x="2.2052%" y="133" width="0.0140%" height="15" fill="rgb(231,138,38)" fg:x="1103" fg:w="7"/><text x="2.4552%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (142 samples, 0.28%)</title><rect x="1.9473%" y="149" width="0.2839%" height="15" fill="rgb(231,145,46)" fg:x="974" fg:w="142"/><text x="2.1973%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="2.2712%" y="117" width="0.0160%" height="15" fill="rgb(251,118,11)" fg:x="1136" fg:w="8"/><text x="2.5212%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="2.2712%" y="101" width="0.0160%" height="15" fill="rgb(217,147,25)" fg:x="1136" fg:w="8"/><text x="2.5212%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (6 samples, 0.01%)</title><rect x="2.3032%" y="117" width="0.0120%" height="15" fill="rgb(247,81,37)" fg:x="1152" fg:w="6"/><text x="2.5532%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.05%)</title><rect x="2.2672%" y="133" width="0.0500%" height="15" fill="rgb(209,12,38)" fg:x="1134" fg:w="25"/><text x="2.5172%" y="143.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (24 samples, 0.05%)</title><rect x="2.3292%" y="133" width="0.0480%" height="15" fill="rgb(227,1,9)" fg:x="1165" fg:w="24"/><text x="2.5792%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.03%)</title><rect x="2.3891%" y="117" width="0.0260%" height="15" fill="rgb(248,47,43)" fg:x="1195" fg:w="13"/><text x="2.6391%" y="127.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (24 samples, 0.05%)</title><rect x="2.3791%" y="133" width="0.0480%" height="15" fill="rgb(221,10,30)" fg:x="1190" fg:w="24"/><text x="2.6291%" y="143.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (15 samples, 0.03%)</title><rect x="2.4391%" y="117" width="0.0300%" height="15" fill="rgb(210,229,1)" fg:x="1220" fg:w="15"/><text x="2.6891%" y="127.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (126 samples, 0.25%)</title><rect x="2.4711%" y="117" width="0.2519%" height="15" fill="rgb(222,148,37)" fg:x="1236" fg:w="126"/><text x="2.7211%" y="127.50"></text></g><g><title>natto::util::util::process_bits (54 samples, 0.11%)</title><rect x="2.7230%" y="117" width="0.1080%" height="15" fill="rgb(234,67,33)" fg:x="1362" fg:w="54"/><text x="2.9730%" y="127.50"></text></g><g><title>natto::core::position::Position::get_board_hash (253 samples, 0.51%)</title><rect x="2.4331%" y="133" width="0.5058%" height="15" fill="rgb(247,98,35)" fg:x="1217" fg:w="253"/><text x="2.6831%" y="143.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (54 samples, 0.11%)</title><rect x="2.8310%" y="117" width="0.1080%" height="15" fill="rgb(247,138,52)" fg:x="1416" fg:w="54"/><text x="3.0810%" y="127.50"></text></g><g><title>natto::core::position::Position::update_hash_code (364 samples, 0.73%)</title><rect x="2.2312%" y="149" width="0.7277%" height="15" fill="rgb(213,79,30)" fg:x="1116" fg:w="364"/><text x="2.4812%" y="159.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (10 samples, 0.02%)</title><rect x="2.9389%" y="133" width="0.0200%" height="15" fill="rgb(246,177,23)" fg:x="1470" fg:w="10"/><text x="3.1889%" y="143.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (58 samples, 0.12%)</title><rect x="2.9589%" y="149" width="0.1160%" height="15" fill="rgb(230,62,27)" fg:x="1480" fg:w="58"/><text x="3.2089%" y="159.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (33 samples, 0.07%)</title><rect x="3.1649%" y="133" width="0.0660%" height="15" fill="rgb(216,154,8)" fg:x="1583" fg:w="33"/><text x="3.4149%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.07%)</title><rect x="3.2308%" y="133" width="0.0720%" height="15" fill="rgb(244,35,45)" fg:x="1616" fg:w="36"/><text x="3.4808%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="3.3028%" y="133" width="0.0120%" height="15" fill="rgb(251,115,12)" fg:x="1652" fg:w="6"/><text x="3.5528%" y="143.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (46 samples, 0.09%)</title><rect x="3.3148%" y="133" width="0.0920%" height="15" fill="rgb(240,54,50)" fg:x="1658" fg:w="46"/><text x="3.5648%" y="143.50"></text></g><g><title>DYLD-STUB$$free (7 samples, 0.01%)</title><rect x="3.4208%" y="117" width="0.0140%" height="15" fill="rgb(233,84,52)" fg:x="1711" fg:w="7"/><text x="3.6708%" y="127.50"></text></g><g><title>_free (9 samples, 0.02%)</title><rect x="3.4348%" y="117" width="0.0180%" height="15" fill="rgb(207,117,47)" fg:x="1718" fg:w="9"/><text x="3.6848%" y="127.50"></text></g><g><title>_nanov2_free (6 samples, 0.01%)</title><rect x="3.4528%" y="117" width="0.0120%" height="15" fill="rgb(249,43,39)" fg:x="1727" fg:w="6"/><text x="3.7028%" y="127.50"></text></g><g><title>_szone_free (19 samples, 0.04%)</title><rect x="3.4648%" y="117" width="0.0380%" height="15" fill="rgb(209,38,44)" fg:x="1733" fg:w="19"/><text x="3.7148%" y="127.50"></text></g><g><title>small_free_list_add_ptr (6 samples, 0.01%)</title><rect x="3.5707%" y="101" width="0.0120%" height="15" fill="rgb(236,212,23)" fg:x="1786" fg:w="6"/><text x="3.8207%" y="111.50"></text></g><g><title>free_small (48 samples, 0.10%)</title><rect x="3.5027%" y="117" width="0.0960%" height="15" fill="rgb(242,79,21)" fg:x="1752" fg:w="48"/><text x="3.7527%" y="127.50"></text></g><g><title>_platform_memset (30 samples, 0.06%)</title><rect x="3.6367%" y="101" width="0.0600%" height="15" fill="rgb(211,96,35)" fg:x="1819" fg:w="30"/><text x="3.8867%" y="111.50"></text></g><g><title>free_tiny (107 samples, 0.21%)</title><rect x="3.5987%" y="117" width="0.2139%" height="15" fill="rgb(253,215,40)" fg:x="1800" fg:w="107"/><text x="3.8487%" y="127.50"></text></g><g><title>tiny_free_no_lock (58 samples, 0.12%)</title><rect x="3.6967%" y="101" width="0.1160%" height="15" fill="rgb(211,81,21)" fg:x="1849" fg:w="58"/><text x="3.9467%" y="111.50"></text></g><g><title>tiny_free_list_remove_ptr (8 samples, 0.02%)</title><rect x="3.7966%" y="85" width="0.0160%" height="15" fill="rgb(208,190,38)" fg:x="1899" fg:w="8"/><text x="4.0466%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (206 samples, 0.41%)</title><rect x="3.4208%" y="133" width="0.4119%" height="15" fill="rgb(235,213,38)" fg:x="1711" fg:w="206"/><text x="3.6708%" y="143.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (71 samples, 0.14%)</title><rect x="3.8346%" y="133" width="0.1419%" height="15" fill="rgb(237,122,38)" fg:x="1918" fg:w="71"/><text x="4.0846%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.04%)</title><rect x="3.9766%" y="133" width="0.0360%" height="15" fill="rgb(244,218,35)" fg:x="1989" fg:w="18"/><text x="4.2266%" y="143.50"></text></g><g><title>natto::core::board::Board::bitboard_all_pieces (30 samples, 0.06%)</title><rect x="4.0166%" y="133" width="0.0600%" height="15" fill="rgb(240,68,47)" fg:x="2009" fg:w="30"/><text x="4.2666%" y="143.50"></text></g><g><title>natto::core::move_gen::generate_moves (6 samples, 0.01%)</title><rect x="4.0785%" y="133" width="0.0120%" height="15" fill="rgb(210,16,53)" fg:x="2040" fg:w="6"/><text x="4.3285%" y="143.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (97 samples, 0.19%)</title><rect x="4.0905%" y="133" width="0.1939%" height="15" fill="rgb(235,124,12)" fg:x="2046" fg:w="97"/><text x="4.3405%" y="143.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (827 samples, 1.65%)</title><rect x="4.2845%" y="117" width="1.6534%" height="15" fill="rgb(224,169,11)" fg:x="2143" fg:w="827"/><text x="4.5345%" y="127.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (140 samples, 0.28%)</title><rect x="5.9379%" y="117" width="0.2799%" height="15" fill="rgb(250,166,2)" fg:x="2970" fg:w="140"/><text x="6.1879%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.01%)</title><rect x="7.1114%" y="101" width="0.0120%" height="15" fill="rgb(242,216,29)" fg:x="3557" fg:w="6"/><text x="7.3614%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (37 samples, 0.07%)</title><rect x="7.1234%" y="101" width="0.0740%" height="15" fill="rgb(230,116,27)" fg:x="3563" fg:w="37"/><text x="7.3734%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (165 samples, 0.33%)</title><rect x="7.1974%" y="101" width="0.3299%" height="15" fill="rgb(228,99,48)" fg:x="3600" fg:w="165"/><text x="7.4474%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (165 samples, 0.33%)</title><rect x="7.1974%" y="85" width="0.3299%" height="15" fill="rgb(253,11,6)" fg:x="3600" fg:w="165"/><text x="7.4474%" y="95.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (18 samples, 0.04%)</title><rect x="7.5273%" y="101" width="0.0360%" height="15" fill="rgb(247,143,39)" fg:x="3765" fg:w="18"/><text x="7.7773%" y="111.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (1,129 samples, 2.26%)</title><rect x="7.5633%" y="101" width="2.2572%" height="15" fill="rgb(236,97,10)" fg:x="3783" fg:w="1129"/><text x="7.8133%" y="111.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (42 samples, 0.08%)</title><rect x="9.8345%" y="101" width="0.0840%" height="15" fill="rgb(233,208,19)" fg:x="4919" fg:w="42"/><text x="10.0845%" y="111.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (111 samples, 0.22%)</title><rect x="9.9184%" y="101" width="0.2219%" height="15" fill="rgb(216,164,2)" fg:x="4961" fg:w="111"/><text x="10.1684%" y="111.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (118 samples, 0.24%)</title><rect x="10.1403%" y="101" width="0.2359%" height="15" fill="rgb(220,129,5)" fg:x="5072" fg:w="118"/><text x="10.3903%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (163 samples, 0.33%)</title><rect x="10.3763%" y="101" width="0.3259%" height="15" fill="rgb(242,17,10)" fg:x="5190" fg:w="163"/><text x="10.6263%" y="111.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.01%)</title><rect x="10.7021%" y="101" width="0.0140%" height="15" fill="rgb(242,107,0)" fg:x="5353" fg:w="7"/><text x="10.9521%" y="111.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 0.02%)</title><rect x="10.7161%" y="101" width="0.0180%" height="15" fill="rgb(251,28,31)" fg:x="5360" fg:w="9"/><text x="10.9661%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (36 samples, 0.07%)</title><rect x="10.7341%" y="101" width="0.0720%" height="15" fill="rgb(233,223,10)" fg:x="5369" fg:w="36"/><text x="10.9841%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (56 samples, 0.11%)</title><rect x="10.8061%" y="101" width="0.1120%" height="15" fill="rgb(215,21,27)" fg:x="5405" fg:w="56"/><text x="11.0561%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (37 samples, 0.07%)</title><rect x="10.9301%" y="101" width="0.0740%" height="15" fill="rgb(232,23,21)" fg:x="5467" fg:w="37"/><text x="11.1801%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (89 samples, 0.18%)</title><rect x="11.0100%" y="85" width="0.1779%" height="15" fill="rgb(244,5,23)" fg:x="5507" fg:w="89"/><text x="11.2600%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (82 samples, 0.16%)</title><rect x="11.1880%" y="85" width="0.1639%" height="15" fill="rgb(226,81,46)" fg:x="5596" fg:w="82"/><text x="11.4380%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (162 samples, 0.32%)</title><rect x="11.3519%" y="85" width="0.3239%" height="15" fill="rgb(247,70,30)" fg:x="5678" fg:w="162"/><text x="11.6019%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (765 samples, 1.53%)</title><rect x="11.6758%" y="85" width="1.5294%" height="15" fill="rgb(212,68,19)" fg:x="5840" fg:w="765"/><text x="11.9258%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (765 samples, 1.53%)</title><rect x="11.6758%" y="69" width="1.5294%" height="15" fill="rgb(240,187,13)" fg:x="5840" fg:w="765"/><text x="11.9258%" y="79.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (64 samples, 0.13%)</title><rect x="13.2052%" y="85" width="0.1280%" height="15" fill="rgb(223,113,26)" fg:x="6605" fg:w="64"/><text x="13.4552%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (692 samples, 1.38%)</title><rect x="13.3332%" y="85" width="1.3835%" height="15" fill="rgb(206,192,2)" fg:x="6669" fg:w="692"/><text x="13.5832%" y="95.50"></text></g><g><title>core::hash::Hasher::write_u8 (10 samples, 0.02%)</title><rect x="14.7167%" y="85" width="0.0200%" height="15" fill="rgb(241,108,4)" fg:x="7361" fg:w="10"/><text x="14.9667%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (59 samples, 0.12%)</title><rect x="14.7367%" y="85" width="0.1180%" height="15" fill="rgb(247,173,49)" fg:x="7371" fg:w="59"/><text x="14.9867%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (101 samples, 0.20%)</title><rect x="14.8547%" y="85" width="0.2019%" height="15" fill="rgb(224,114,35)" fg:x="7430" fg:w="101"/><text x="15.1047%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (2,288 samples, 4.57%)</title><rect x="11.0080%" y="101" width="4.5744%" height="15" fill="rgb(245,159,27)" fg:x="5506" fg:w="2288"/><text x="11.2580%" y="111.50">hashb..</text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (263 samples, 0.53%)</title><rect x="15.0566%" y="85" width="0.5258%" height="15" fill="rgb(245,172,44)" fg:x="7531" fg:w="263"/><text x="15.3066%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (36 samples, 0.07%)</title><rect x="15.5864%" y="101" width="0.0720%" height="15" fill="rgb(236,23,11)" fg:x="7796" fg:w="36"/><text x="15.8364%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (12 samples, 0.02%)</title><rect x="15.6584%" y="101" width="0.0240%" height="15" fill="rgb(205,117,38)" fg:x="7832" fg:w="12"/><text x="15.9084%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (71 samples, 0.14%)</title><rect x="15.6824%" y="101" width="0.1419%" height="15" fill="rgb(237,72,25)" fg:x="7844" fg:w="71"/><text x="15.9324%" y="111.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (49 samples, 0.10%)</title><rect x="15.8243%" y="101" width="0.0980%" height="15" fill="rgb(244,70,9)" fg:x="7915" fg:w="49"/><text x="16.0743%" y="111.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (6,045 samples, 12.09%)</title><rect x="4.2845%" y="133" width="12.0856%" height="15" fill="rgb(217,125,39)" fg:x="2143" fg:w="6045"/><text x="4.5345%" y="143.50">natto::core::move_..</text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (5,078 samples, 10.15%)</title><rect x="6.2178%" y="117" width="10.1523%" height="15" fill="rgb(235,36,10)" fg:x="3110" fg:w="5078"/><text x="6.4678%" y="127.50">natto::core::mo..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (224 samples, 0.45%)</title><rect x="15.9223%" y="101" width="0.4478%" height="15" fill="rgb(251,123,47)" fg:x="7964" fg:w="224"/><text x="16.1723%" y="111.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (166 samples, 0.33%)</title><rect x="16.3701%" y="133" width="0.3319%" height="15" fill="rgb(221,13,13)" fg:x="8188" fg:w="166"/><text x="16.6201%" y="143.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (31 samples, 0.06%)</title><rect x="16.7060%" y="133" width="0.0620%" height="15" fill="rgb(238,131,9)" fg:x="8356" fg:w="31"/><text x="16.9560%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (553 samples, 1.11%)</title><rect x="16.7680%" y="133" width="1.1056%" height="15" fill="rgb(211,50,8)" fg:x="8387" fg:w="553"/><text x="17.0180%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (60 samples, 0.12%)</title><rect x="17.8736%" y="133" width="0.1200%" height="15" fill="rgb(245,182,24)" fg:x="8940" fg:w="60"/><text x="18.1236%" y="143.50"></text></g><g><title>natto::core::board::Board::remove_piece (654 samples, 1.31%)</title><rect x="17.9935%" y="117" width="1.3075%" height="15" fill="rgb(242,14,37)" fg:x="9000" fg:w="654"/><text x="18.2435%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (173 samples, 0.35%)</title><rect x="19.3011%" y="117" width="0.3459%" height="15" fill="rgb(246,228,12)" fg:x="9654" fg:w="173"/><text x="19.5511%" y="127.50"></text></g><g><title>natto::core::board::Board::remove_piece (696 samples, 1.39%)</title><rect x="19.6469%" y="101" width="1.3915%" height="15" fill="rgb(213,55,15)" fg:x="9827" fg:w="696"/><text x="19.8969%" y="111.50"></text></g><g><title>natto::core::position::Position::put_piece (62 samples, 0.12%)</title><rect x="21.0384%" y="101" width="0.1240%" height="15" fill="rgb(209,9,3)" fg:x="10523" fg:w="62"/><text x="21.2884%" y="111.50"></text></g><g><title>natto::core::position::Position::move_piece (795 samples, 1.59%)</title><rect x="19.6469%" y="117" width="1.5894%" height="15" fill="rgb(230,59,30)" fg:x="9827" fg:w="795"/><text x="19.8969%" y="127.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (36 samples, 0.07%)</title><rect x="21.1644%" y="101" width="0.0720%" height="15" fill="rgb(209,121,21)" fg:x="10586" fg:w="36"/><text x="21.4144%" y="111.50"></text></g><g><title>natto::core::position::Position::put_piece (78 samples, 0.16%)</title><rect x="21.2364%" y="117" width="0.1559%" height="15" fill="rgb(220,109,13)" fg:x="10622" fg:w="78"/><text x="21.4864%" y="127.50"></text></g><g><title>natto::core::position::Position::remove_piece (15 samples, 0.03%)</title><rect x="21.3923%" y="117" width="0.0300%" height="15" fill="rgb(232,18,1)" fg:x="10700" fg:w="15"/><text x="21.6423%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move (1,747 samples, 3.49%)</title><rect x="17.9935%" y="133" width="3.4927%" height="15" fill="rgb(215,41,42)" fg:x="9000" fg:w="1747"/><text x="18.2435%" y="143.50">nat..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (32 samples, 0.06%)</title><rect x="21.4223%" y="117" width="0.0640%" height="15" fill="rgb(224,123,36)" fg:x="10715" fg:w="32"/><text x="21.6723%" y="127.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6 samples, 0.01%)</title><rect x="21.7422%" y="117" width="0.0120%" height="15" fill="rgb(240,125,3)" fg:x="10875" fg:w="6"/><text x="21.9922%" y="127.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.03%)</title><rect x="21.7542%" y="117" width="0.0320%" height="15" fill="rgb(205,98,50)" fg:x="10881" fg:w="16"/><text x="22.0042%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.01%)</title><rect x="21.7962%" y="117" width="0.0120%" height="15" fill="rgb(205,185,37)" fg:x="10902" fg:w="6"/><text x="22.0462%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.01%)</title><rect x="21.8141%" y="117" width="0.0120%" height="15" fill="rgb(238,207,15)" fg:x="10911" fg:w="6"/><text x="22.0641%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.02%)</title><rect x="21.8321%" y="101" width="0.0160%" height="15" fill="rgb(213,199,42)" fg:x="10920" fg:w="8"/><text x="22.0821%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 0.02%)</title><rect x="21.8481%" y="101" width="0.0200%" height="15" fill="rgb(235,201,11)" fg:x="10928" fg:w="10"/><text x="22.0981%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (95 samples, 0.19%)</title><rect x="21.8681%" y="101" width="0.1899%" height="15" fill="rgb(207,46,11)" fg:x="10938" fg:w="95"/><text x="22.1181%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 samples, 0.19%)</title><rect x="21.8701%" y="85" width="0.1879%" height="15" fill="rgb(241,35,35)" fg:x="10939" fg:w="94"/><text x="22.1201%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (75 samples, 0.15%)</title><rect x="22.0601%" y="101" width="0.1499%" height="15" fill="rgb(243,32,47)" fg:x="11034" fg:w="75"/><text x="22.3101%" y="111.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (16 samples, 0.03%)</title><rect x="22.2200%" y="101" width="0.0320%" height="15" fill="rgb(247,202,23)" fg:x="11114" fg:w="16"/><text x="22.4700%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (8 samples, 0.02%)</title><rect x="22.2520%" y="101" width="0.0160%" height="15" fill="rgb(219,102,11)" fg:x="11130" fg:w="8"/><text x="22.5020%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (240 samples, 0.48%)</title><rect x="21.8261%" y="117" width="0.4798%" height="15" fill="rgb(243,110,44)" fg:x="10917" fg:w="240"/><text x="22.0761%" y="127.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (19 samples, 0.04%)</title><rect x="22.2680%" y="101" width="0.0380%" height="15" fill="rgb(222,74,54)" fg:x="11138" fg:w="19"/><text x="22.5180%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (7 samples, 0.01%)</title><rect x="22.3060%" y="117" width="0.0140%" height="15" fill="rgb(216,99,12)" fg:x="11157" fg:w="7"/><text x="22.5560%" y="127.50"></text></g><g><title>natto::core::board::Board::process_pieces (34 samples, 0.07%)</title><rect x="22.3280%" y="117" width="0.0680%" height="15" fill="rgb(226,22,26)" fg:x="11168" fg:w="34"/><text x="22.5780%" y="127.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (232 samples, 0.46%)</title><rect x="22.3959%" y="117" width="0.4638%" height="15" fill="rgb(217,163,10)" fg:x="11202" fg:w="232"/><text x="22.6459%" y="127.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.02%)</title><rect x="22.8878%" y="101" width="0.0160%" height="15" fill="rgb(213,25,53)" fg:x="11448" fg:w="8"/><text x="23.1378%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 0.07%)</title><rect x="22.9177%" y="85" width="0.0660%" height="15" fill="rgb(252,105,26)" fg:x="11463" fg:w="33"/><text x="23.1677%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 0.07%)</title><rect x="22.9177%" y="69" width="0.0660%" height="15" fill="rgb(220,39,43)" fg:x="11463" fg:w="33"/><text x="23.1677%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26 samples, 0.05%)</title><rect x="22.9837%" y="85" width="0.0520%" height="15" fill="rgb(229,68,48)" fg:x="11496" fg:w="26"/><text x="23.2337%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (12 samples, 0.02%)</title><rect x="23.0357%" y="85" width="0.0240%" height="15" fill="rgb(252,8,32)" fg:x="11522" fg:w="12"/><text x="23.2857%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (9 samples, 0.02%)</title><rect x="23.0597%" y="85" width="0.0180%" height="15" fill="rgb(223,20,43)" fg:x="11534" fg:w="9"/><text x="23.3097%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (90 samples, 0.18%)</title><rect x="22.9098%" y="101" width="0.1799%" height="15" fill="rgb(229,81,49)" fg:x="11459" fg:w="90"/><text x="23.1598%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (6 samples, 0.01%)</title><rect x="23.0777%" y="85" width="0.0120%" height="15" fill="rgb(236,28,36)" fg:x="11543" fg:w="6"/><text x="23.3277%" y="95.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (35 samples, 0.07%)</title><rect x="23.0937%" y="101" width="0.0700%" height="15" fill="rgb(249,185,26)" fg:x="11551" fg:w="35"/><text x="23.3437%" y="111.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (31 samples, 0.06%)</title><rect x="23.1637%" y="101" width="0.0620%" height="15" fill="rgb(249,174,33)" fg:x="11586" fg:w="31"/><text x="23.4137%" y="111.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (190 samples, 0.38%)</title><rect x="22.8678%" y="117" width="0.3799%" height="15" fill="rgb(233,201,37)" fg:x="11438" fg:w="190"/><text x="23.1178%" y="127.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (11 samples, 0.02%)</title><rect x="23.2256%" y="101" width="0.0220%" height="15" fill="rgb(221,78,26)" fg:x="11617" fg:w="11"/><text x="23.4756%" y="111.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (49 samples, 0.10%)</title><rect x="23.2476%" y="117" width="0.0980%" height="15" fill="rgb(250,127,30)" fg:x="11628" fg:w="49"/><text x="23.4976%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (65 samples, 0.13%)</title><rect x="23.4116%" y="101" width="0.1300%" height="15" fill="rgb(230,49,44)" fg:x="11710" fg:w="65"/><text x="23.6616%" y="111.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (151 samples, 0.30%)</title><rect x="23.5415%" y="101" width="0.3019%" height="15" fill="rgb(229,67,23)" fg:x="11775" fg:w="151"/><text x="23.7915%" y="111.50"></text></g><g><title>natto::core::board::Board::process_pieces (12 samples, 0.02%)</title><rect x="23.8434%" y="101" width="0.0240%" height="15" fill="rgb(249,83,47)" fg:x="11926" fg:w="12"/><text x="24.0934%" y="111.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (1,755 samples, 3.51%)</title><rect x="23.8674%" y="101" width="3.5087%" height="15" fill="rgb(215,43,3)" fg:x="11938" fg:w="1755"/><text x="24.1174%" y="111.50">nat..</text></g><g><title>natto::util::util::process_bits (701 samples, 1.40%)</title><rect x="27.3761%" y="101" width="1.4015%" height="15" fill="rgb(238,154,13)" fg:x="13693" fg:w="701"/><text x="27.6261%" y="111.50"></text></g><g><title>natto::core::position::Position::get_board_hash (3,477 samples, 6.95%)</title><rect x="23.3456%" y="117" width="6.9515%" height="15" fill="rgb(219,56,2)" fg:x="11677" fg:w="3477"/><text x="23.5956%" y="127.50">natto::co..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (760 samples, 1.52%)</title><rect x="28.7776%" y="101" width="1.5195%" height="15" fill="rgb(233,0,4)" fg:x="14394" fg:w="760"/><text x="29.0276%" y="111.50"></text></g><g><title>natto::core::position::Position::update_hash_code (4,508 samples, 9.01%)</title><rect x="21.4863%" y="133" width="9.0128%" height="15" fill="rgb(235,30,7)" fg:x="10747" fg:w="4508"/><text x="21.7363%" y="143.50">natto::core::..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (97 samples, 0.19%)</title><rect x="30.3051%" y="117" width="0.1939%" height="15" fill="rgb(250,79,13)" fg:x="15158" fg:w="97"/><text x="30.5551%" y="127.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (182 samples, 0.36%)</title><rect x="30.4990%" y="133" width="0.3639%" height="15" fill="rgb(211,146,34)" fg:x="15255" fg:w="182"/><text x="30.7490%" y="143.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (47 samples, 0.09%)</title><rect x="31.0388%" y="117" width="0.0940%" height="15" fill="rgb(228,22,38)" fg:x="15525" fg:w="47"/><text x="31.2888%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.02%)</title><rect x="31.1328%" y="117" width="0.0240%" height="15" fill="rgb(235,168,5)" fg:x="15572" fg:w="12"/><text x="31.3828%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.03%)</title><rect x="31.1568%" y="117" width="0.0320%" height="15" fill="rgb(221,155,16)" fg:x="15584" fg:w="16"/><text x="31.4068%" y="127.50"></text></g><g><title>natto::core::board::Board::bitboard_all_pieces (54 samples, 0.11%)</title><rect x="31.1888%" y="117" width="0.1080%" height="15" fill="rgb(215,215,53)" fg:x="15600" fg:w="54"/><text x="31.4388%" y="127.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (170 samples, 0.34%)</title><rect x="31.3047%" y="117" width="0.3399%" height="15" fill="rgb(223,4,10)" fg:x="15658" fg:w="170"/><text x="31.5547%" y="127.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (1,108 samples, 2.22%)</title><rect x="31.6446%" y="101" width="2.2152%" height="15" fill="rgb(234,103,6)" fg:x="15828" fg:w="1108"/><text x="31.8946%" y="111.50">n..</text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (241 samples, 0.48%)</title><rect x="33.8598%" y="101" width="0.4818%" height="15" fill="rgb(227,97,0)" fg:x="16936" fg:w="241"/><text x="34.1098%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (20 samples, 0.04%)</title><rect x="35.8671%" y="85" width="0.0400%" height="15" fill="rgb(234,150,53)" fg:x="17940" fg:w="20"/><text x="36.1171%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (15 samples, 0.03%)</title><rect x="35.9071%" y="85" width="0.0300%" height="15" fill="rgb(228,201,54)" fg:x="17960" fg:w="15"/><text x="36.1571%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (53 samples, 0.11%)</title><rect x="35.9371%" y="85" width="0.1060%" height="15" fill="rgb(222,22,37)" fg:x="17975" fg:w="53"/><text x="36.1871%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (243 samples, 0.49%)</title><rect x="36.0430%" y="85" width="0.4858%" height="15" fill="rgb(237,53,32)" fg:x="18028" fg:w="243"/><text x="36.2930%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (243 samples, 0.49%)</title><rect x="36.0430%" y="69" width="0.4858%" height="15" fill="rgb(233,25,53)" fg:x="18028" fg:w="243"/><text x="36.2930%" y="79.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (39 samples, 0.08%)</title><rect x="36.5288%" y="85" width="0.0780%" height="15" fill="rgb(210,40,34)" fg:x="18271" fg:w="39"/><text x="36.7788%" y="95.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (2,219 samples, 4.44%)</title><rect x="36.6068%" y="85" width="4.4364%" height="15" fill="rgb(241,220,44)" fg:x="18310" fg:w="2219"/><text x="36.8568%" y="95.50">&lt;u64 ..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.02%)</title><rect x="41.0452%" y="85" width="0.0240%" height="15" fill="rgb(235,28,35)" fg:x="20530" fg:w="12"/><text x="41.2952%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (79 samples, 0.16%)</title><rect x="41.0692%" y="85" width="0.1579%" height="15" fill="rgb(210,56,17)" fg:x="20542" fg:w="79"/><text x="41.3192%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (265 samples, 0.53%)</title><rect x="41.2272%" y="85" width="0.5298%" height="15" fill="rgb(224,130,29)" fg:x="20621" fg:w="265"/><text x="41.4772%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (218 samples, 0.44%)</title><rect x="41.7570%" y="85" width="0.4358%" height="15" fill="rgb(235,212,8)" fg:x="20886" fg:w="218"/><text x="42.0070%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (268 samples, 0.54%)</title><rect x="42.1928%" y="85" width="0.5358%" height="15" fill="rgb(223,33,50)" fg:x="21104" fg:w="268"/><text x="42.4428%" y="95.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.02%)</title><rect x="42.7306%" y="85" width="0.0200%" height="15" fill="rgb(219,149,13)" fg:x="21373" fg:w="10"/><text x="42.9806%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (7 samples, 0.01%)</title><rect x="42.7506%" y="85" width="0.0140%" height="15" fill="rgb(250,156,29)" fg:x="21383" fg:w="7"/><text x="43.0006%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (84 samples, 0.17%)</title><rect x="42.7646%" y="85" width="0.1679%" height="15" fill="rgb(216,193,19)" fg:x="21390" fg:w="84"/><text x="43.0146%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (110 samples, 0.22%)</title><rect x="42.9325%" y="85" width="0.2199%" height="15" fill="rgb(216,135,14)" fg:x="21474" fg:w="110"/><text x="43.1825%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (9 samples, 0.02%)</title><rect x="43.1525%" y="85" width="0.0180%" height="15" fill="rgb(241,47,5)" fg:x="21584" fg:w="9"/><text x="43.4025%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (77 samples, 0.15%)</title><rect x="43.1785%" y="85" width="0.1539%" height="15" fill="rgb(233,42,35)" fg:x="21597" fg:w="77"/><text x="43.4285%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (150 samples, 0.30%)</title><rect x="43.3324%" y="69" width="0.2999%" height="15" fill="rgb(231,13,6)" fg:x="21674" fg:w="150"/><text x="43.5824%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (194 samples, 0.39%)</title><rect x="43.6323%" y="69" width="0.3879%" height="15" fill="rgb(207,181,40)" fg:x="21824" fg:w="194"/><text x="43.8823%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (273 samples, 0.55%)</title><rect x="44.0202%" y="69" width="0.5458%" height="15" fill="rgb(254,173,49)" fg:x="22018" fg:w="273"/><text x="44.2702%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,337 samples, 2.67%)</title><rect x="44.5660%" y="69" width="2.6730%" height="15" fill="rgb(221,1,38)" fg:x="22291" fg:w="1337"/><text x="44.8160%" y="79.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,336 samples, 2.67%)</title><rect x="44.5680%" y="53" width="2.6710%" height="15" fill="rgb(206,124,46)" fg:x="22292" fg:w="1336"/><text x="44.8180%" y="63.50">&lt;c..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (115 samples, 0.23%)</title><rect x="47.2390%" y="69" width="0.2299%" height="15" fill="rgb(249,21,11)" fg:x="23628" fg:w="115"/><text x="47.4890%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,267 samples, 2.53%)</title><rect x="47.4689%" y="69" width="2.5331%" height="15" fill="rgb(222,201,40)" fg:x="23743" fg:w="1267"/><text x="47.7189%" y="79.50">co..</text></g><g><title>core::hash::Hasher::write_u8 (32 samples, 0.06%)</title><rect x="50.0020%" y="69" width="0.0640%" height="15" fill="rgb(235,61,29)" fg:x="25010" fg:w="32"/><text x="50.2520%" y="79.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (101 samples, 0.20%)</title><rect x="50.0680%" y="69" width="0.2019%" height="15" fill="rgb(219,207,3)" fg:x="25043" fg:w="101"/><text x="50.3180%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (211 samples, 0.42%)</title><rect x="50.2699%" y="69" width="0.4218%" height="15" fill="rgb(222,56,46)" fg:x="25144" fg:w="211"/><text x="50.5199%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (4,152 samples, 8.30%)</title><rect x="43.3324%" y="85" width="8.3010%" height="15" fill="rgb(239,76,54)" fg:x="21674" fg:w="4152"/><text x="43.5824%" y="95.50">hashbrown::m..</text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (471 samples, 0.94%)</title><rect x="50.6918%" y="69" width="0.9417%" height="15" fill="rgb(231,124,27)" fg:x="25355" fg:w="471"/><text x="50.9418%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (59 samples, 0.12%)</title><rect x="51.6354%" y="85" width="0.1180%" height="15" fill="rgb(249,195,6)" fg:x="25827" fg:w="59"/><text x="51.8854%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (11 samples, 0.02%)</title><rect x="51.7534%" y="85" width="0.0220%" height="15" fill="rgb(237,174,47)" fg:x="25886" fg:w="11"/><text x="52.0034%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (106 samples, 0.21%)</title><rect x="51.7754%" y="85" width="0.2119%" height="15" fill="rgb(206,201,31)" fg:x="25897" fg:w="106"/><text x="52.0254%" y="95.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (78 samples, 0.16%)</title><rect x="51.9873%" y="85" width="0.1559%" height="15" fill="rgb(231,57,52)" fg:x="26003" fg:w="78"/><text x="52.2373%" y="95.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (10,678 samples, 21.35%)</title><rect x="31.6446%" y="117" width="21.3483%" height="15" fill="rgb(248,177,22)" fg:x="15828" fg:w="10678"/><text x="31.8946%" y="127.50">natto::core::move_gen::square_atta..</text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (9,329 samples, 18.65%)</title><rect x="34.3416%" y="101" width="18.6513%" height="15" fill="rgb(215,211,37)" fg:x="17177" fg:w="9329"/><text x="34.5916%" y="111.50">natto::core::move_gen::square..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (424 samples, 0.85%)</title><rect x="52.1452%" y="85" width="0.8477%" height="15" fill="rgb(241,128,51)" fg:x="26082" fg:w="424"/><text x="52.3952%" y="95.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (230 samples, 0.46%)</title><rect x="52.9929%" y="117" width="0.4598%" height="15" fill="rgb(227,165,31)" fg:x="26506" fg:w="230"/><text x="53.2429%" y="127.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (48 samples, 0.10%)</title><rect x="53.4628%" y="117" width="0.0960%" height="15" fill="rgb(228,167,24)" fg:x="26741" fg:w="48"/><text x="53.7128%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move (634 samples, 1.27%)</title><rect x="53.5587%" y="117" width="1.2675%" height="15" fill="rgb(228,143,12)" fg:x="26789" fg:w="634"/><text x="53.8087%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (111 samples, 0.22%)</title><rect x="54.8263%" y="117" width="0.2219%" height="15" fill="rgb(249,149,8)" fg:x="27423" fg:w="111"/><text x="55.0763%" y="127.50"></text></g><g><title>natto::core::board::Board::remove_piece (885 samples, 1.77%)</title><rect x="55.0482%" y="101" width="1.7694%" height="15" fill="rgb(243,35,44)" fg:x="27534" fg:w="885"/><text x="55.2982%" y="111.50"></text></g><g><title>natto::core::position::Position::make_move::do_basic_move (239 samples, 0.48%)</title><rect x="56.8175%" y="101" width="0.4778%" height="15" fill="rgb(246,89,9)" fg:x="28419" fg:w="239"/><text x="57.0675%" y="111.50"></text></g><g><title>natto::core::board::Board::remove_piece (1,183 samples, 2.37%)</title><rect x="57.2954%" y="85" width="2.3651%" height="15" fill="rgb(233,213,13)" fg:x="28658" fg:w="1183"/><text x="57.5454%" y="95.50">na..</text></g><g><title>natto::core::position::Position::put_piece (126 samples, 0.25%)</title><rect x="59.6605%" y="85" width="0.2519%" height="15" fill="rgb(233,141,41)" fg:x="29841" fg:w="126"/><text x="59.9105%" y="95.50"></text></g><g><title>natto::core::position::Position::move_piece (1,379 samples, 2.76%)</title><rect x="57.2954%" y="101" width="2.7570%" height="15" fill="rgb(239,167,4)" fg:x="28658" fg:w="1379"/><text x="57.5454%" y="111.50">na..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (70 samples, 0.14%)</title><rect x="59.9124%" y="85" width="0.1399%" height="15" fill="rgb(209,217,16)" fg:x="29967" fg:w="70"/><text x="60.1624%" y="95.50"></text></g><g><title>natto::core::position::Position::put_piece (137 samples, 0.27%)</title><rect x="60.0524%" y="101" width="0.2739%" height="15" fill="rgb(219,88,35)" fg:x="30037" fg:w="137"/><text x="60.3024%" y="111.50"></text></g><g><title>natto::core::position::Position::remove_piece (16 samples, 0.03%)</title><rect x="60.3263%" y="101" width="0.0320%" height="15" fill="rgb(220,193,23)" fg:x="30174" fg:w="16"/><text x="60.5763%" y="111.50"></text></g><g><title>natto::core::position::Position::make_move (2,724 samples, 5.45%)</title><rect x="55.0482%" y="117" width="5.4460%" height="15" fill="rgb(230,90,52)" fg:x="27534" fg:w="2724"/><text x="55.2982%" y="127.50">natto::..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (68 samples, 0.14%)</title><rect x="60.3583%" y="101" width="0.1360%" height="15" fill="rgb(252,106,19)" fg:x="30190" fg:w="68"/><text x="60.6083%" y="111.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (19 samples, 0.04%)</title><rect x="61.0200%" y="101" width="0.0380%" height="15" fill="rgb(206,74,20)" fg:x="30521" fg:w="19"/><text x="61.2700%" y="111.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (12 samples, 0.02%)</title><rect x="61.0580%" y="101" width="0.0240%" height="15" fill="rgb(230,138,44)" fg:x="30540" fg:w="12"/><text x="61.3080%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.02%)</title><rect x="61.0820%" y="101" width="0.0220%" height="15" fill="rgb(235,182,43)" fg:x="30552" fg:w="11"/><text x="61.3320%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.01%)</title><rect x="61.1040%" y="101" width="0.0140%" height="15" fill="rgb(242,16,51)" fg:x="30563" fg:w="7"/><text x="61.3540%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.01%)</title><rect x="61.1220%" y="85" width="0.0140%" height="15" fill="rgb(248,9,4)" fg:x="30572" fg:w="7"/><text x="61.3720%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.02%)</title><rect x="61.1360%" y="85" width="0.0220%" height="15" fill="rgb(210,31,22)" fg:x="30579" fg:w="11"/><text x="61.3860%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 0.02%)</title><rect x="61.1580%" y="85" width="0.0240%" height="15" fill="rgb(239,54,39)" fg:x="30590" fg:w="12"/><text x="61.4080%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (194 samples, 0.39%)</title><rect x="61.1820%" y="85" width="0.3879%" height="15" fill="rgb(230,99,41)" fg:x="30602" fg:w="194"/><text x="61.4320%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (192 samples, 0.38%)</title><rect x="61.1860%" y="69" width="0.3839%" height="15" fill="rgb(253,106,12)" fg:x="30604" fg:w="192"/><text x="61.4360%" y="79.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 0.02%)</title><rect x="61.5698%" y="85" width="0.0200%" height="15" fill="rgb(213,46,41)" fg:x="30796" fg:w="10"/><text x="61.8198%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (136 samples, 0.27%)</title><rect x="61.5898%" y="85" width="0.2719%" height="15" fill="rgb(215,133,35)" fg:x="30806" fg:w="136"/><text x="61.8398%" y="95.50"></text></g><g><title>core::hash::Hasher::write_u8 (11 samples, 0.02%)</title><rect x="61.8617%" y="85" width="0.0220%" height="15" fill="rgb(213,28,5)" fg:x="30942" fg:w="11"/><text x="62.1117%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (38 samples, 0.08%)</title><rect x="61.8857%" y="85" width="0.0760%" height="15" fill="rgb(215,77,49)" fg:x="30954" fg:w="38"/><text x="62.1357%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (28 samples, 0.06%)</title><rect x="61.9617%" y="85" width="0.0560%" height="15" fill="rgb(248,100,22)" fg:x="30992" fg:w="28"/><text x="62.2117%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (471 samples, 0.94%)</title><rect x="61.1180%" y="101" width="0.9417%" height="15" fill="rgb(208,67,9)" fg:x="30570" fg:w="471"/><text x="61.3680%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (21 samples, 0.04%)</title><rect x="62.0177%" y="85" width="0.0420%" height="15" fill="rgb(219,133,21)" fg:x="31020" fg:w="21"/><text x="62.2677%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (13 samples, 0.03%)</title><rect x="62.0597%" y="101" width="0.0260%" height="15" fill="rgb(246,46,29)" fg:x="31041" fg:w="13"/><text x="62.3097%" y="111.50"></text></g><g><title>natto::core::board::Board::process_pieces (52 samples, 0.10%)</title><rect x="62.0876%" y="101" width="0.1040%" height="15" fill="rgb(246,185,52)" fg:x="31055" fg:w="52"/><text x="62.3376%" y="111.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (401 samples, 0.80%)</title><rect x="62.1916%" y="101" width="0.8017%" height="15" fill="rgb(252,136,11)" fg:x="31107" fg:w="401"/><text x="62.4416%" y="111.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.02%)</title><rect x="63.0273%" y="85" width="0.0180%" height="15" fill="rgb(219,138,53)" fg:x="31525" fg:w="9"/><text x="63.2773%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (10 samples, 0.02%)</title><rect x="63.0453%" y="85" width="0.0200%" height="15" fill="rgb(211,51,23)" fg:x="31534" fg:w="10"/><text x="63.2953%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (17 samples, 0.03%)</title><rect x="63.0653%" y="69" width="0.0340%" height="15" fill="rgb(247,221,28)" fg:x="31544" fg:w="17"/><text x="63.3153%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (74 samples, 0.15%)</title><rect x="63.0993%" y="69" width="0.1479%" height="15" fill="rgb(251,222,45)" fg:x="31561" fg:w="74"/><text x="63.3493%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (74 samples, 0.15%)</title><rect x="63.0993%" y="53" width="0.1479%" height="15" fill="rgb(217,162,53)" fg:x="31561" fg:w="74"/><text x="63.3493%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (55 samples, 0.11%)</title><rect x="63.2472%" y="69" width="0.1100%" height="15" fill="rgb(229,93,14)" fg:x="31635" fg:w="55"/><text x="63.4972%" y="79.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (16 samples, 0.03%)</title><rect x="63.3572%" y="69" width="0.0320%" height="15" fill="rgb(209,67,49)" fg:x="31690" fg:w="16"/><text x="63.6072%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (13 samples, 0.03%)</title><rect x="63.3892%" y="69" width="0.0260%" height="15" fill="rgb(213,87,29)" fg:x="31706" fg:w="13"/><text x="63.6392%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (189 samples, 0.38%)</title><rect x="63.0653%" y="85" width="0.3779%" height="15" fill="rgb(205,151,52)" fg:x="31544" fg:w="189"/><text x="63.3153%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (14 samples, 0.03%)</title><rect x="63.4152%" y="69" width="0.0280%" height="15" fill="rgb(253,215,39)" fg:x="31719" fg:w="14"/><text x="63.6652%" y="79.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (64 samples, 0.13%)</title><rect x="63.4432%" y="85" width="0.1280%" height="15" fill="rgb(221,220,41)" fg:x="31733" fg:w="64"/><text x="63.6932%" y="95.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (76 samples, 0.15%)</title><rect x="63.5711%" y="85" width="0.1519%" height="15" fill="rgb(218,133,21)" fg:x="31797" fg:w="76"/><text x="63.8211%" y="95.50"></text></g><g><title>natto::core::position::Position::create_initial_hash (373 samples, 0.75%)</title><rect x="62.9933%" y="101" width="0.7457%" height="15" fill="rgb(221,193,43)" fg:x="31508" fg:w="373"/><text x="63.2433%" y="111.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (8 samples, 0.02%)</title><rect x="63.7231%" y="85" width="0.0160%" height="15" fill="rgb(240,128,52)" fg:x="31873" fg:w="8"/><text x="63.9731%" y="95.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (101 samples, 0.20%)</title><rect x="63.7391%" y="101" width="0.2019%" height="15" fill="rgb(253,114,12)" fg:x="31881" fg:w="101"/><text x="63.9891%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (125 samples, 0.25%)</title><rect x="64.0609%" y="85" width="0.2499%" height="15" fill="rgb(215,223,47)" fg:x="32042" fg:w="125"/><text x="64.3109%" y="95.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (294 samples, 0.59%)</title><rect x="64.3108%" y="85" width="0.5878%" height="15" fill="rgb(248,225,23)" fg:x="32167" fg:w="294"/><text x="64.5608%" y="95.50"></text></g><g><title>natto::core::board::Board::process_pieces (34 samples, 0.07%)</title><rect x="64.8986%" y="85" width="0.0680%" height="15" fill="rgb(250,108,0)" fg:x="32461" fg:w="34"/><text x="65.1486%" y="95.50"></text></g><g><title>natto::core::position::Position::get_board_hash::_{{closure}} (3,112 samples, 6.22%)</title><rect x="64.9666%" y="85" width="6.2218%" height="15" fill="rgb(228,208,7)" fg:x="32495" fg:w="3112"/><text x="65.2166%" y="95.50">natto::c..</text></g><g><title>natto::util::util::process_bits (1,398 samples, 2.79%)</title><rect x="71.1884%" y="85" width="2.7950%" height="15" fill="rgb(244,45,10)" fg:x="35607" fg:w="1398"/><text x="71.4384%" y="95.50">na..</text></g><g><title>natto::core::position::Position::get_board_hash (6,279 samples, 12.55%)</title><rect x="63.9410%" y="101" width="12.5535%" height="15" fill="rgb(207,125,25)" fg:x="31982" fg:w="6279"/><text x="64.1910%" y="111.50">natto::core::positi..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1,256 samples, 2.51%)</title><rect x="73.9834%" y="85" width="2.5111%" height="15" fill="rgb(210,195,18)" fg:x="37005" fg:w="1256"/><text x="74.2334%" y="95.50">on..</text></g><g><title>natto::core::position::Position::update_hash_code (8,142 samples, 16.28%)</title><rect x="60.4942%" y="117" width="16.2781%" height="15" fill="rgb(249,80,12)" fg:x="30258" fg:w="8142"/><text x="60.7442%" y="127.50">natto::core::position::Po..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (137 samples, 0.27%)</title><rect x="76.4985%" y="101" width="0.2739%" height="15" fill="rgb(221,65,9)" fg:x="38263" fg:w="137"/><text x="76.7485%" y="111.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (237 samples, 0.47%)</title><rect x="76.7724%" y="117" width="0.4738%" height="15" fill="rgb(235,49,36)" fg:x="38400" fg:w="237"/><text x="77.0224%" y="127.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (23,300 samples, 46.58%)</title><rect x="30.8629%" y="133" width="46.5832%" height="15" fill="rgb(225,32,20)" fg:x="15437" fg:w="23300"/><text x="31.1129%" y="143.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (100 samples, 0.20%)</title><rect x="77.2462%" y="117" width="0.1999%" height="15" fill="rgb(215,141,46)" fg:x="38637" fg:w="100"/><text x="77.4962%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="77.4701%" y="117" width="0.0140%" height="15" fill="rgb(250,160,47)" fg:x="38749" fg:w="7"/><text x="77.7201%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (999 samples, 2.00%)</title><rect x="77.4901%" y="101" width="1.9973%" height="15" fill="rgb(216,222,40)" fg:x="38759" fg:w="999"/><text x="77.7401%" y="111.50">&lt;..</text></g><g><title>_platform_memmove (985 samples, 1.97%)</title><rect x="77.5181%" y="85" width="1.9693%" height="15" fill="rgb(234,217,39)" fg:x="38773" fg:w="985"/><text x="77.7681%" y="95.50">_..</text></g><g><title>&lt;arrayvec::arrayvec::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.05%)</title><rect x="79.4874%" y="101" width="0.0520%" height="15" fill="rgb(207,178,40)" fg:x="39758" fg:w="26"/><text x="79.7374%" y="111.50"></text></g><g><title>_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="79.5554%" y="85" width="0.0240%" height="15" fill="rgb(221,136,13)" fg:x="39792" fg:w="12"/><text x="79.8054%" y="95.50"></text></g><g><title>small_malloc_should_clear (7 samples, 0.01%)</title><rect x="79.5794%" y="85" width="0.0140%" height="15" fill="rgb(249,199,10)" fg:x="39804" fg:w="7"/><text x="79.8294%" y="95.50"></text></g><g><title>small_malloc_should_clear (20 samples, 0.04%)</title><rect x="79.6153%" y="69" width="0.0400%" height="15" fill="rgb(249,222,13)" fg:x="39822" fg:w="20"/><text x="79.8653%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (6 samples, 0.01%)</title><rect x="79.6553%" y="69" width="0.0120%" height="15" fill="rgb(244,185,38)" fg:x="39842" fg:w="6"/><text x="79.9053%" y="79.50"></text></g><g><title>alloc::alloc::alloc (123 samples, 0.25%)</title><rect x="79.5394%" y="101" width="0.2459%" height="15" fill="rgb(236,202,9)" fg:x="39784" fg:w="123"/><text x="79.7894%" y="111.50"></text></g><g><title>szone_malloc_should_clear (96 samples, 0.19%)</title><rect x="79.5933%" y="85" width="0.1919%" height="15" fill="rgb(250,229,37)" fg:x="39811" fg:w="96"/><text x="79.8433%" y="95.50"></text></g><g><title>tiny_malloc_should_clear (59 samples, 0.12%)</title><rect x="79.6673%" y="69" width="0.1180%" height="15" fill="rgb(206,174,23)" fg:x="39848" fg:w="59"/><text x="79.9173%" y="79.50"></text></g><g><title>tiny_malloc_from_free_list (46 samples, 0.09%)</title><rect x="79.6933%" y="53" width="0.0920%" height="15" fill="rgb(211,33,43)" fg:x="39861" fg:w="46"/><text x="79.9433%" y="63.50"></text></g><g><title>tiny_free_list_add_ptr (10 samples, 0.02%)</title><rect x="79.7653%" y="37" width="0.0200%" height="15" fill="rgb(245,58,50)" fg:x="39897" fg:w="10"/><text x="80.0153%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (128 samples, 0.26%)</title><rect x="79.7853%" y="101" width="0.2559%" height="15" fill="rgb(244,68,36)" fg:x="39907" fg:w="128"/><text x="80.0353%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (13 samples, 0.03%)</title><rect x="80.0432%" y="101" width="0.0260%" height="15" fill="rgb(232,229,15)" fg:x="40036" fg:w="13"/><text x="80.2932%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (129 samples, 0.26%)</title><rect x="80.0692%" y="101" width="0.2579%" height="15" fill="rgb(254,30,23)" fg:x="40049" fg:w="129"/><text x="80.3192%" y="111.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (6 samples, 0.01%)</title><rect x="80.3371%" y="101" width="0.0120%" height="15" fill="rgb(235,160,14)" fg:x="40183" fg:w="6"/><text x="80.5871%" y="111.50"></text></g><g><title>core::ptr::read (76 samples, 0.15%)</title><rect x="80.3491%" y="101" width="0.1519%" height="15" fill="rgb(212,155,44)" fg:x="40189" fg:w="76"/><text x="80.5991%" y="111.50"></text></g><g><title>core::ptr::write (155 samples, 0.31%)</title><rect x="80.5010%" y="101" width="0.3099%" height="15" fill="rgb(226,2,50)" fg:x="40265" fg:w="155"/><text x="80.7510%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,673 samples, 3.34%)</title><rect x="77.4841%" y="117" width="3.3448%" height="15" fill="rgb(234,177,6)" fg:x="38756" fg:w="1673"/><text x="77.7341%" y="127.50">&lt;al..</text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (925 samples, 1.85%)</title><rect x="80.8349%" y="117" width="1.8493%" height="15" fill="rgb(217,24,9)" fg:x="40432" fg:w="925"/><text x="81.0849%" y="127.50">&lt;..</text></g><g><title>_platform_memmove (916 samples, 1.83%)</title><rect x="80.8529%" y="101" width="1.8313%" height="15" fill="rgb(220,13,46)" fg:x="40441" fg:w="916"/><text x="81.1029%" y="111.50">_..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (10 samples, 0.02%)</title><rect x="82.6842%" y="117" width="0.0200%" height="15" fill="rgb(239,221,27)" fg:x="41357" fg:w="10"/><text x="82.9342%" y="127.50"></text></g><g><title>&lt;natto::core::move::Move as core::clone::Clone&gt;::clone (140 samples, 0.28%)</title><rect x="82.7162%" y="117" width="0.2799%" height="15" fill="rgb(222,198,25)" fg:x="41373" fg:w="140"/><text x="82.9662%" y="127.50"></text></g><g><title>DYLD-STUB$$memcpy (6 samples, 0.01%)</title><rect x="82.9961%" y="101" width="0.0120%" height="15" fill="rgb(211,99,13)" fg:x="41513" fg:w="6"/><text x="83.2461%" y="111.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (856 samples, 1.71%)</title><rect x="82.9961%" y="117" width="1.7114%" height="15" fill="rgb(232,111,31)" fg:x="41513" fg:w="856"/><text x="83.2461%" y="127.50"></text></g><g><title>_platform_memmove (850 samples, 1.70%)</title><rect x="83.0081%" y="101" width="1.6994%" height="15" fill="rgb(245,82,37)" fg:x="41519" fg:w="850"/><text x="83.2581%" y="111.50"></text></g><g><title>_nanov2_free (6 samples, 0.01%)</title><rect x="84.7075%" y="117" width="0.0120%" height="15" fill="rgb(227,149,46)" fg:x="42369" fg:w="6"/><text x="84.9575%" y="127.50"></text></g><g><title>_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="84.7375%" y="101" width="0.0220%" height="15" fill="rgb(218,36,50)" fg:x="42384" fg:w="11"/><text x="84.9875%" y="111.50"></text></g><g><title>small_free_list_add_ptr (9 samples, 0.02%)</title><rect x="84.8834%" y="53" width="0.0180%" height="15" fill="rgb(226,80,48)" fg:x="42457" fg:w="9"/><text x="85.1334%" y="63.50"></text></g><g><title>small_malloc_should_clear (59 samples, 0.12%)</title><rect x="84.8015%" y="85" width="0.1180%" height="15" fill="rgb(238,224,15)" fg:x="42416" fg:w="59"/><text x="85.0515%" y="95.50"></text></g><g><title>small_malloc_from_free_list (48 samples, 0.10%)</title><rect x="84.8235%" y="69" width="0.0960%" height="15" fill="rgb(241,136,10)" fg:x="42427" fg:w="48"/><text x="85.0735%" y="79.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (6 samples, 0.01%)</title><rect x="84.9074%" y="53" width="0.0120%" height="15" fill="rgb(208,32,45)" fg:x="42469" fg:w="6"/><text x="85.1574%" y="63.50"></text></g><g><title>tiny_malloc_from_free_list (11 samples, 0.02%)</title><rect x="84.9194%" y="85" width="0.0220%" height="15" fill="rgb(207,135,9)" fg:x="42475" fg:w="11"/><text x="85.1694%" y="95.50"></text></g><g><title>szone_malloc_should_clear (166 samples, 0.33%)</title><rect x="84.7735%" y="101" width="0.3319%" height="15" fill="rgb(206,86,44)" fg:x="42402" fg:w="166"/><text x="85.0235%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (82 samples, 0.16%)</title><rect x="84.9414%" y="85" width="0.1639%" height="15" fill="rgb(245,177,15)" fg:x="42486" fg:w="82"/><text x="85.1914%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (72 samples, 0.14%)</title><rect x="84.9614%" y="69" width="0.1439%" height="15" fill="rgb(206,64,50)" fg:x="42496" fg:w="72"/><text x="85.2114%" y="79.50"></text></g><g><title>alloc::alloc::alloc (192 samples, 0.38%)</title><rect x="84.7255%" y="117" width="0.3839%" height="15" fill="rgb(234,36,40)" fg:x="42378" fg:w="192"/><text x="84.9755%" y="127.50"></text></g><g><title>DYLD-STUB$$free (6 samples, 0.01%)</title><rect x="85.1094%" y="101" width="0.0120%" height="15" fill="rgb(213,64,8)" fg:x="42570" fg:w="6"/><text x="85.3594%" y="111.50"></text></g><g><title>_free (11 samples, 0.02%)</title><rect x="85.1214%" y="101" width="0.0220%" height="15" fill="rgb(210,75,36)" fg:x="42576" fg:w="11"/><text x="85.3714%" y="111.50"></text></g><g><title>_nanov2_free (15 samples, 0.03%)</title><rect x="85.1433%" y="101" width="0.0300%" height="15" fill="rgb(229,88,21)" fg:x="42587" fg:w="15"/><text x="85.3933%" y="111.50"></text></g><g><title>_szone_free (17 samples, 0.03%)</title><rect x="85.1733%" y="101" width="0.0340%" height="15" fill="rgb(252,204,47)" fg:x="42602" fg:w="17"/><text x="85.4233%" y="111.50"></text></g><g><title>free_small (141 samples, 0.28%)</title><rect x="85.2073%" y="101" width="0.2819%" height="15" fill="rgb(208,77,27)" fg:x="42619" fg:w="141"/><text x="85.4573%" y="111.50"></text></g><g><title>_platform_memset (21 samples, 0.04%)</title><rect x="85.5512%" y="85" width="0.0420%" height="15" fill="rgb(221,76,26)" fg:x="42791" fg:w="21"/><text x="85.8012%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (16 samples, 0.03%)</title><rect x="85.5932%" y="85" width="0.0320%" height="15" fill="rgb(225,139,18)" fg:x="42812" fg:w="16"/><text x="85.8432%" y="95.50"></text></g><g><title>get_tiny_previous_free_msize (13 samples, 0.03%)</title><rect x="86.0510%" y="69" width="0.0260%" height="15" fill="rgb(230,137,11)" fg:x="43041" fg:w="13"/><text x="86.3010%" y="79.50"></text></g><g><title>tiny_free_list_add_ptr (73 samples, 0.15%)</title><rect x="86.0770%" y="69" width="0.1459%" height="15" fill="rgb(212,28,1)" fg:x="43054" fg:w="73"/><text x="86.3270%" y="79.50"></text></g><g><title>free_tiny (409 samples, 0.82%)</title><rect x="85.4892%" y="101" width="0.8177%" height="15" fill="rgb(248,164,17)" fg:x="42760" fg:w="409"/><text x="85.7392%" y="111.50"></text></g><g><title>tiny_free_no_lock (341 samples, 0.68%)</title><rect x="85.6252%" y="85" width="0.6818%" height="15" fill="rgb(222,171,42)" fg:x="42828" fg:w="341"/><text x="85.8752%" y="95.50"></text></g><g><title>tiny_free_list_remove_ptr (42 samples, 0.08%)</title><rect x="86.2230%" y="69" width="0.0840%" height="15" fill="rgb(243,84,45)" fg:x="43127" fg:w="42"/><text x="86.4730%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (614 samples, 1.23%)</title><rect x="85.1094%" y="117" width="1.2276%" height="15" fill="rgb(252,49,23)" fg:x="42570" fg:w="614"/><text x="85.3594%" y="127.50"></text></g><g><title>tiny_free_no_lock (15 samples, 0.03%)</title><rect x="86.3069%" y="101" width="0.0300%" height="15" fill="rgb(215,19,7)" fg:x="43169" fg:w="15"/><text x="86.5569%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::extend_from_iter (25 samples, 0.05%)</title><rect x="86.3409%" y="117" width="0.0500%" height="15" fill="rgb(238,81,41)" fg:x="43186" fg:w="25"/><text x="86.5909%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (7 samples, 0.01%)</title><rect x="86.3909%" y="117" width="0.0140%" height="15" fill="rgb(210,199,37)" fg:x="43211" fg:w="7"/><text x="86.6409%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::truncate (6 samples, 0.01%)</title><rect x="86.4049%" y="117" width="0.0120%" height="15" fill="rgb(244,192,49)" fg:x="43218" fg:w="6"/><text x="86.6549%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (77 samples, 0.15%)</title><rect x="86.4189%" y="117" width="0.1539%" height="15" fill="rgb(226,211,11)" fg:x="43225" fg:w="77"/><text x="86.6689%" y="127.50"></text></g><g><title>_platform_memmove (75 samples, 0.15%)</title><rect x="86.4229%" y="101" width="0.1499%" height="15" fill="rgb(236,162,54)" fg:x="43227" fg:w="75"/><text x="86.6729%" y="111.50"></text></g><g><title>core::ptr::write (138 samples, 0.28%)</title><rect x="86.5828%" y="117" width="0.2759%" height="15" fill="rgb(220,229,9)" fg:x="43307" fg:w="138"/><text x="86.8328%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::new (8 samples, 0.02%)</title><rect x="86.8767%" y="117" width="0.0160%" height="15" fill="rgb(250,87,22)" fg:x="43454" fg:w="8"/><text x="87.1267%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (47 samples, 0.09%)</title><rect x="86.9287%" y="101" width="0.0940%" height="15" fill="rgb(239,43,17)" fg:x="43480" fg:w="47"/><text x="87.1787%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (29 samples, 0.06%)</title><rect x="86.9647%" y="85" width="0.0580%" height="15" fill="rgb(231,177,25)" fg:x="43498" fg:w="29"/><text x="87.2147%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (18 samples, 0.04%)</title><rect x="87.0227%" y="101" width="0.0360%" height="15" fill="rgb(219,179,1)" fg:x="43527" fg:w="18"/><text x="87.2727%" y="111.50"></text></g><g><title>&lt;natto::core::board::BoardSideIter as core::iter::traits::iterator::Iterator&gt;::nth (6 samples, 0.01%)</title><rect x="87.0667%" y="85" width="0.0120%" height="15" fill="rgb(238,219,53)" fg:x="43549" fg:w="6"/><text x="87.3167%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.02%)</title><rect x="87.0787%" y="85" width="0.0200%" height="15" fill="rgb(232,167,36)" fg:x="43555" fg:w="10"/><text x="87.3287%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.07%)</title><rect x="87.0587%" y="101" width="0.0660%" height="15" fill="rgb(244,19,51)" fg:x="43545" fg:w="33"/><text x="87.3087%" y="111.50"></text></g><g><title>natto::core::position::Position::can_castle (9 samples, 0.02%)</title><rect x="87.1066%" y="85" width="0.0180%" height="15" fill="rgb(224,6,22)" fg:x="43569" fg:w="9"/><text x="87.3566%" y="95.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="87.1246%" y="101" width="0.0240%" height="15" fill="rgb(224,145,5)" fg:x="43578" fg:w="12"/><text x="87.3746%" y="111.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (36 samples, 0.07%)</title><rect x="87.1486%" y="101" width="0.0720%" height="15" fill="rgb(234,130,49)" fg:x="43590" fg:w="36"/><text x="87.3986%" y="111.50"></text></g><g><title>&lt;natto::util::bitboard_iterator::BitboardIterator as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="87.2206%" y="101" width="0.0220%" height="15" fill="rgb(254,6,2)" fg:x="43626" fg:w="11"/><text x="87.4706%" y="111.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (26 samples, 0.05%)</title><rect x="87.2486%" y="101" width="0.0520%" height="15" fill="rgb(208,96,46)" fg:x="43640" fg:w="26"/><text x="87.4986%" y="111.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (9 samples, 0.02%)</title><rect x="87.3006%" y="101" width="0.0180%" height="15" fill="rgb(239,3,39)" fg:x="43666" fg:w="9"/><text x="87.5506%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (36 samples, 0.07%)</title><rect x="87.3206%" y="101" width="0.0720%" height="15" fill="rgb(233,210,1)" fg:x="43676" fg:w="36"/><text x="87.5706%" y="111.50"></text></g><g><title>core::ptr::read (38 samples, 0.08%)</title><rect x="87.4005%" y="101" width="0.0760%" height="15" fill="rgb(244,137,37)" fg:x="43716" fg:w="38"/><text x="87.6505%" y="111.50"></text></g><g><title>core::ptr::write (9 samples, 0.02%)</title><rect x="87.4765%" y="101" width="0.0180%" height="15" fill="rgb(240,136,2)" fg:x="43754" fg:w="9"/><text x="87.7265%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.02%)</title><rect x="87.4945%" y="101" width="0.0160%" height="15" fill="rgb(239,18,37)" fg:x="43763" fg:w="8"/><text x="87.7445%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (36 samples, 0.07%)</title><rect x="87.5105%" y="85" width="0.0720%" height="15" fill="rgb(218,185,22)" fg:x="43771" fg:w="36"/><text x="87.7605%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (41 samples, 0.08%)</title><rect x="87.5905%" y="85" width="0.0820%" height="15" fill="rgb(225,218,4)" fg:x="43811" fg:w="41"/><text x="87.8405%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (120 samples, 0.24%)</title><rect x="87.6724%" y="85" width="0.2399%" height="15" fill="rgb(230,182,32)" fg:x="43852" fg:w="120"/><text x="87.9224%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (120 samples, 0.24%)</title><rect x="87.6724%" y="69" width="0.2399%" height="15" fill="rgb(242,56,43)" fg:x="43852" fg:w="120"/><text x="87.9224%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (83 samples, 0.17%)</title><rect x="87.9183%" y="85" width="0.1659%" height="15" fill="rgb(233,99,24)" fg:x="43975" fg:w="83"/><text x="88.1683%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 0.02%)</title><rect x="88.0943%" y="85" width="0.0180%" height="15" fill="rgb(234,209,42)" fg:x="44063" fg:w="9"/><text x="88.3443%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (10 samples, 0.02%)</title><rect x="88.1123%" y="85" width="0.0200%" height="15" fill="rgb(227,7,12)" fg:x="44072" fg:w="10"/><text x="88.3623%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (352 samples, 0.70%)</title><rect x="87.5105%" y="101" width="0.7037%" height="15" fill="rgb(245,203,43)" fg:x="43771" fg:w="352"/><text x="87.7605%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (41 samples, 0.08%)</title><rect x="88.1323%" y="85" width="0.0820%" height="15" fill="rgb(238,205,33)" fg:x="44082" fg:w="41"/><text x="88.3823%" y="95.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (73 samples, 0.15%)</title><rect x="88.3022%" y="85" width="0.1459%" height="15" fill="rgb(231,56,7)" fg:x="44167" fg:w="73"/><text x="88.5522%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (39 samples, 0.08%)</title><rect x="88.3702%" y="69" width="0.0780%" height="15" fill="rgb(244,186,29)" fg:x="44201" fg:w="39"/><text x="88.6202%" y="79.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (6 samples, 0.01%)</title><rect x="88.4482%" y="85" width="0.0120%" height="15" fill="rgb(234,111,31)" fg:x="44240" fg:w="6"/><text x="88.6982%" y="95.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (31 samples, 0.06%)</title><rect x="88.4602%" y="85" width="0.0620%" height="15" fill="rgb(241,149,10)" fg:x="44246" fg:w="31"/><text x="88.7102%" y="95.50"></text></g><g><title>&lt;natto::util::bitboard_iterator::BitboardIterator as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.03%)</title><rect x="88.5221%" y="85" width="0.0260%" height="15" fill="rgb(249,206,44)" fg:x="44277" fg:w="13"/><text x="88.7721%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (64 samples, 0.13%)</title><rect x="88.5481%" y="85" width="0.1280%" height="15" fill="rgb(251,153,30)" fg:x="44290" fg:w="64"/><text x="88.7981%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.01%)</title><rect x="88.6761%" y="85" width="0.0140%" height="15" fill="rgb(239,152,38)" fg:x="44354" fg:w="7"/><text x="88.9261%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (65 samples, 0.13%)</title><rect x="88.6961%" y="85" width="0.1300%" height="15" fill="rgb(249,139,47)" fg:x="44364" fg:w="65"/><text x="88.9461%" y="95.50"></text></g><g><title>core::ptr::write (21 samples, 0.04%)</title><rect x="88.8280%" y="85" width="0.0420%" height="15" fill="rgb(244,64,35)" fg:x="44430" fg:w="21"/><text x="89.0780%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (41 samples, 0.08%)</title><rect x="88.8940%" y="69" width="0.0820%" height="15" fill="rgb(216,46,15)" fg:x="44463" fg:w="41"/><text x="89.1440%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41 samples, 0.08%)</title><rect x="88.8940%" y="53" width="0.0820%" height="15" fill="rgb(250,74,19)" fg:x="44463" fg:w="41"/><text x="89.1440%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31 samples, 0.06%)</title><rect x="88.9820%" y="69" width="0.0620%" height="15" fill="rgb(249,42,33)" fg:x="44507" fg:w="31"/><text x="89.2320%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (12 samples, 0.02%)</title><rect x="89.0479%" y="69" width="0.0240%" height="15" fill="rgb(242,149,17)" fg:x="44540" fg:w="12"/><text x="89.2979%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (99 samples, 0.20%)</title><rect x="88.8800%" y="85" width="0.1979%" height="15" fill="rgb(244,29,21)" fg:x="44456" fg:w="99"/><text x="89.1300%" y="95.50"></text></g><g><title>natto::core::move::BaseMove::new (69 samples, 0.14%)</title><rect x="89.0779%" y="85" width="0.1380%" height="15" fill="rgb(220,130,37)" fg:x="44555" fg:w="69"/><text x="89.3279%" y="95.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (111 samples, 0.22%)</title><rect x="89.2179%" y="85" width="0.2219%" height="15" fill="rgb(211,67,2)" fg:x="44625" fg:w="111"/><text x="89.4679%" y="95.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (6 samples, 0.01%)</title><rect x="89.4398%" y="85" width="0.0120%" height="15" fill="rgb(235,68,52)" fg:x="44736" fg:w="6"/><text x="89.6898%" y="95.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (324 samples, 0.65%)</title><rect x="89.5178%" y="69" width="0.6478%" height="15" fill="rgb(246,142,3)" fg:x="44775" fg:w="324"/><text x="89.7678%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (19 samples, 0.04%)</title><rect x="90.1715%" y="69" width="0.0380%" height="15" fill="rgb(241,25,7)" fg:x="45102" fg:w="19"/><text x="90.4215%" y="79.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.03%)</title><rect x="90.2095%" y="69" width="0.0300%" height="15" fill="rgb(242,119,39)" fg:x="45121" fg:w="15"/><text x="90.4595%" y="79.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (17 samples, 0.03%)</title><rect x="90.2395%" y="69" width="0.0340%" height="15" fill="rgb(241,98,45)" fg:x="45136" fg:w="17"/><text x="90.4895%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (23 samples, 0.05%)</title><rect x="90.2735%" y="69" width="0.0460%" height="15" fill="rgb(254,28,30)" fg:x="45153" fg:w="23"/><text x="90.5235%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.03%)</title><rect x="90.3515%" y="53" width="0.0300%" height="15" fill="rgb(241,142,54)" fg:x="45192" fg:w="15"/><text x="90.6015%" y="63.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (77 samples, 0.15%)</title><rect x="90.3815%" y="53" width="0.1539%" height="15" fill="rgb(222,85,15)" fg:x="45207" fg:w="77"/><text x="90.6315%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (77 samples, 0.15%)</title><rect x="90.3815%" y="37" width="0.1539%" height="15" fill="rgb(210,85,47)" fg:x="45207" fg:w="77"/><text x="90.6315%" y="47.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (8 samples, 0.02%)</title><rect x="90.5354%" y="53" width="0.0160%" height="15" fill="rgb(224,206,25)" fg:x="45284" fg:w="8"/><text x="90.7854%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (78 samples, 0.16%)</title><rect x="90.5514%" y="53" width="0.1559%" height="15" fill="rgb(243,201,19)" fg:x="45292" fg:w="78"/><text x="90.8014%" y="63.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.01%)</title><rect x="90.7073%" y="53" width="0.0140%" height="15" fill="rgb(236,59,4)" fg:x="45370" fg:w="7"/><text x="90.9573%" y="63.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (14 samples, 0.03%)</title><rect x="90.7233%" y="53" width="0.0280%" height="15" fill="rgb(254,179,45)" fg:x="45378" fg:w="14"/><text x="90.9733%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (221 samples, 0.44%)</title><rect x="90.3355%" y="69" width="0.4418%" height="15" fill="rgb(226,14,10)" fg:x="45184" fg:w="221"/><text x="90.5855%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (13 samples, 0.03%)</title><rect x="90.7513%" y="53" width="0.0260%" height="15" fill="rgb(244,27,41)" fg:x="45392" fg:w="13"/><text x="91.0013%" y="63.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (21 samples, 0.04%)</title><rect x="90.7893%" y="69" width="0.0420%" height="15" fill="rgb(235,35,32)" fg:x="45411" fg:w="21"/><text x="91.0393%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (705 samples, 1.41%)</title><rect x="89.4518%" y="85" width="1.4095%" height="15" fill="rgb(218,68,31)" fg:x="44742" fg:w="705"/><text x="89.7018%" y="95.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (15 samples, 0.03%)</title><rect x="90.8313%" y="69" width="0.0300%" height="15" fill="rgb(207,120,37)" fg:x="45432" fg:w="15"/><text x="91.0813%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (11 samples, 0.02%)</title><rect x="90.8613%" y="85" width="0.0220%" height="15" fill="rgb(227,98,0)" fg:x="45447" fg:w="11"/><text x="91.1113%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate_moves_for_piece_type (1,325 samples, 2.65%)</title><rect x="88.2422%" y="101" width="2.6490%" height="15" fill="rgb(207,7,3)" fg:x="44137" fg:w="1325"/><text x="88.4922%" y="111.50">na..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (6 samples, 0.01%)</title><rect x="90.8913%" y="85" width="0.0120%" height="15" fill="rgb(206,98,19)" fg:x="45462" fg:w="6"/><text x="91.1413%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (7 samples, 0.01%)</title><rect x="90.9333%" y="85" width="0.0140%" height="15" fill="rgb(217,5,26)" fg:x="45483" fg:w="7"/><text x="91.1833%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (35 samples, 0.07%)</title><rect x="90.9593%" y="69" width="0.0700%" height="15" fill="rgb(235,190,38)" fg:x="45496" fg:w="35"/><text x="91.2093%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 0.07%)</title><rect x="90.9593%" y="53" width="0.0700%" height="15" fill="rgb(247,86,24)" fg:x="45496" fg:w="35"/><text x="91.2093%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.02%)</title><rect x="91.0332%" y="69" width="0.0180%" height="15" fill="rgb(205,101,16)" fg:x="45533" fg:w="9"/><text x="91.2832%" y="79.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (18 samples, 0.04%)</title><rect x="91.0512%" y="69" width="0.0360%" height="15" fill="rgb(246,168,33)" fg:x="45542" fg:w="18"/><text x="91.3012%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (71 samples, 0.14%)</title><rect x="90.9573%" y="85" width="0.1419%" height="15" fill="rgb(231,114,1)" fg:x="45495" fg:w="71"/><text x="91.2073%" y="95.50"></text></g><g><title>natto::core::move::BaseMove::new (14 samples, 0.03%)</title><rect x="91.0992%" y="85" width="0.0280%" height="15" fill="rgb(207,184,53)" fg:x="45566" fg:w="14"/><text x="91.3492%" y="95.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (26 samples, 0.05%)</title><rect x="91.1272%" y="85" width="0.0520%" height="15" fill="rgb(224,95,51)" fg:x="45580" fg:w="26"/><text x="91.3772%" y="95.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (6 samples, 0.01%)</title><rect x="91.1792%" y="85" width="0.0120%" height="15" fill="rgb(212,188,45)" fg:x="45606" fg:w="6"/><text x="91.4292%" y="95.50"></text></g><g><title>natto::core::move_gen::generate_king_moves (152 samples, 0.30%)</title><rect x="90.8913%" y="101" width="0.3039%" height="15" fill="rgb(223,154,38)" fg:x="45462" fg:w="152"/><text x="91.1413%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_pawn_moves (80 samples, 0.16%)</title><rect x="91.1952%" y="101" width="0.1599%" height="15" fill="rgb(251,22,52)" fg:x="45614" fg:w="80"/><text x="91.4452%" y="111.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (7 samples, 0.01%)</title><rect x="91.3611%" y="101" width="0.0140%" height="15" fill="rgb(229,209,22)" fg:x="45697" fg:w="7"/><text x="91.6111%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (17 samples, 0.03%)</title><rect x="91.3751%" y="101" width="0.0340%" height="15" fill="rgb(234,138,34)" fg:x="45704" fg:w="17"/><text x="91.6251%" y="111.50"></text></g><g><title>natto::core::position::Position::side_to_move (10 samples, 0.02%)</title><rect x="91.4091%" y="101" width="0.0200%" height="15" fill="rgb(212,95,11)" fg:x="45721" fg:w="10"/><text x="91.6591%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves (2,281 samples, 4.56%)</title><rect x="86.8927%" y="117" width="4.5604%" height="15" fill="rgb(240,179,47)" fg:x="43462" fg:w="2281"/><text x="87.1427%" y="127.50">natto..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (12 samples, 0.02%)</title><rect x="91.4291%" y="101" width="0.0240%" height="15" fill="rgb(240,163,11)" fg:x="45731" fg:w="12"/><text x="91.6791%" y="111.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (7,008 samples, 14.01%)</title><rect x="77.4461%" y="133" width="14.0110%" height="15" fill="rgb(236,37,12)" fg:x="38737" fg:w="7008"/><text x="77.6961%" y="143.50">natto::eval::node_cou..</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (44,267 samples, 88.50%)</title><rect x="3.0749%" y="149" width="88.5021%" height="15" fill="rgb(232,164,16)" fg:x="1538" fg:w="44267"/><text x="3.3249%" y="159.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (60 samples, 0.12%)</title><rect x="91.4571%" y="133" width="0.1200%" height="15" fill="rgb(244,205,15)" fg:x="45745" fg:w="60"/><text x="91.7071%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="91.5870%" y="133" width="0.0120%" height="15" fill="rgb(223,117,47)" fg:x="45810" fg:w="6"/><text x="91.8370%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (588 samples, 1.18%)</title><rect x="91.5990%" y="117" width="1.1756%" height="15" fill="rgb(244,107,35)" fg:x="45816" fg:w="588"/><text x="91.8490%" y="127.50"></text></g><g><title>_platform_memmove (576 samples, 1.15%)</title><rect x="91.6230%" y="101" width="1.1516%" height="15" fill="rgb(205,140,8)" fg:x="45828" fg:w="576"/><text x="91.8730%" y="111.50"></text></g><g><title>&lt;arrayvec::arrayvec::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.03%)</title><rect x="92.7746%" y="117" width="0.0320%" height="15" fill="rgb(228,84,46)" fg:x="46404" fg:w="16"/><text x="93.0246%" y="127.50"></text></g><g><title>_platform_memmove (33 samples, 0.07%)</title><rect x="92.8066%" y="117" width="0.0660%" height="15" fill="rgb(254,188,9)" fg:x="46420" fg:w="33"/><text x="93.0566%" y="127.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="92.8806%" y="101" width="0.0120%" height="15" fill="rgb(206,112,54)" fg:x="46457" fg:w="6"/><text x="93.1306%" y="111.50"></text></g><g><title>small_malloc_should_clear (8 samples, 0.02%)</title><rect x="92.9026%" y="85" width="0.0160%" height="15" fill="rgb(216,84,49)" fg:x="46468" fg:w="8"/><text x="93.1526%" y="95.50"></text></g><g><title>szone_malloc_should_clear (43 samples, 0.09%)</title><rect x="92.8986%" y="101" width="0.0860%" height="15" fill="rgb(214,194,35)" fg:x="46466" fg:w="43"/><text x="93.1486%" y="111.50"></text></g><g><title>tiny_malloc_should_clear (32 samples, 0.06%)</title><rect x="92.9205%" y="85" width="0.0640%" height="15" fill="rgb(249,28,3)" fg:x="46477" fg:w="32"/><text x="93.1705%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (26 samples, 0.05%)</title><rect x="92.9325%" y="69" width="0.0520%" height="15" fill="rgb(222,56,52)" fg:x="46483" fg:w="26"/><text x="93.1825%" y="79.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.12%)</title><rect x="92.8726%" y="117" width="0.1180%" height="15" fill="rgb(245,217,50)" fg:x="46453" fg:w="59"/><text x="93.1226%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (67 samples, 0.13%)</title><rect x="92.9905%" y="117" width="0.1340%" height="15" fill="rgb(213,201,24)" fg:x="46512" fg:w="67"/><text x="93.2405%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6 samples, 0.01%)</title><rect x="93.1265%" y="117" width="0.0120%" height="15" fill="rgb(248,116,28)" fg:x="46580" fg:w="6"/><text x="93.3765%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (68 samples, 0.14%)</title><rect x="93.1385%" y="117" width="0.1360%" height="15" fill="rgb(219,72,43)" fg:x="46586" fg:w="68"/><text x="93.3885%" y="127.50"></text></g><g><title>core::ptr::read (27 samples, 0.05%)</title><rect x="93.2824%" y="117" width="0.0540%" height="15" fill="rgb(209,138,14)" fg:x="46658" fg:w="27"/><text x="93.5324%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (950 samples, 1.90%)</title><rect x="91.5990%" y="133" width="1.8993%" height="15" fill="rgb(222,18,33)" fg:x="45816" fg:w="950"/><text x="91.8490%" y="143.50">&lt;..</text></g><g><title>core::ptr::write (81 samples, 0.16%)</title><rect x="93.3364%" y="117" width="0.1619%" height="15" fill="rgb(213,199,7)" fg:x="46685" fg:w="81"/><text x="93.5864%" y="127.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (488 samples, 0.98%)</title><rect x="93.5043%" y="133" width="0.9756%" height="15" fill="rgb(250,110,10)" fg:x="46769" fg:w="488"/><text x="93.7543%" y="143.50"></text></g><g><title>_platform_memmove (485 samples, 0.97%)</title><rect x="93.5103%" y="117" width="0.9697%" height="15" fill="rgb(248,123,6)" fg:x="46772" fg:w="485"/><text x="93.7603%" y="127.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.02%)</title><rect x="94.4800%" y="133" width="0.0160%" height="15" fill="rgb(206,91,31)" fg:x="47257" fg:w="8"/><text x="94.7300%" y="143.50"></text></g><g><title>&lt;natto::core::move::Move as core::clone::Clone&gt;::clone (66 samples, 0.13%)</title><rect x="94.5000%" y="133" width="0.1320%" height="15" fill="rgb(211,154,13)" fg:x="47267" fg:w="66"/><text x="94.7500%" y="143.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (451 samples, 0.90%)</title><rect x="94.6319%" y="133" width="0.9017%" height="15" fill="rgb(225,148,7)" fg:x="47333" fg:w="451"/><text x="94.8819%" y="143.50"></text></g><g><title>_platform_memmove (449 samples, 0.90%)</title><rect x="94.6359%" y="117" width="0.8977%" height="15" fill="rgb(220,160,43)" fg:x="47335" fg:w="449"/><text x="94.8859%" y="127.50"></text></g><g><title>_nanov2_free (6 samples, 0.01%)</title><rect x="95.5396%" y="133" width="0.0120%" height="15" fill="rgb(213,52,39)" fg:x="47787" fg:w="6"/><text x="95.7896%" y="143.50"></text></g><g><title>_platform_memmove (52 samples, 0.10%)</title><rect x="95.5516%" y="133" width="0.1040%" height="15" fill="rgb(243,137,7)" fg:x="47793" fg:w="52"/><text x="95.8016%" y="143.50"></text></g><g><title>small_malloc_should_clear (23 samples, 0.05%)</title><rect x="95.6896%" y="101" width="0.0460%" height="15" fill="rgb(230,79,13)" fg:x="47862" fg:w="23"/><text x="95.9396%" y="111.50"></text></g><g><title>small_malloc_from_free_list (20 samples, 0.04%)</title><rect x="95.6955%" y="85" width="0.0400%" height="15" fill="rgb(247,105,23)" fg:x="47865" fg:w="20"/><text x="95.9455%" y="95.50"></text></g><g><title>szone_malloc_should_clear (78 samples, 0.16%)</title><rect x="95.6676%" y="117" width="0.1559%" height="15" fill="rgb(223,179,41)" fg:x="47851" fg:w="78"/><text x="95.9176%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (39 samples, 0.08%)</title><rect x="95.7455%" y="101" width="0.0780%" height="15" fill="rgb(218,9,34)" fg:x="47890" fg:w="39"/><text x="95.9955%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (27 samples, 0.05%)</title><rect x="95.7695%" y="85" width="0.0540%" height="15" fill="rgb(222,106,8)" fg:x="47902" fg:w="27"/><text x="96.0195%" y="95.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.17%)</title><rect x="95.6576%" y="133" width="0.1679%" height="15" fill="rgb(211,220,0)" fg:x="47846" fg:w="84"/><text x="95.9076%" y="143.50"></text></g><g><title>DYLD-STUB$$free (6 samples, 0.01%)</title><rect x="95.8255%" y="117" width="0.0120%" height="15" fill="rgb(229,52,16)" fg:x="47930" fg:w="6"/><text x="96.0755%" y="127.50"></text></g><g><title>_free (7 samples, 0.01%)</title><rect x="95.8375%" y="117" width="0.0140%" height="15" fill="rgb(212,155,18)" fg:x="47936" fg:w="7"/><text x="96.0875%" y="127.50"></text></g><g><title>_szone_free (17 samples, 0.03%)</title><rect x="95.8535%" y="117" width="0.0340%" height="15" fill="rgb(242,21,14)" fg:x="47944" fg:w="17"/><text x="96.1035%" y="127.50"></text></g><g><title>free_small (75 samples, 0.15%)</title><rect x="95.8875%" y="117" width="0.1499%" height="15" fill="rgb(222,19,48)" fg:x="47961" fg:w="75"/><text x="96.1375%" y="127.50"></text></g><g><title>_platform_memset (8 samples, 0.02%)</title><rect x="96.0594%" y="101" width="0.0160%" height="15" fill="rgb(232,45,27)" fg:x="48047" fg:w="8"/><text x="96.3094%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (10 samples, 0.02%)</title><rect x="96.0754%" y="101" width="0.0200%" height="15" fill="rgb(249,103,42)" fg:x="48055" fg:w="10"/><text x="96.3254%" y="111.50"></text></g><g><title>tiny_free_list_add_ptr (61 samples, 0.12%)</title><rect x="96.2773%" y="85" width="0.1220%" height="15" fill="rgb(246,81,33)" fg:x="48156" fg:w="61"/><text x="96.5273%" y="95.50"></text></g><g><title>free_tiny (197 samples, 0.39%)</title><rect x="96.0374%" y="117" width="0.3939%" height="15" fill="rgb(252,33,42)" fg:x="48036" fg:w="197"/><text x="96.2874%" y="127.50"></text></g><g><title>tiny_free_no_lock (168 samples, 0.34%)</title><rect x="96.0954%" y="101" width="0.3359%" height="15" fill="rgb(209,212,41)" fg:x="48065" fg:w="168"/><text x="96.3454%" y="111.50"></text></g><g><title>tiny_free_list_remove_ptr (16 samples, 0.03%)</title><rect x="96.3993%" y="85" width="0.0320%" height="15" fill="rgb(207,154,6)" fg:x="48217" fg:w="16"/><text x="96.6493%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (314 samples, 0.63%)</title><rect x="95.8255%" y="133" width="0.6278%" height="15" fill="rgb(223,64,47)" fg:x="47930" fg:w="314"/><text x="96.0755%" y="143.50"></text></g><g><title>tiny_free_no_lock (11 samples, 0.02%)</title><rect x="96.4313%" y="117" width="0.0220%" height="15" fill="rgb(211,161,38)" fg:x="48233" fg:w="11"/><text x="96.6813%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::extend_from_iter (19 samples, 0.04%)</title><rect x="96.4553%" y="133" width="0.0380%" height="15" fill="rgb(219,138,40)" fg:x="48245" fg:w="19"/><text x="96.7053%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.09%)</title><rect x="96.5073%" y="133" width="0.0900%" height="15" fill="rgb(241,228,46)" fg:x="48271" fg:w="45"/><text x="96.7573%" y="143.50"></text></g><g><title>_platform_memmove (42 samples, 0.08%)</title><rect x="96.5133%" y="117" width="0.0840%" height="15" fill="rgb(223,209,38)" fg:x="48274" fg:w="42"/><text x="96.7633%" y="127.50"></text></g><g><title>core::ptr::write (74 samples, 0.15%)</title><rect x="96.6012%" y="133" width="0.1479%" height="15" fill="rgb(236,164,45)" fg:x="48318" fg:w="74"/><text x="96.8512%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (32 samples, 0.06%)</title><rect x="96.7812%" y="117" width="0.0640%" height="15" fill="rgb(231,15,5)" fg:x="48408" fg:w="32"/><text x="97.0312%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (19 samples, 0.04%)</title><rect x="96.8071%" y="101" width="0.0380%" height="15" fill="rgb(252,35,15)" fg:x="48421" fg:w="19"/><text x="97.0571%" y="111.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (10 samples, 0.02%)</title><rect x="96.8451%" y="117" width="0.0200%" height="15" fill="rgb(248,181,18)" fg:x="48440" fg:w="10"/><text x="97.0951%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.01%)</title><rect x="96.8791%" y="101" width="0.0120%" height="15" fill="rgb(233,39,42)" fg:x="48457" fg:w="6"/><text x="97.1291%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.04%)</title><rect x="96.8651%" y="117" width="0.0360%" height="15" fill="rgb(238,110,33)" fg:x="48450" fg:w="18"/><text x="97.1151%" y="127.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (16 samples, 0.03%)</title><rect x="96.9071%" y="117" width="0.0320%" height="15" fill="rgb(233,195,10)" fg:x="48471" fg:w="16"/><text x="97.1571%" y="127.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.02%)</title><rect x="96.9571%" y="117" width="0.0180%" height="15" fill="rgb(254,105,3)" fg:x="48496" fg:w="9"/><text x="97.2071%" y="127.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (6 samples, 0.01%)</title><rect x="96.9751%" y="117" width="0.0120%" height="15" fill="rgb(221,225,9)" fg:x="48505" fg:w="6"/><text x="97.2251%" y="127.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (20 samples, 0.04%)</title><rect x="96.9931%" y="117" width="0.0400%" height="15" fill="rgb(224,227,45)" fg:x="48514" fg:w="20"/><text x="97.2431%" y="127.50"></text></g><g><title>core::ptr::read (18 samples, 0.04%)</title><rect x="97.0571%" y="117" width="0.0360%" height="15" fill="rgb(229,198,43)" fg:x="48546" fg:w="18"/><text x="97.3071%" y="127.50"></text></g><g><title>core::ptr::write (6 samples, 0.01%)</title><rect x="97.0930%" y="117" width="0.0120%" height="15" fill="rgb(206,209,35)" fg:x="48564" fg:w="6"/><text x="97.3430%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.02%)</title><rect x="97.1050%" y="117" width="0.0160%" height="15" fill="rgb(245,195,53)" fg:x="48570" fg:w="8"/><text x="97.3550%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (23 samples, 0.05%)</title><rect x="97.1210%" y="101" width="0.0460%" height="15" fill="rgb(240,92,26)" fg:x="48578" fg:w="23"/><text x="97.3710%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (18 samples, 0.04%)</title><rect x="97.1690%" y="101" width="0.0360%" height="15" fill="rgb(207,40,23)" fg:x="48602" fg:w="18"/><text x="97.4190%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (65 samples, 0.13%)</title><rect x="97.2050%" y="101" width="0.1300%" height="15" fill="rgb(223,111,35)" fg:x="48620" fg:w="65"/><text x="97.4550%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (64 samples, 0.13%)</title><rect x="97.2070%" y="85" width="0.1280%" height="15" fill="rgb(229,147,28)" fg:x="48621" fg:w="64"/><text x="97.4570%" y="95.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (8 samples, 0.02%)</title><rect x="97.3350%" y="101" width="0.0160%" height="15" fill="rgb(211,29,28)" fg:x="48685" fg:w="8"/><text x="97.5850%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (59 samples, 0.12%)</title><rect x="97.3510%" y="101" width="0.1180%" height="15" fill="rgb(228,72,33)" fg:x="48693" fg:w="59"/><text x="97.6010%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (207 samples, 0.41%)</title><rect x="97.1210%" y="117" width="0.4139%" height="15" fill="rgb(205,214,31)" fg:x="48578" fg:w="207"/><text x="97.3710%" y="127.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (24 samples, 0.05%)</title><rect x="97.4869%" y="101" width="0.0480%" height="15" fill="rgb(224,111,15)" fg:x="48761" fg:w="24"/><text x="97.7369%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (35 samples, 0.07%)</title><rect x="97.5849%" y="101" width="0.0700%" height="15" fill="rgb(253,21,26)" fg:x="48810" fg:w="35"/><text x="97.8349%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (13 samples, 0.03%)</title><rect x="97.6289%" y="85" width="0.0260%" height="15" fill="rgb(245,139,43)" fg:x="48832" fg:w="13"/><text x="97.8789%" y="95.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (13 samples, 0.03%)</title><rect x="97.6628%" y="101" width="0.0260%" height="15" fill="rgb(252,170,7)" fg:x="48849" fg:w="13"/><text x="97.9128%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (34 samples, 0.07%)</title><rect x="97.7008%" y="101" width="0.0680%" height="15" fill="rgb(231,118,14)" fg:x="48868" fg:w="34"/><text x="97.9508%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (28 samples, 0.06%)</title><rect x="97.7768%" y="101" width="0.0560%" height="15" fill="rgb(238,83,0)" fg:x="48906" fg:w="28"/><text x="98.0268%" y="111.50"></text></g><g><title>core::ptr::write (15 samples, 0.03%)</title><rect x="97.8328%" y="101" width="0.0300%" height="15" fill="rgb(221,39,39)" fg:x="48934" fg:w="15"/><text x="98.0828%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (19 samples, 0.04%)</title><rect x="97.8728%" y="85" width="0.0380%" height="15" fill="rgb(222,119,46)" fg:x="48954" fg:w="19"/><text x="98.1228%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.04%)</title><rect x="97.8728%" y="69" width="0.0380%" height="15" fill="rgb(222,165,49)" fg:x="48954" fg:w="19"/><text x="98.1228%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.02%)</title><rect x="97.9148%" y="85" width="0.0200%" height="15" fill="rgb(219,113,52)" fg:x="48975" fg:w="10"/><text x="98.1648%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (45 samples, 0.09%)</title><rect x="97.8628%" y="101" width="0.0900%" height="15" fill="rgb(214,7,15)" fg:x="48949" fg:w="45"/><text x="98.1128%" y="111.50"></text></g><g><title>natto::core::move::BaseMove::new (25 samples, 0.05%)</title><rect x="97.9567%" y="101" width="0.0500%" height="15" fill="rgb(235,32,4)" fg:x="48996" fg:w="25"/><text x="98.2067%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (58 samples, 0.12%)</title><rect x="98.0067%" y="101" width="0.1160%" height="15" fill="rgb(238,90,54)" fg:x="49021" fg:w="58"/><text x="98.2567%" y="111.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (166 samples, 0.33%)</title><rect x="98.1647%" y="85" width="0.3319%" height="15" fill="rgb(213,208,19)" fg:x="49100" fg:w="166"/><text x="98.4147%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (6 samples, 0.01%)</title><rect x="98.5045%" y="85" width="0.0120%" height="15" fill="rgb(233,156,4)" fg:x="49270" fg:w="6"/><text x="98.7545%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.01%)</title><rect x="98.5165%" y="85" width="0.0140%" height="15" fill="rgb(207,194,5)" fg:x="49276" fg:w="7"/><text x="98.7665%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (17 samples, 0.03%)</title><rect x="98.5405%" y="85" width="0.0340%" height="15" fill="rgb(206,111,30)" fg:x="49288" fg:w="17"/><text x="98.7905%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.01%)</title><rect x="98.5865%" y="69" width="0.0140%" height="15" fill="rgb(243,70,54)" fg:x="49311" fg:w="7"/><text x="98.8365%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (13 samples, 0.03%)</title><rect x="98.6065%" y="69" width="0.0260%" height="15" fill="rgb(242,28,8)" fg:x="49321" fg:w="13"/><text x="98.8565%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (41 samples, 0.08%)</title><rect x="98.6325%" y="69" width="0.0820%" height="15" fill="rgb(219,106,18)" fg:x="49334" fg:w="41"/><text x="98.8825%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41 samples, 0.08%)</title><rect x="98.6325%" y="53" width="0.0820%" height="15" fill="rgb(244,222,10)" fg:x="49334" fg:w="41"/><text x="98.8825%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 0.06%)</title><rect x="98.7205%" y="69" width="0.0580%" height="15" fill="rgb(236,179,52)" fg:x="49378" fg:w="29"/><text x="98.9705%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (7 samples, 0.01%)</title><rect x="98.7904%" y="69" width="0.0140%" height="15" fill="rgb(213,23,39)" fg:x="49413" fg:w="7"/><text x="99.0404%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (117 samples, 0.23%)</title><rect x="98.5865%" y="85" width="0.2339%" height="15" fill="rgb(238,48,10)" fg:x="49311" fg:w="117"/><text x="98.8365%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (8 samples, 0.02%)</title><rect x="98.8044%" y="69" width="0.0160%" height="15" fill="rgb(251,196,23)" fg:x="49420" fg:w="8"/><text x="99.0544%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (9 samples, 0.02%)</title><rect x="98.8244%" y="85" width="0.0180%" height="15" fill="rgb(250,152,24)" fg:x="49430" fg:w="9"/><text x="99.0744%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (361 samples, 0.72%)</title><rect x="98.1307%" y="101" width="0.7217%" height="15" fill="rgb(209,150,17)" fg:x="49083" fg:w="361"/><text x="98.3807%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (11 samples, 0.02%)</title><rect x="98.8524%" y="101" width="0.0220%" height="15" fill="rgb(234,202,34)" fg:x="49444" fg:w="11"/><text x="99.1024%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate_moves_for_piece_type (662 samples, 1.32%)</title><rect x="97.5529%" y="117" width="1.3235%" height="15" fill="rgb(253,148,53)" fg:x="48794" fg:w="662"/><text x="97.8029%" y="127.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (6 samples, 0.01%)</title><rect x="98.9004%" y="101" width="0.0120%" height="15" fill="rgb(218,129,16)" fg:x="49468" fg:w="6"/><text x="99.1504%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="98.9204%" y="85" width="0.0320%" height="15" fill="rgb(216,85,19)" fg:x="49478" fg:w="16"/><text x="99.1704%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="98.9204%" y="69" width="0.0320%" height="15" fill="rgb(235,228,7)" fg:x="49478" fg:w="16"/><text x="99.1704%" y="79.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.03%)</title><rect x="98.9684%" y="85" width="0.0280%" height="15" fill="rgb(245,175,0)" fg:x="49502" fg:w="14"/><text x="99.2184%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (43 samples, 0.09%)</title><rect x="98.9144%" y="101" width="0.0860%" height="15" fill="rgb(208,168,36)" fg:x="49475" fg:w="43"/><text x="99.1644%" y="111.50"></text></g><g><title>natto::core::move::BaseMove::new (10 samples, 0.02%)</title><rect x="99.0024%" y="101" width="0.0200%" height="15" fill="rgb(246,171,24)" fg:x="49519" fg:w="10"/><text x="99.2524%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (17 samples, 0.03%)</title><rect x="99.0224%" y="101" width="0.0340%" height="15" fill="rgb(215,142,24)" fg:x="49529" fg:w="17"/><text x="99.2724%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_king_moves (96 samples, 0.19%)</title><rect x="98.8764%" y="117" width="0.1919%" height="15" fill="rgb(250,187,7)" fg:x="49456" fg:w="96"/><text x="99.1264%" y="127.50"></text></g><g><title>natto::core::move_gen::generate_pawn_moves (56 samples, 0.11%)</title><rect x="99.0683%" y="117" width="0.1120%" height="15" fill="rgb(228,66,33)" fg:x="49552" fg:w="56"/><text x="99.3183%" y="127.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (8 samples, 0.02%)</title><rect x="99.1843%" y="117" width="0.0160%" height="15" fill="rgb(234,215,21)" fg:x="49610" fg:w="8"/><text x="99.4343%" y="127.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (9 samples, 0.02%)</title><rect x="99.2003%" y="117" width="0.0180%" height="15" fill="rgb(222,191,20)" fg:x="49618" fg:w="9"/><text x="99.4503%" y="127.50"></text></g><g><title>natto::core::move_gen::generate_moves (1,233 samples, 2.47%)</title><rect x="96.7712%" y="133" width="2.4651%" height="15" fill="rgb(245,79,54)" fg:x="48403" fg:w="1233"/><text x="97.0212%" y="143.50">na..</text></g><g><title>natto::eval::node_counter::do_count_nodes (3,835 samples, 7.67%)</title><rect x="91.5770%" y="149" width="7.6672%" height="15" fill="rgb(240,10,37)" fg:x="45805" fg:w="3835"/><text x="91.8270%" y="159.50">natto::eva..</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (49,524 samples, 99.01%)</title><rect x="0.2419%" y="165" width="99.0124%" height="15" fill="rgb(214,192,32)" fg:x="121" fg:w="49524"/><text x="0.4919%" y="175.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (18 samples, 0.04%)</title><rect x="99.2563%" y="133" width="0.0360%" height="15" fill="rgb(209,36,54)" fg:x="49646" fg:w="18"/><text x="99.5063%" y="143.50"></text></g><g><title>_platform_memmove (18 samples, 0.04%)</title><rect x="99.2563%" y="117" width="0.0360%" height="15" fill="rgb(220,10,11)" fg:x="49646" fg:w="18"/><text x="99.5063%" y="127.50"></text></g><g><title>_platform_memmove (29 samples, 0.06%)</title><rect x="99.2923%" y="133" width="0.0580%" height="15" fill="rgb(221,106,17)" fg:x="49664" fg:w="29"/><text x="99.5423%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (6 samples, 0.01%)</title><rect x="99.3602%" y="133" width="0.0120%" height="15" fill="rgb(251,142,44)" fg:x="49698" fg:w="6"/><text x="99.6102%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (7 samples, 0.01%)</title><rect x="99.3722%" y="133" width="0.0140%" height="15" fill="rgb(238,13,15)" fg:x="49704" fg:w="7"/><text x="99.6222%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (71 samples, 0.14%)</title><rect x="99.2563%" y="149" width="0.1419%" height="15" fill="rgb(208,107,27)" fg:x="49646" fg:w="71"/><text x="99.5063%" y="159.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (21 samples, 0.04%)</title><rect x="99.3982%" y="149" width="0.0420%" height="15" fill="rgb(205,136,37)" fg:x="49717" fg:w="21"/><text x="99.6482%" y="159.50"></text></g><g><title>_platform_memmove (21 samples, 0.04%)</title><rect x="99.3982%" y="133" width="0.0420%" height="15" fill="rgb(250,205,27)" fg:x="49717" fg:w="21"/><text x="99.6482%" y="143.50"></text></g><g><title>&lt;natto::core::move::Move as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="99.4422%" y="149" width="0.0140%" height="15" fill="rgb(210,80,43)" fg:x="49739" fg:w="7"/><text x="99.6922%" y="159.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (18 samples, 0.04%)</title><rect x="99.4562%" y="149" width="0.0360%" height="15" fill="rgb(247,160,36)" fg:x="49746" fg:w="18"/><text x="99.7062%" y="159.50"></text></g><g><title>_platform_memmove (18 samples, 0.04%)</title><rect x="99.4562%" y="133" width="0.0360%" height="15" fill="rgb(234,13,49)" fg:x="49746" fg:w="18"/><text x="99.7062%" y="143.50"></text></g><g><title>_platform_memmove (42 samples, 0.08%)</title><rect x="99.4922%" y="149" width="0.0840%" height="15" fill="rgb(234,122,0)" fg:x="49764" fg:w="42"/><text x="99.7422%" y="159.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.01%)</title><rect x="99.5762%" y="149" width="0.0140%" height="15" fill="rgb(207,146,38)" fg:x="49806" fg:w="7"/><text x="99.8262%" y="159.50"></text></g><g><title>szone_malloc_should_clear (6 samples, 0.01%)</title><rect x="99.5782%" y="133" width="0.0120%" height="15" fill="rgb(207,177,25)" fg:x="49807" fg:w="6"/><text x="99.8282%" y="143.50"></text></g><g><title>free_tiny (9 samples, 0.02%)</title><rect x="99.6001%" y="133" width="0.0180%" height="15" fill="rgb(211,178,42)" fg:x="49818" fg:w="9"/><text x="99.8501%" y="143.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.02%)</title><rect x="99.6021%" y="117" width="0.0160%" height="15" fill="rgb(230,69,54)" fg:x="49819" fg:w="8"/><text x="99.8521%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.03%)</title><rect x="99.5901%" y="149" width="0.0340%" height="15" fill="rgb(214,135,41)" fg:x="49813" fg:w="17"/><text x="99.8401%" y="159.50"></text></g><g><title>core::ptr::write (6 samples, 0.01%)</title><rect x="99.6321%" y="149" width="0.0120%" height="15" fill="rgb(237,67,25)" fg:x="49834" fg:w="6"/><text x="99.8821%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.04%)</title><rect x="99.6881%" y="133" width="0.0400%" height="15" fill="rgb(222,189,50)" fg:x="49862" fg:w="20"/><text x="99.9381%" y="143.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (6 samples, 0.01%)</title><rect x="99.7161%" y="117" width="0.0120%" height="15" fill="rgb(245,148,34)" fg:x="49876" fg:w="6"/><text x="99.9661%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (23 samples, 0.05%)</title><rect x="99.7541%" y="101" width="0.0460%" height="15" fill="rgb(222,29,6)" fg:x="49895" fg:w="23"/><text x="100.0041%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.05%)</title><rect x="99.7541%" y="85" width="0.0460%" height="15" fill="rgb(221,189,43)" fg:x="49895" fg:w="23"/><text x="100.0041%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.05%)</title><rect x="99.7541%" y="117" width="0.0500%" height="15" fill="rgb(207,36,27)" fg:x="49895" fg:w="25"/><text x="100.0041%" y="127.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (6 samples, 0.01%)</title><rect x="99.8141%" y="117" width="0.0120%" height="15" fill="rgb(217,90,24)" fg:x="49925" fg:w="6"/><text x="100.0641%" y="127.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (17 samples, 0.03%)</title><rect x="99.8281%" y="101" width="0.0340%" height="15" fill="rgb(224,66,35)" fg:x="49932" fg:w="17"/><text x="100.0781%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.02%)</title><rect x="99.8700%" y="101" width="0.0160%" height="15" fill="rgb(221,13,50)" fg:x="49953" fg:w="8"/><text x="100.1200%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (33 samples, 0.07%)</title><rect x="99.8261%" y="117" width="0.0660%" height="15" fill="rgb(236,68,49)" fg:x="49931" fg:w="33"/><text x="100.0761%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate_moves_for_piece_type (85 samples, 0.17%)</title><rect x="99.7301%" y="133" width="0.1699%" height="15" fill="rgb(229,146,28)" fg:x="49883" fg:w="85"/><text x="99.9801%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="99.9060%" y="101" width="0.0120%" height="15" fill="rgb(225,31,38)" fg:x="49971" fg:w="6"/><text x="100.1560%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="99.9060%" y="85" width="0.0120%" height="15" fill="rgb(250,208,3)" fg:x="49971" fg:w="6"/><text x="100.1560%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.02%)</title><rect x="99.9040%" y="117" width="0.0180%" height="15" fill="rgb(246,54,23)" fg:x="49970" fg:w="9"/><text x="100.1540%" y="127.50"></text></g><g><title>natto::core::move_gen::generate_king_moves (13 samples, 0.03%)</title><rect x="99.9000%" y="133" width="0.0260%" height="15" fill="rgb(243,76,11)" fg:x="49968" fg:w="13"/><text x="100.1500%" y="143.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (49,978 samples, 99.92%)</title><rect x="0.0220%" y="181" width="99.9200%" height="15" fill="rgb(245,21,50)" fg:x="11" fg:w="49978"/><text x="0.2720%" y="191.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes (344 samples, 0.69%)</title><rect x="99.2543%" y="165" width="0.6878%" height="15" fill="rgb(228,9,43)" fg:x="49645" fg:w="344"/><text x="99.5043%" y="175.50"></text></g><g><title>natto::core::move_gen::generate_moves (148 samples, 0.30%)</title><rect x="99.6461%" y="149" width="0.2959%" height="15" fill="rgb(208,100,47)" fg:x="49841" fg:w="148"/><text x="99.8961%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.02%)</title><rect x="99.9420%" y="165" width="0.0160%" height="15" fill="rgb(232,26,8)" fg:x="49989" fg:w="8"/><text x="100.1920%" y="175.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (50,007 samples, 99.98%)</title><rect x="0.0060%" y="197" width="99.9780%" height="15" fill="rgb(216,166,38)" fg:x="3" fg:w="50007"/><text x="0.2560%" y="207.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes (21 samples, 0.04%)</title><rect x="99.9420%" y="181" width="0.0420%" height="15" fill="rgb(251,202,51)" fg:x="49989" fg:w="21"/><text x="100.1920%" y="191.50"></text></g><g><title>natto::core::move_gen::generate_moves (6 samples, 0.01%)</title><rect x="99.9720%" y="165" width="0.0120%" height="15" fill="rgb(254,216,34)" fg:x="50004" fg:w="6"/><text x="100.2220%" y="175.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (50,008 samples, 99.98%)</title><rect x="0.0060%" y="229" width="99.9800%" height="15" fill="rgb(251,32,27)" fg:x="3" fg:w="50008"/><text x="0.2560%" y="239.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (50,008 samples, 99.98%)</title><rect x="0.0060%" y="213" width="99.9800%" height="15" fill="rgb(208,127,28)" fg:x="3" fg:w="50008"/><text x="0.2560%" y="223.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::count_nodes (50,013 samples, 99.99%)</title><rect x="0.0060%" y="245" width="99.9900%" height="15" fill="rgb(224,137,22)" fg:x="3" fg:w="50013"/><text x="0.2560%" y="255.50">natto::eval::node_counter::count_nodes</text></g><g><title>natto::main (50,014 samples, 99.99%)</title><rect x="0.0060%" y="261" width="99.9920%" height="15" fill="rgb(254,70,32)" fg:x="3" fg:w="50014"/><text x="0.2560%" y="271.50">natto::main</text></g><g><title>all (50,018 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(229,75,37)" fg:x="0" fg:w="50018"/><text x="0.2500%" y="367.50"></text></g><g><title>start (50,018 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(252,64,23)" fg:x="0" fg:w="50018"/><text x="0.2500%" y="351.50">start</text></g><g><title>main (50,015 samples, 99.99%)</title><rect x="0.0060%" y="325" width="99.9940%" height="15" fill="rgb(232,162,48)" fg:x="3" fg:w="50015"/><text x="0.2560%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (50,015 samples, 99.99%)</title><rect x="0.0060%" y="309" width="99.9940%" height="15" fill="rgb(246,160,12)" fg:x="3" fg:w="50015"/><text x="0.2560%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (50,015 samples, 99.99%)</title><rect x="0.0060%" y="293" width="99.9940%" height="15" fill="rgb(247,166,0)" fg:x="3" fg:w="50015"/><text x="0.2560%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (50,015 samples, 99.99%)</title><rect x="0.0060%" y="277" width="99.9940%" height="15" fill="rgb(249,219,21)" fg:x="3" fg:w="50015"/><text x="0.2560%" y="287.50">core::ops::function::FnOnce::call_once</text></g></svg></svg>