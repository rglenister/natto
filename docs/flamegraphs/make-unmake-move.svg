<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="89971"><g><title>&lt;natto::core::position::Position as core::clone::Clone&gt;::clone (77 samples, 0.09%)</title><rect x="0.0222%" y="149" width="0.0856%" height="15" fill="rgb(227,0,7)" fg:x="20" fg:w="77"/><text x="0.2722%" y="159.50"></text></g><g><title>_free (9 samples, 0.01%)</title><rect x="0.1223%" y="133" width="0.0100%" height="15" fill="rgb(217,0,24)" fg:x="110" fg:w="9"/><text x="0.3723%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (64 samples, 0.07%)</title><rect x="0.1134%" y="149" width="0.0711%" height="15" fill="rgb(221,193,54)" fg:x="102" fg:w="64"/><text x="0.3634%" y="159.50"></text></g><g><title>_nanov2_free (47 samples, 0.05%)</title><rect x="0.1323%" y="133" width="0.0522%" height="15" fill="rgb(248,212,6)" fg:x="119" fg:w="47"/><text x="0.3823%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (22 samples, 0.02%)</title><rect x="0.1845%" y="149" width="0.0245%" height="15" fill="rgb(208,68,35)" fg:x="166" fg:w="22"/><text x="0.4345%" y="159.50"></text></g><g><title>natto::core::position::Position::make_move (22 samples, 0.02%)</title><rect x="0.2156%" y="149" width="0.0245%" height="15" fill="rgb(232,128,0)" fg:x="194" fg:w="22"/><text x="0.4656%" y="159.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (11 samples, 0.01%)</title><rect x="0.2456%" y="149" width="0.0122%" height="15" fill="rgb(207,160,47)" fg:x="221" fg:w="11"/><text x="0.4956%" y="159.50"></text></g><g><title>&lt;natto::core::position::Position as core::clone::Clone&gt;::clone (407 samples, 0.45%)</title><rect x="0.2579%" y="133" width="0.4524%" height="15" fill="rgb(228,23,34)" fg:x="232" fg:w="407"/><text x="0.5079%" y="143.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (32 samples, 0.04%)</title><rect x="0.7102%" y="133" width="0.0356%" height="15" fill="rgb(218,30,26)" fg:x="639" fg:w="32"/><text x="0.9602%" y="143.50"></text></g><g><title>_nanov2_free (10 samples, 0.01%)</title><rect x="0.7458%" y="133" width="0.0111%" height="15" fill="rgb(220,122,19)" fg:x="671" fg:w="10"/><text x="0.9958%" y="143.50"></text></g><g><title>DYLD-STUB$$free (21 samples, 0.02%)</title><rect x="0.7569%" y="117" width="0.0233%" height="15" fill="rgb(250,228,42)" fg:x="681" fg:w="21"/><text x="1.0069%" y="127.50"></text></g><g><title>_free (33 samples, 0.04%)</title><rect x="0.7869%" y="117" width="0.0367%" height="15" fill="rgb(240,193,28)" fg:x="708" fg:w="33"/><text x="1.0369%" y="127.50"></text></g><g><title>__bzero (9 samples, 0.01%)</title><rect x="1.0003%" y="101" width="0.0100%" height="15" fill="rgb(216,20,37)" fg:x="900" fg:w="9"/><text x="1.2503%" y="111.50"></text></g><g><title>_nanov2_free (198 samples, 0.22%)</title><rect x="0.8236%" y="117" width="0.2201%" height="15" fill="rgb(206,188,39)" fg:x="741" fg:w="198"/><text x="1.0736%" y="127.50"></text></g><g><title>_platform_memset (30 samples, 0.03%)</title><rect x="1.0103%" y="101" width="0.0333%" height="15" fill="rgb(217,207,13)" fg:x="909" fg:w="30"/><text x="1.2603%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (259 samples, 0.29%)</title><rect x="0.7569%" y="133" width="0.2879%" height="15" fill="rgb(231,73,38)" fg:x="681" fg:w="259"/><text x="1.0069%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (198 samples, 0.22%)</title><rect x="1.0448%" y="133" width="0.2201%" height="15" fill="rgb(225,20,46)" fg:x="940" fg:w="198"/><text x="1.2948%" y="143.50"></text></g><g><title>natto::core::move_gen::generate_moves (11 samples, 0.01%)</title><rect x="1.2726%" y="133" width="0.0122%" height="15" fill="rgb(210,31,41)" fg:x="1145" fg:w="11"/><text x="1.5226%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (131 samples, 0.15%)</title><rect x="1.2849%" y="133" width="0.1456%" height="15" fill="rgb(221,200,47)" fg:x="1156" fg:w="131"/><text x="1.5349%" y="143.50"></text></g><g><title>natto::core::position::Position::unmake_move (39 samples, 0.04%)</title><rect x="1.4305%" y="133" width="0.0433%" height="15" fill="rgb(226,26,5)" fg:x="1287" fg:w="39"/><text x="1.6805%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (418 samples, 0.46%)</title><rect x="1.4783%" y="117" width="0.4646%" height="15" fill="rgb(249,33,26)" fg:x="1330" fg:w="418"/><text x="1.7283%" y="127.50"></text></g><g><title>natto::core::position::Position::unmake_move (204 samples, 0.23%)</title><rect x="1.9428%" y="117" width="0.2267%" height="15" fill="rgb(235,183,28)" fg:x="1748" fg:w="204"/><text x="2.1928%" y="127.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes (16 samples, 0.02%)</title><rect x="2.1696%" y="117" width="0.0178%" height="15" fill="rgb(221,5,38)" fg:x="1952" fg:w="16"/><text x="2.4196%" y="127.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (279 samples, 0.31%)</title><rect x="3.6879%" y="101" width="0.3101%" height="15" fill="rgb(247,18,42)" fg:x="3318" fg:w="279"/><text x="3.9379%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (179 samples, 0.20%)</title><rect x="3.9980%" y="101" width="0.1990%" height="15" fill="rgb(241,131,45)" fg:x="3597" fg:w="179"/><text x="4.2480%" y="111.50"></text></g><g><title>&lt;natto::core::piece::PieceColor as core::cmp::PartialEq&gt;::eq (68 samples, 0.08%)</title><rect x="4.1969%" y="101" width="0.0756%" height="15" fill="rgb(249,31,29)" fg:x="3776" fg:w="68"/><text x="4.4469%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (50 samples, 0.06%)</title><rect x="4.2725%" y="101" width="0.0556%" height="15" fill="rgb(225,111,53)" fg:x="3844" fg:w="50"/><text x="4.5225%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (52 samples, 0.06%)</title><rect x="4.3281%" y="101" width="0.0578%" height="15" fill="rgb(238,160,17)" fg:x="3894" fg:w="52"/><text x="4.5781%" y="111.50"></text></g><g><title>natto::core::board::Board::bitboard_all_pieces (25 samples, 0.03%)</title><rect x="4.3859%" y="101" width="0.0278%" height="15" fill="rgb(214,148,48)" fg:x="3946" fg:w="25"/><text x="4.6359%" y="111.50"></text></g><g><title>natto::core::board::Board::remove_piece (515 samples, 0.57%)</title><rect x="4.4159%" y="101" width="0.5724%" height="15" fill="rgb(232,36,49)" fg:x="3973" fg:w="515"/><text x="4.6659%" y="111.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (555 samples, 0.62%)</title><rect x="4.9883%" y="101" width="0.6169%" height="15" fill="rgb(209,103,24)" fg:x="4488" fg:w="555"/><text x="5.2383%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (1,363 samples, 1.51%)</title><rect x="5.6051%" y="85" width="1.5149%" height="15" fill="rgb(229,88,8)" fg:x="5043" fg:w="1363"/><text x="5.8551%" y="95.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (917 samples, 1.02%)</title><rect x="7.1201%" y="85" width="1.0192%" height="15" fill="rgb(213,181,19)" fg:x="6406" fg:w="917"/><text x="7.3701%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.02%)</title><rect x="10.8179%" y="69" width="0.0167%" height="15" fill="rgb(254,191,54)" fg:x="9733" fg:w="15"/><text x="11.0679%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (45 samples, 0.05%)</title><rect x="10.8346%" y="69" width="0.0500%" height="15" fill="rgb(241,83,37)" fg:x="9748" fg:w="45"/><text x="11.0846%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (20 samples, 0.02%)</title><rect x="10.8846%" y="69" width="0.0222%" height="15" fill="rgb(233,36,39)" fg:x="9793" fg:w="20"/><text x="11.1346%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (871 samples, 0.97%)</title><rect x="10.9068%" y="69" width="0.9681%" height="15" fill="rgb(226,3,54)" fg:x="9813" fg:w="871"/><text x="11.1568%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (871 samples, 0.97%)</title><rect x="10.9068%" y="53" width="0.9681%" height="15" fill="rgb(245,192,40)" fg:x="9813" fg:w="871"/><text x="11.1568%" y="63.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (160 samples, 0.18%)</title><rect x="11.8749%" y="69" width="0.1778%" height="15" fill="rgb(238,167,29)" fg:x="10684" fg:w="160"/><text x="12.1249%" y="79.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (8,002 samples, 8.89%)</title><rect x="12.0528%" y="69" width="8.8940%" height="15" fill="rgb(232,182,51)" fg:x="10844" fg:w="8002"/><text x="12.3028%" y="79.50">&lt;u64 as bitin..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (63 samples, 0.07%)</title><rect x="20.9467%" y="69" width="0.0700%" height="15" fill="rgb(231,60,39)" fg:x="18846" fg:w="63"/><text x="21.1967%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (17 samples, 0.02%)</title><rect x="21.0168%" y="69" width="0.0189%" height="15" fill="rgb(208,69,12)" fg:x="18909" fg:w="17"/><text x="21.2668%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (654 samples, 0.73%)</title><rect x="21.0357%" y="69" width="0.7269%" height="15" fill="rgb(235,93,37)" fg:x="18926" fg:w="654"/><text x="21.2857%" y="79.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (676 samples, 0.75%)</title><rect x="21.7626%" y="69" width="0.7514%" height="15" fill="rgb(213,116,39)" fg:x="19580" fg:w="676"/><text x="22.0126%" y="79.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (606 samples, 0.67%)</title><rect x="22.5139%" y="69" width="0.6736%" height="15" fill="rgb(222,207,29)" fg:x="20256" fg:w="606"/><text x="22.7639%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (893 samples, 0.99%)</title><rect x="23.1875%" y="69" width="0.9925%" height="15" fill="rgb(206,96,30)" fg:x="20862" fg:w="893"/><text x="23.4375%" y="79.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (18 samples, 0.02%)</title><rect x="24.1811%" y="69" width="0.0200%" height="15" fill="rgb(218,138,4)" fg:x="21756" fg:w="18"/><text x="24.4311%" y="79.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (28 samples, 0.03%)</title><rect x="24.2011%" y="69" width="0.0311%" height="15" fill="rgb(250,191,14)" fg:x="21774" fg:w="28"/><text x="24.4511%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (268 samples, 0.30%)</title><rect x="24.2323%" y="69" width="0.2979%" height="15" fill="rgb(239,60,40)" fg:x="21802" fg:w="268"/><text x="24.4823%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (350 samples, 0.39%)</title><rect x="24.5301%" y="69" width="0.3890%" height="15" fill="rgb(206,27,48)" fg:x="22070" fg:w="350"/><text x="24.7801%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (47 samples, 0.05%)</title><rect x="24.9191%" y="69" width="0.0522%" height="15" fill="rgb(225,35,8)" fg:x="22420" fg:w="47"/><text x="25.1691%" y="79.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (128 samples, 0.14%)</title><rect x="24.9714%" y="69" width="0.1423%" height="15" fill="rgb(250,213,24)" fg:x="22467" fg:w="128"/><text x="25.2214%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_load (117 samples, 0.13%)</title><rect x="25.1136%" y="69" width="0.1300%" height="15" fill="rgb(247,123,22)" fg:x="22595" fg:w="117"/><text x="25.3636%" y="79.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (37 samples, 0.04%)</title><rect x="25.2437%" y="69" width="0.0411%" height="15" fill="rgb(231,138,38)" fg:x="22712" fg:w="37"/><text x="25.4937%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (599 samples, 0.67%)</title><rect x="25.2948%" y="53" width="0.6658%" height="15" fill="rgb(231,145,46)" fg:x="22758" fg:w="599"/><text x="25.5448%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (666 samples, 0.74%)</title><rect x="25.9606%" y="53" width="0.7402%" height="15" fill="rgb(251,118,11)" fg:x="23357" fg:w="666"/><text x="26.2106%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,159 samples, 1.29%)</title><rect x="26.7008%" y="53" width="1.2882%" height="15" fill="rgb(217,147,25)" fg:x="24023" fg:w="1159"/><text x="26.9508%" y="63.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,556 samples, 5.06%)</title><rect x="27.9890%" y="53" width="5.0639%" height="15" fill="rgb(247,81,37)" fg:x="25182" fg:w="4556"/><text x="28.2390%" y="63.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,548 samples, 5.05%)</title><rect x="27.9979%" y="37" width="5.0550%" height="15" fill="rgb(209,12,38)" fg:x="25190" fg:w="4548"/><text x="28.2479%" y="47.50">&lt;core:..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (484 samples, 0.54%)</title><rect x="33.0529%" y="53" width="0.5380%" height="15" fill="rgb(227,1,9)" fg:x="29738" fg:w="484"/><text x="33.3029%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,911 samples, 4.35%)</title><rect x="33.5908%" y="53" width="4.3470%" height="15" fill="rgb(248,47,43)" fg:x="30222" fg:w="3911"/><text x="33.8408%" y="63.50">core:..</text></g><g><title>core::hash::Hasher::write_u8 (134 samples, 0.15%)</title><rect x="37.9378%" y="53" width="0.1489%" height="15" fill="rgb(221,10,30)" fg:x="34133" fg:w="134"/><text x="38.1878%" y="63.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (25 samples, 0.03%)</title><rect x="38.0867%" y="53" width="0.0278%" height="15" fill="rgb(210,229,1)" fg:x="34267" fg:w="25"/><text x="38.3367%" y="63.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (336 samples, 0.37%)</title><rect x="38.1145%" y="53" width="0.3735%" height="15" fill="rgb(222,148,37)" fg:x="34292" fg:w="336"/><text x="38.3645%" y="63.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (876 samples, 0.97%)</title><rect x="38.4880%" y="53" width="0.9736%" height="15" fill="rgb(234,67,33)" fg:x="34628" fg:w="876"/><text x="38.7380%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (13,648 samples, 15.17%)</title><rect x="25.2848%" y="69" width="15.1693%" height="15" fill="rgb(247,98,35)" fg:x="22749" fg:w="13648"/><text x="25.5348%" y="79.50">hashbrown::map::make_ha..</text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (893 samples, 0.99%)</title><rect x="39.4616%" y="53" width="0.9925%" height="15" fill="rgb(247,138,52)" fg:x="35504" fg:w="893"/><text x="39.7116%" y="63.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (57 samples, 0.06%)</title><rect x="40.4541%" y="69" width="0.0634%" height="15" fill="rgb(213,79,30)" fg:x="36397" fg:w="57"/><text x="40.7041%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (314 samples, 0.35%)</title><rect x="40.5175%" y="69" width="0.3490%" height="15" fill="rgb(246,177,23)" fg:x="36454" fg:w="314"/><text x="40.7675%" y="79.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (109 samples, 0.12%)</title><rect x="40.8665%" y="69" width="0.1212%" height="15" fill="rgb(230,62,27)" fg:x="36768" fg:w="109"/><text x="41.1165%" y="79.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (13 samples, 0.01%)</title><rect x="40.9877%" y="69" width="0.0144%" height="15" fill="rgb(216,154,8)" fg:x="36877" fg:w="13"/><text x="41.2377%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (411 samples, 0.46%)</title><rect x="41.0021%" y="69" width="0.4568%" height="15" fill="rgb(244,35,45)" fg:x="36890" fg:w="411"/><text x="41.2521%" y="79.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (280 samples, 0.31%)</title><rect x="41.4589%" y="69" width="0.3112%" height="15" fill="rgb(251,115,12)" fg:x="37301" fg:w="280"/><text x="41.7089%" y="79.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (33,608 samples, 37.35%)</title><rect x="5.6051%" y="101" width="37.3543%" height="15" fill="rgb(240,54,50)" fg:x="5043" fg:w="33608"/><text x="5.8551%" y="111.50">natto::core::move_gen::square_attacks_finder</text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (31,328 samples, 34.82%)</title><rect x="8.1393%" y="85" width="34.8201%" height="15" fill="rgb(233,84,52)" fg:x="7323" fg:w="31328"/><text x="8.3893%" y="95.50">natto::core::move_gen::square_attacks_finder_internal</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1,070 samples, 1.19%)</title><rect x="41.7701%" y="69" width="1.1893%" height="15" fill="rgb(207,117,47)" fg:x="37581" fg:w="1070"/><text x="42.0201%" y="79.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (1,178 samples, 1.31%)</title><rect x="42.9594%" y="101" width="1.3093%" height="15" fill="rgb(249,43,39)" fg:x="38651" fg:w="1178"/><text x="43.2094%" y="111.50"></text></g><g><title>natto::core::position::Position::castling_rights_as_u8 (11 samples, 0.01%)</title><rect x="44.2687%" y="101" width="0.0122%" height="15" fill="rgb(209,38,44)" fg:x="39829" fg:w="11"/><text x="44.5187%" y="111.50"></text></g><g><title>natto::core::position::Position::make_move (973 samples, 1.08%)</title><rect x="44.2809%" y="101" width="1.0815%" height="15" fill="rgb(236,212,23)" fg:x="39840" fg:w="973"/><text x="44.5309%" y="111.50"></text></g><g><title>natto::core::position::Position::make_move::make_basic_move (367 samples, 0.41%)</title><rect x="45.3624%" y="101" width="0.4079%" height="15" fill="rgb(242,79,21)" fg:x="40813" fg:w="367"/><text x="45.6124%" y="111.50"></text></g><g><title>core::num::_&lt;impl isize&gt;::abs (214 samples, 0.24%)</title><rect x="45.7747%" y="85" width="0.2379%" height="15" fill="rgb(211,96,35)" fg:x="41184" fg:w="214"/><text x="46.0247%" y="95.50"></text></g><g><title>natto::core::board::Board::get_piece (1,108 samples, 1.23%)</title><rect x="46.0126%" y="85" width="1.2315%" height="15" fill="rgb(253,215,40)" fg:x="41398" fg:w="1108"/><text x="46.2626%" y="95.50"></text></g><g><title>natto::core::board::Board::remove_piece (706 samples, 0.78%)</title><rect x="47.2441%" y="85" width="0.7847%" height="15" fill="rgb(211,81,21)" fg:x="42506" fg:w="706"/><text x="47.4941%" y="95.50"></text></g><g><title>natto::core::move::Move::get_base_move (642 samples, 0.71%)</title><rect x="48.0288%" y="85" width="0.7136%" height="15" fill="rgb(208,190,38)" fg:x="43212" fg:w="642"/><text x="48.2788%" y="95.50"></text></g><g><title>natto::core::position::Position::make_move::make_basic_move (839 samples, 0.93%)</title><rect x="48.7424%" y="85" width="0.9325%" height="15" fill="rgb(235,213,38)" fg:x="43854" fg:w="839"/><text x="48.9924%" y="95.50"></text></g><g><title>natto::core::board::Board::remove_piece (4,563 samples, 5.07%)</title><rect x="49.6749%" y="69" width="5.0716%" height="15" fill="rgb(237,122,38)" fg:x="44693" fg:w="4563"/><text x="49.9249%" y="79.50">natto:..</text></g><g><title>natto::core::position::Position::put_piece (354 samples, 0.39%)</title><rect x="54.7465%" y="69" width="0.3935%" height="15" fill="rgb(244,218,35)" fg:x="49256" fg:w="354"/><text x="54.9965%" y="79.50"></text></g><g><title>natto::core::position::Position::move_piece (5,125 samples, 5.70%)</title><rect x="49.6749%" y="85" width="5.6963%" height="15" fill="rgb(240,68,47)" fg:x="44693" fg:w="5125"/><text x="49.9249%" y="95.50">natto::..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (208 samples, 0.23%)</title><rect x="55.1400%" y="69" width="0.2312%" height="15" fill="rgb(210,16,53)" fg:x="49610" fg:w="208"/><text x="55.3900%" y="79.50"></text></g><g><title>natto::core::position::Position::put_piece (410 samples, 0.46%)</title><rect x="55.3712%" y="85" width="0.4557%" height="15" fill="rgb(235,124,12)" fg:x="49818" fg:w="410"/><text x="55.6212%" y="95.50"></text></g><g><title>natto::core::position::Position::remove_piece (58 samples, 0.06%)</title><rect x="55.8269%" y="85" width="0.0645%" height="15" fill="rgb(224,169,11)" fg:x="50228" fg:w="58"/><text x="56.0769%" y="95.50"></text></g><g><title>natto::core::board::Board::remove_piece (31 samples, 0.03%)</title><rect x="55.9002%" y="69" width="0.0345%" height="15" fill="rgb(250,166,2)" fg:x="50294" fg:w="31"/><text x="56.1502%" y="79.50"></text></g><g><title>natto::core::position::Position::unmake_move (40 samples, 0.04%)</title><rect x="55.8913%" y="85" width="0.0445%" height="15" fill="rgb(242,216,29)" fg:x="50286" fg:w="40"/><text x="56.1413%" y="95.50"></text></g><g><title>natto::core::position::Position::make_move (9,390 samples, 10.44%)</title><rect x="45.7747%" y="101" width="10.4367%" height="15" fill="rgb(230,116,27)" fg:x="41184" fg:w="9390"/><text x="46.0247%" y="111.50">natto::core::po..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (248 samples, 0.28%)</title><rect x="55.9358%" y="85" width="0.2756%" height="15" fill="rgb(228,99,48)" fg:x="50326" fg:w="248"/><text x="56.1858%" y="95.50"></text></g><g><title>natto::core::position::Position::put_piece (425 samples, 0.47%)</title><rect x="56.2148%" y="101" width="0.4724%" height="15" fill="rgb(253,11,6)" fg:x="50577" fg:w="425"/><text x="56.4648%" y="111.50"></text></g><g><title>natto::core::position::Position::remove_piece (64 samples, 0.07%)</title><rect x="56.6872%" y="101" width="0.0711%" height="15" fill="rgb(247,143,39)" fg:x="51002" fg:w="64"/><text x="56.9372%" y="111.50"></text></g><g><title>natto::core::board::Board::remove_piece (4,508 samples, 5.01%)</title><rect x="57.8375%" y="85" width="5.0105%" height="15" fill="rgb(236,97,10)" fg:x="52037" fg:w="4508"/><text x="58.0875%" y="95.50">natto:..</text></g><g><title>natto::core::position::Position::put_piece (427 samples, 0.47%)</title><rect x="62.8480%" y="85" width="0.4746%" height="15" fill="rgb(233,208,19)" fg:x="56545" fg:w="427"/><text x="63.0980%" y="95.50"></text></g><g><title>natto::core::position::Position::unmake_move (6,095 samples, 6.77%)</title><rect x="56.7583%" y="101" width="6.7744%" height="15" fill="rgb(216,164,2)" fg:x="51066" fg:w="6095"/><text x="57.0083%" y="111.50">natto::co..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (189 samples, 0.21%)</title><rect x="63.3226%" y="85" width="0.2101%" height="15" fill="rgb(220,129,5)" fg:x="56972" fg:w="189"/><text x="63.5726%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (39 samples, 0.04%)</title><rect x="64.2185%" y="85" width="0.0433%" height="15" fill="rgb(242,17,10)" fg:x="57778" fg:w="39"/><text x="64.4685%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (23 samples, 0.03%)</title><rect x="64.2618%" y="85" width="0.0256%" height="15" fill="rgb(242,107,0)" fg:x="57817" fg:w="23"/><text x="64.5118%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.02%)</title><rect x="64.2874%" y="85" width="0.0156%" height="15" fill="rgb(251,28,31)" fg:x="57840" fg:w="14"/><text x="64.5374%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (34 samples, 0.04%)</title><rect x="64.3029%" y="85" width="0.0378%" height="15" fill="rgb(233,223,10)" fg:x="57854" fg:w="34"/><text x="64.5529%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (56 samples, 0.06%)</title><rect x="64.3407%" y="69" width="0.0622%" height="15" fill="rgb(215,21,27)" fg:x="57888" fg:w="56"/><text x="64.5907%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (45 samples, 0.05%)</title><rect x="64.4119%" y="69" width="0.0500%" height="15" fill="rgb(232,23,21)" fg:x="57952" fg:w="45"/><text x="64.6619%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (255 samples, 0.28%)</title><rect x="64.4619%" y="69" width="0.2834%" height="15" fill="rgb(244,5,23)" fg:x="57997" fg:w="255"/><text x="64.7119%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (255 samples, 0.28%)</title><rect x="64.4619%" y="53" width="0.2834%" height="15" fill="rgb(226,81,46)" fg:x="57997" fg:w="255"/><text x="64.7119%" y="63.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (28 samples, 0.03%)</title><rect x="64.7453%" y="69" width="0.0311%" height="15" fill="rgb(247,70,30)" fg:x="58252" fg:w="28"/><text x="64.9953%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (222 samples, 0.25%)</title><rect x="64.7764%" y="69" width="0.2467%" height="15" fill="rgb(212,68,19)" fg:x="58280" fg:w="222"/><text x="65.0264%" y="79.50"></text></g><g><title>core::hash::Hasher::write_u8 (100 samples, 0.11%)</title><rect x="65.0232%" y="69" width="0.1111%" height="15" fill="rgb(240,187,13)" fg:x="58502" fg:w="100"/><text x="65.2732%" y="79.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (34 samples, 0.04%)</title><rect x="65.1343%" y="69" width="0.0378%" height="15" fill="rgb(223,113,26)" fg:x="58602" fg:w="34"/><text x="65.3843%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (53 samples, 0.06%)</title><rect x="65.1721%" y="69" width="0.0589%" height="15" fill="rgb(206,192,2)" fg:x="58636" fg:w="53"/><text x="65.4221%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (816 samples, 0.91%)</title><rect x="64.3407%" y="85" width="0.9070%" height="15" fill="rgb(241,108,4)" fg:x="57888" fg:w="816"/><text x="64.5907%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (15 samples, 0.02%)</title><rect x="65.2310%" y="69" width="0.0167%" height="15" fill="rgb(247,173,49)" fg:x="58689" fg:w="15"/><text x="65.4810%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (41 samples, 0.05%)</title><rect x="65.2477%" y="85" width="0.0456%" height="15" fill="rgb(224,114,35)" fg:x="58704" fg:w="41"/><text x="65.4977%" y="95.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (12 samples, 0.01%)</title><rect x="65.2933%" y="85" width="0.0133%" height="15" fill="rgb(245,159,27)" fg:x="58745" fg:w="12"/><text x="65.5433%" y="95.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (38 samples, 0.04%)</title><rect x="65.3066%" y="85" width="0.0422%" height="15" fill="rgb(245,172,44)" fg:x="58757" fg:w="38"/><text x="65.5566%" y="95.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (63 samples, 0.07%)</title><rect x="65.3488%" y="85" width="0.0700%" height="15" fill="rgb(236,23,11)" fg:x="58795" fg:w="63"/><text x="65.5988%" y="95.50"></text></g><g><title>natto::core::position::Position::opposing_side (32 samples, 0.04%)</title><rect x="65.4189%" y="85" width="0.0356%" height="15" fill="rgb(205,117,38)" fg:x="58858" fg:w="32"/><text x="65.6689%" y="95.50"></text></g><g><title>natto::core::position::Position::update_hash_code (1,756 samples, 1.95%)</title><rect x="63.5327%" y="101" width="1.9517%" height="15" fill="rgb(237,72,25)" fg:x="57161" fg:w="1756"/><text x="63.7827%" y="111.50">n..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (27 samples, 0.03%)</title><rect x="65.4544%" y="85" width="0.0300%" height="15" fill="rgb(244,70,9)" fg:x="58890" fg:w="27"/><text x="65.7044%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (43 samples, 0.05%)</title><rect x="65.9268%" y="85" width="0.0478%" height="15" fill="rgb(217,125,39)" fg:x="59315" fg:w="43"/><text x="66.1768%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (23 samples, 0.03%)</title><rect x="65.9746%" y="85" width="0.0256%" height="15" fill="rgb(235,36,10)" fg:x="59358" fg:w="23"/><text x="66.2246%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (42 samples, 0.05%)</title><rect x="66.0124%" y="69" width="0.0467%" height="15" fill="rgb(251,123,47)" fg:x="59392" fg:w="42"/><text x="66.2624%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 0.01%)</title><rect x="66.0591%" y="69" width="0.0122%" height="15" fill="rgb(221,13,13)" fg:x="59434" fg:w="11"/><text x="66.3091%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (293 samples, 0.33%)</title><rect x="66.0713%" y="69" width="0.3257%" height="15" fill="rgb(238,131,9)" fg:x="59445" fg:w="293"/><text x="66.3213%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (293 samples, 0.33%)</title><rect x="66.0713%" y="53" width="0.3257%" height="15" fill="rgb(211,50,8)" fg:x="59445" fg:w="293"/><text x="66.3213%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (192 samples, 0.21%)</title><rect x="66.3970%" y="69" width="0.2134%" height="15" fill="rgb(245,182,24)" fg:x="59738" fg:w="192"/><text x="66.6470%" y="79.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (49 samples, 0.05%)</title><rect x="66.6192%" y="69" width="0.0545%" height="15" fill="rgb(242,14,37)" fg:x="59938" fg:w="49"/><text x="66.8692%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (45 samples, 0.05%)</title><rect x="66.6737%" y="69" width="0.0500%" height="15" fill="rgb(246,228,12)" fg:x="59987" fg:w="45"/><text x="66.9237%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (702 samples, 0.78%)</title><rect x="66.0079%" y="85" width="0.7803%" height="15" fill="rgb(213,55,15)" fg:x="59388" fg:w="702"/><text x="66.2579%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (58 samples, 0.06%)</title><rect x="66.7237%" y="69" width="0.0645%" height="15" fill="rgb(209,9,3)" fg:x="60032" fg:w="58"/><text x="66.9737%" y="79.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (1,685 samples, 1.87%)</title><rect x="66.7904%" y="85" width="1.8728%" height="15" fill="rgb(230,59,30)" fg:x="60092" fg:w="1685"/><text x="67.0404%" y="95.50">n..</text></g><g><title>natto::core::position::Position::en_passant_capture_square (495 samples, 0.55%)</title><rect x="68.6632%" y="85" width="0.5502%" height="15" fill="rgb(209,121,21)" fg:x="61777" fg:w="495"/><text x="68.9132%" y="95.50"></text></g><g><title>natto::core::position::UndoMoveInfo::new (3,477 samples, 3.86%)</title><rect x="65.4844%" y="101" width="3.8646%" height="15" fill="rgb(220,109,13)" fg:x="58917" fg:w="3477"/><text x="65.7344%" y="111.50">natt..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (122 samples, 0.14%)</title><rect x="69.2134%" y="85" width="0.1356%" height="15" fill="rgb(232,18,1)" fg:x="62272" fg:w="122"/><text x="69.4634%" y="95.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (61,624 samples, 68.49%)</title><rect x="1.4771%" y="133" width="68.4932%" height="15" fill="rgb(215,41,42)" fg:x="1329" fg:w="61624"/><text x="1.7271%" y="143.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes::process_move (60,985 samples, 67.78%)</title><rect x="2.1874%" y="117" width="67.7830%" height="15" fill="rgb(224,123,36)" fg:x="1968" fg:w="60985"/><text x="2.4374%" y="127.50">natto::eval::node_counter::do_count_nodes::process_move</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (559 samples, 0.62%)</title><rect x="69.3490%" y="101" width="0.6213%" height="15" fill="rgb(240,125,3)" fg:x="62394" fg:w="559"/><text x="69.5990%" y="111.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (39 samples, 0.04%)</title><rect x="70.4494%" y="117" width="0.0433%" height="15" fill="rgb(205,98,50)" fg:x="63384" fg:w="39"/><text x="70.6994%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (74 samples, 0.08%)</title><rect x="70.4927%" y="117" width="0.0822%" height="15" fill="rgb(205,185,37)" fg:x="63423" fg:w="74"/><text x="70.7427%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (11 samples, 0.01%)</title><rect x="70.5816%" y="117" width="0.0122%" height="15" fill="rgb(238,207,15)" fg:x="63503" fg:w="11"/><text x="70.8316%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.02%)</title><rect x="70.5939%" y="117" width="0.0156%" height="15" fill="rgb(213,199,42)" fg:x="63514" fg:w="14"/><text x="70.8439%" y="127.50"></text></g><g><title>natto::core::board::Board::remove_piece (355 samples, 0.39%)</title><rect x="70.6239%" y="117" width="0.3946%" height="15" fill="rgb(235,201,11)" fg:x="63541" fg:w="355"/><text x="70.8739%" y="127.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (115 samples, 0.13%)</title><rect x="71.0184%" y="117" width="0.1278%" height="15" fill="rgb(207,46,11)" fg:x="63896" fg:w="115"/><text x="71.2684%" y="127.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (455 samples, 0.51%)</title><rect x="71.1463%" y="101" width="0.5057%" height="15" fill="rgb(241,35,35)" fg:x="64011" fg:w="455"/><text x="71.3963%" y="111.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (176 samples, 0.20%)</title><rect x="71.6520%" y="101" width="0.1956%" height="15" fill="rgb(243,32,47)" fg:x="64466" fg:w="176"/><text x="71.9020%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 0.01%)</title><rect x="72.5045%" y="85" width="0.0122%" height="15" fill="rgb(247,202,23)" fg:x="65233" fg:w="11"/><text x="72.7545%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (170 samples, 0.19%)</title><rect x="72.5167%" y="85" width="0.1889%" height="15" fill="rgb(219,102,11)" fg:x="65244" fg:w="170"/><text x="72.7667%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (170 samples, 0.19%)</title><rect x="72.5167%" y="69" width="0.1889%" height="15" fill="rgb(243,110,44)" fg:x="65244" fg:w="170"/><text x="72.7667%" y="79.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (20 samples, 0.02%)</title><rect x="72.7056%" y="85" width="0.0222%" height="15" fill="rgb(222,74,54)" fg:x="65414" fg:w="20"/><text x="72.9556%" y="95.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (1,421 samples, 1.58%)</title><rect x="72.7279%" y="85" width="1.5794%" height="15" fill="rgb(216,99,12)" fg:x="65434" fg:w="1421"/><text x="72.9779%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (103 samples, 0.11%)</title><rect x="74.3162%" y="85" width="0.1145%" height="15" fill="rgb(226,22,26)" fg:x="66863" fg:w="103"/><text x="74.5662%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (117 samples, 0.13%)</title><rect x="74.4306%" y="85" width="0.1300%" height="15" fill="rgb(217,163,10)" fg:x="66966" fg:w="117"/><text x="74.6806%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (119 samples, 0.13%)</title><rect x="74.5607%" y="85" width="0.1323%" height="15" fill="rgb(213,25,53)" fg:x="67083" fg:w="119"/><text x="74.8107%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (163 samples, 0.18%)</title><rect x="74.6930%" y="85" width="0.1812%" height="15" fill="rgb(252,105,26)" fg:x="67202" fg:w="163"/><text x="74.9430%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (41 samples, 0.05%)</title><rect x="74.8752%" y="85" width="0.0456%" height="15" fill="rgb(220,39,43)" fg:x="67366" fg:w="41"/><text x="75.1252%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (65 samples, 0.07%)</title><rect x="74.9208%" y="85" width="0.0722%" height="15" fill="rgb(229,68,48)" fg:x="67407" fg:w="65"/><text x="75.1708%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (14 samples, 0.02%)</title><rect x="74.9931%" y="85" width="0.0156%" height="15" fill="rgb(252,8,32)" fg:x="67472" fg:w="14"/><text x="75.2431%" y="95.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (11 samples, 0.01%)</title><rect x="75.0086%" y="85" width="0.0122%" height="15" fill="rgb(223,20,43)" fg:x="67486" fg:w="11"/><text x="75.2586%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (48 samples, 0.05%)</title><rect x="75.0208%" y="85" width="0.0534%" height="15" fill="rgb(229,81,49)" fg:x="67497" fg:w="48"/><text x="75.2708%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (87 samples, 0.10%)</title><rect x="75.0775%" y="69" width="0.0967%" height="15" fill="rgb(236,28,36)" fg:x="67548" fg:w="87"/><text x="75.3275%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (105 samples, 0.12%)</title><rect x="75.1742%" y="69" width="0.1167%" height="15" fill="rgb(249,185,26)" fg:x="67635" fg:w="105"/><text x="75.4242%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (189 samples, 0.21%)</title><rect x="75.2909%" y="69" width="0.2101%" height="15" fill="rgb(249,174,33)" fg:x="67740" fg:w="189"/><text x="75.5409%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (905 samples, 1.01%)</title><rect x="75.5010%" y="69" width="1.0059%" height="15" fill="rgb(233,201,37)" fg:x="67929" fg:w="905"/><text x="75.7510%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (904 samples, 1.00%)</title><rect x="75.5021%" y="53" width="1.0048%" height="15" fill="rgb(221,78,26)" fg:x="67930" fg:w="904"/><text x="75.7521%" y="63.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (83 samples, 0.09%)</title><rect x="76.5069%" y="69" width="0.0923%" height="15" fill="rgb(250,127,30)" fg:x="68834" fg:w="83"/><text x="76.7569%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (799 samples, 0.89%)</title><rect x="76.5991%" y="69" width="0.8881%" height="15" fill="rgb(230,49,44)" fg:x="68917" fg:w="799"/><text x="76.8491%" y="79.50"></text></g><g><title>core::hash::Hasher::write_u8 (17 samples, 0.02%)</title><rect x="77.4872%" y="69" width="0.0189%" height="15" fill="rgb(229,67,23)" fg:x="69716" fg:w="17"/><text x="77.7372%" y="79.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (70 samples, 0.08%)</title><rect x="77.5072%" y="69" width="0.0778%" height="15" fill="rgb(249,83,47)" fg:x="69734" fg:w="70"/><text x="77.7572%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (168 samples, 0.19%)</title><rect x="77.5850%" y="69" width="0.1867%" height="15" fill="rgb(215,43,3)" fg:x="69804" fg:w="168"/><text x="77.8350%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (2,626 samples, 2.92%)</title><rect x="75.0775%" y="85" width="2.9187%" height="15" fill="rgb(238,154,13)" fg:x="67548" fg:w="2626"/><text x="75.3275%" y="95.50">ha..</text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (202 samples, 0.22%)</title><rect x="77.7717%" y="69" width="0.2245%" height="15" fill="rgb(219,56,2)" fg:x="69972" fg:w="202"/><text x="78.0217%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (29 samples, 0.03%)</title><rect x="77.9962%" y="85" width="0.0322%" height="15" fill="rgb(233,0,4)" fg:x="70174" fg:w="29"/><text x="78.2462%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (32 samples, 0.04%)</title><rect x="78.0285%" y="85" width="0.0356%" height="15" fill="rgb(235,30,7)" fg:x="70203" fg:w="32"/><text x="78.2785%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (12 samples, 0.01%)</title><rect x="78.0640%" y="85" width="0.0133%" height="15" fill="rgb(250,79,13)" fg:x="70235" fg:w="12"/><text x="78.3140%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (67 samples, 0.07%)</title><rect x="78.0807%" y="85" width="0.0745%" height="15" fill="rgb(211,146,34)" fg:x="70250" fg:w="67"/><text x="78.3307%" y="95.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (48 samples, 0.05%)</title><rect x="78.1552%" y="85" width="0.0534%" height="15" fill="rgb(228,22,38)" fg:x="70317" fg:w="48"/><text x="78.4052%" y="95.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (6,564 samples, 7.30%)</title><rect x="71.1463%" y="117" width="7.2957%" height="15" fill="rgb(235,168,5)" fg:x="64011" fg:w="6564"/><text x="71.3963%" y="127.50">natto::cor..</text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (5,933 samples, 6.59%)</title><rect x="71.8476%" y="101" width="6.5943%" height="15" fill="rgb(221,155,16)" fg:x="64642" fg:w="5933"/><text x="72.0976%" y="111.50">natto::co..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (210 samples, 0.23%)</title><rect x="78.2085%" y="85" width="0.2334%" height="15" fill="rgb(215,215,53)" fg:x="70365" fg:w="210"/><text x="78.4585%" y="95.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (191 samples, 0.21%)</title><rect x="78.4419%" y="117" width="0.2123%" height="15" fill="rgb(223,4,10)" fg:x="70575" fg:w="191"/><text x="78.6919%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move (280 samples, 0.31%)</title><rect x="78.6565%" y="117" width="0.3112%" height="15" fill="rgb(234,103,6)" fg:x="70768" fg:w="280"/><text x="78.9065%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move::make_basic_move (75 samples, 0.08%)</title><rect x="78.9677%" y="117" width="0.0834%" height="15" fill="rgb(227,97,0)" fg:x="71048" fg:w="75"/><text x="79.2177%" y="127.50"></text></g><g><title>core::num::_&lt;impl isize&gt;::abs (47 samples, 0.05%)</title><rect x="79.0510%" y="101" width="0.0522%" height="15" fill="rgb(234,150,53)" fg:x="71123" fg:w="47"/><text x="79.3010%" y="111.50"></text></g><g><title>natto::core::board::Board::get_piece (182 samples, 0.20%)</title><rect x="79.1044%" y="101" width="0.2023%" height="15" fill="rgb(228,201,54)" fg:x="71171" fg:w="182"/><text x="79.3544%" y="111.50"></text></g><g><title>natto::core::board::Board::remove_piece (377 samples, 0.42%)</title><rect x="79.3067%" y="101" width="0.4190%" height="15" fill="rgb(222,22,37)" fg:x="71353" fg:w="377"/><text x="79.5567%" y="111.50"></text></g><g><title>natto::core::move::Move::get_base_move (126 samples, 0.14%)</title><rect x="79.7257%" y="101" width="0.1400%" height="15" fill="rgb(237,53,32)" fg:x="71730" fg:w="126"/><text x="79.9757%" y="111.50"></text></g><g><title>natto::core::position::Position::make_move::make_basic_move (237 samples, 0.26%)</title><rect x="79.8657%" y="101" width="0.2634%" height="15" fill="rgb(233,25,53)" fg:x="71856" fg:w="237"/><text x="80.1157%" y="111.50"></text></g><g><title>natto::core::board::Board::remove_piece (848 samples, 0.94%)</title><rect x="80.1292%" y="85" width="0.9425%" height="15" fill="rgb(210,40,34)" fg:x="72093" fg:w="848"/><text x="80.3792%" y="95.50"></text></g><g><title>natto::core::position::Position::put_piece (62 samples, 0.07%)</title><rect x="81.0717%" y="85" width="0.0689%" height="15" fill="rgb(241,220,44)" fg:x="72941" fg:w="62"/><text x="81.3217%" y="95.50"></text></g><g><title>natto::core::position::Position::move_piece (958 samples, 1.06%)</title><rect x="80.1292%" y="101" width="1.0648%" height="15" fill="rgb(235,28,35)" fg:x="72093" fg:w="958"/><text x="80.3792%" y="111.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (47 samples, 0.05%)</title><rect x="81.1417%" y="85" width="0.0522%" height="15" fill="rgb(210,56,17)" fg:x="73004" fg:w="47"/><text x="81.3917%" y="95.50"></text></g><g><title>natto::core::position::Position::put_piece (73 samples, 0.08%)</title><rect x="81.1939%" y="101" width="0.0811%" height="15" fill="rgb(224,130,29)" fg:x="73051" fg:w="73"/><text x="81.4439%" y="111.50"></text></g><g><title>natto::core::position::Position::make_move (2,076 samples, 2.31%)</title><rect x="79.0510%" y="117" width="2.3074%" height="15" fill="rgb(235,212,8)" fg:x="71123" fg:w="2076"/><text x="79.3010%" y="127.50">n..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (65 samples, 0.07%)</title><rect x="81.2862%" y="101" width="0.0722%" height="15" fill="rgb(223,33,50)" fg:x="73134" fg:w="65"/><text x="81.5362%" y="111.50"></text></g><g><title>natto::core::position::Position::put_piece (80 samples, 0.09%)</title><rect x="81.3584%" y="117" width="0.0889%" height="15" fill="rgb(219,149,13)" fg:x="73199" fg:w="80"/><text x="81.6084%" y="127.50"></text></g><g><title>natto::core::position::Position::remove_piece (16 samples, 0.02%)</title><rect x="81.4474%" y="117" width="0.0178%" height="15" fill="rgb(250,156,29)" fg:x="73279" fg:w="16"/><text x="81.6974%" y="127.50"></text></g><g><title>natto::core::board::Board::remove_piece (819 samples, 0.91%)</title><rect x="81.6674%" y="101" width="0.9103%" height="15" fill="rgb(216,193,19)" fg:x="73477" fg:w="819"/><text x="81.9174%" y="111.50"></text></g><g><title>natto::core::position::Position::put_piece (60 samples, 0.07%)</title><rect x="82.5777%" y="101" width="0.0667%" height="15" fill="rgb(216,135,14)" fg:x="74296" fg:w="60"/><text x="82.8277%" y="111.50"></text></g><g><title>natto::core::position::Position::unmake_move (1,090 samples, 1.21%)</title><rect x="81.4651%" y="117" width="1.2115%" height="15" fill="rgb(241,47,5)" fg:x="73295" fg:w="1090"/><text x="81.7151%" y="127.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (29 samples, 0.03%)</title><rect x="82.6444%" y="101" width="0.0322%" height="15" fill="rgb(233,42,35)" fg:x="74356" fg:w="29"/><text x="82.8944%" y="111.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.01%)</title><rect x="82.8022%" y="101" width="0.0122%" height="15" fill="rgb(231,13,6)" fg:x="74498" fg:w="11"/><text x="83.0522%" y="111.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (9 samples, 0.01%)</title><rect x="82.8145%" y="101" width="0.0100%" height="15" fill="rgb(207,181,40)" fg:x="74509" fg:w="9"/><text x="83.0645%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.01%)</title><rect x="82.8345%" y="85" width="0.0144%" height="15" fill="rgb(254,173,49)" fg:x="74527" fg:w="13"/><text x="83.0845%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (50 samples, 0.06%)</title><rect x="82.8623%" y="85" width="0.0556%" height="15" fill="rgb(221,1,38)" fg:x="74552" fg:w="50"/><text x="83.1123%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (50 samples, 0.06%)</title><rect x="82.8623%" y="69" width="0.0556%" height="15" fill="rgb(206,124,46)" fg:x="74552" fg:w="50"/><text x="83.1123%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (48 samples, 0.05%)</title><rect x="82.9234%" y="85" width="0.0534%" height="15" fill="rgb(249,21,11)" fg:x="74607" fg:w="48"/><text x="83.1734%" y="95.50"></text></g><g><title>core::hash::Hasher::write_u8 (11 samples, 0.01%)</title><rect x="82.9767%" y="85" width="0.0122%" height="15" fill="rgb(222,201,40)" fg:x="74655" fg:w="11"/><text x="83.2267%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (154 samples, 0.17%)</title><rect x="82.8345%" y="101" width="0.1712%" height="15" fill="rgb(235,61,29)" fg:x="74527" fg:w="154"/><text x="83.0845%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (14 samples, 0.02%)</title><rect x="83.0056%" y="101" width="0.0156%" height="15" fill="rgb(219,207,3)" fg:x="74681" fg:w="14"/><text x="83.2556%" y="111.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (12 samples, 0.01%)</title><rect x="83.0379%" y="101" width="0.0133%" height="15" fill="rgb(222,56,46)" fg:x="74710" fg:w="12"/><text x="83.2879%" y="111.50"></text></g><g><title>natto::core::position::Position::update_hash_code (353 samples, 0.39%)</title><rect x="82.6766%" y="117" width="0.3923%" height="15" fill="rgb(239,76,54)" fg:x="74385" fg:w="353"/><text x="82.9266%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (65 samples, 0.07%)</title><rect x="83.1746%" y="85" width="0.0722%" height="15" fill="rgb(231,124,27)" fg:x="74833" fg:w="65"/><text x="83.4246%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (65 samples, 0.07%)</title><rect x="83.1746%" y="69" width="0.0722%" height="15" fill="rgb(249,195,6)" fg:x="74833" fg:w="65"/><text x="83.4246%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (33 samples, 0.04%)</title><rect x="83.2468%" y="85" width="0.0367%" height="15" fill="rgb(237,174,47)" fg:x="74898" fg:w="33"/><text x="83.4968%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (11 samples, 0.01%)</title><rect x="83.2924%" y="85" width="0.0122%" height="15" fill="rgb(206,201,31)" fg:x="74939" fg:w="11"/><text x="83.5424%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (140 samples, 0.16%)</title><rect x="83.1612%" y="101" width="0.1556%" height="15" fill="rgb(231,57,52)" fg:x="74821" fg:w="140"/><text x="83.4112%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (11 samples, 0.01%)</title><rect x="83.3046%" y="85" width="0.0122%" height="15" fill="rgb(248,177,22)" fg:x="74950" fg:w="11"/><text x="83.5546%" y="95.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (284 samples, 0.32%)</title><rect x="83.3168%" y="101" width="0.3157%" height="15" fill="rgb(215,211,37)" fg:x="74961" fg:w="284"/><text x="83.5668%" y="111.50"></text></g><g><title>natto::core::position::Position::en_passant_capture_square (97 samples, 0.11%)</title><rect x="83.6325%" y="101" width="0.1078%" height="15" fill="rgb(241,128,51)" fg:x="75245" fg:w="97"/><text x="83.8825%" y="111.50"></text></g><g><title>natto::core::position::UndoMoveInfo::new (620 samples, 0.69%)</title><rect x="83.0690%" y="117" width="0.6891%" height="15" fill="rgb(227,165,31)" fg:x="74738" fg:w="620"/><text x="83.3190%" y="127.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (16 samples, 0.02%)</title><rect x="83.7403%" y="101" width="0.0178%" height="15" fill="rgb(228,167,24)" fg:x="75342" fg:w="16"/><text x="83.9903%" y="111.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::process_move (12,506 samples, 13.90%)</title><rect x="69.9703%" y="133" width="13.9000%" height="15" fill="rgb(228,143,12)" fg:x="62953" fg:w="12506"/><text x="70.2203%" y="143.50">natto::eval::node_cou..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (101 samples, 0.11%)</title><rect x="83.7581%" y="117" width="0.1123%" height="15" fill="rgb(249,149,8)" fg:x="75358" fg:w="101"/><text x="84.0081%" y="127.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (10 samples, 0.01%)</title><rect x="83.8704%" y="117" width="0.0111%" height="15" fill="rgb(243,35,44)" fg:x="75459" fg:w="10"/><text x="84.1204%" y="127.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (11 samples, 0.01%)</title><rect x="83.8815%" y="117" width="0.0122%" height="15" fill="rgb(246,89,9)" fg:x="75469" fg:w="11"/><text x="84.1315%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="83.8937%" y="117" width="0.0100%" height="15" fill="rgb(233,213,13)" fg:x="75480" fg:w="9"/><text x="84.1437%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 0.03%)</title><rect x="83.9037%" y="117" width="0.0322%" height="15" fill="rgb(233,141,41)" fg:x="75489" fg:w="29"/><text x="84.1537%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.01%)</title><rect x="83.9359%" y="101" width="0.0133%" height="15" fill="rgb(239,167,4)" fg:x="75518" fg:w="12"/><text x="84.1859%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (419 samples, 0.47%)</title><rect x="83.9493%" y="101" width="0.4657%" height="15" fill="rgb(209,217,16)" fg:x="75530" fg:w="419"/><text x="84.1993%" y="111.50"></text></g><g><title>_platform_memmove (341 samples, 0.38%)</title><rect x="84.0360%" y="85" width="0.3790%" height="15" fill="rgb(219,88,35)" fg:x="75608" fg:w="341"/><text x="84.2860%" y="95.50"></text></g><g><title>__rustc::__rdl_alloc (18 samples, 0.02%)</title><rect x="84.4228%" y="85" width="0.0200%" height="15" fill="rgb(220,193,23)" fg:x="75956" fg:w="18"/><text x="84.6728%" y="95.50"></text></g><g><title>_malloc_zone_malloc (48 samples, 0.05%)</title><rect x="84.4428%" y="85" width="0.0534%" height="15" fill="rgb(230,90,52)" fg:x="75974" fg:w="48"/><text x="84.6928%" y="95.50"></text></g><g><title>alloc::alloc::alloc (151 samples, 0.17%)</title><rect x="84.4183%" y="101" width="0.1678%" height="15" fill="rgb(252,106,19)" fg:x="75952" fg:w="151"/><text x="84.6683%" y="111.50"></text></g><g><title>nanov2_malloc_type (81 samples, 0.09%)</title><rect x="84.4961%" y="85" width="0.0900%" height="15" fill="rgb(206,74,20)" fg:x="76022" fg:w="81"/><text x="84.7461%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (18 samples, 0.02%)</title><rect x="84.5861%" y="101" width="0.0200%" height="15" fill="rgb(230,138,44)" fg:x="76103" fg:w="18"/><text x="84.8361%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (221 samples, 0.25%)</title><rect x="84.6128%" y="101" width="0.2456%" height="15" fill="rgb(235,182,43)" fg:x="76127" fg:w="221"/><text x="84.8628%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (14 samples, 0.02%)</title><rect x="84.8585%" y="101" width="0.0156%" height="15" fill="rgb(242,16,51)" fg:x="76348" fg:w="14"/><text x="85.1085%" y="111.50"></text></g><g><title>core::ptr::read (210 samples, 0.23%)</title><rect x="84.8851%" y="101" width="0.2334%" height="15" fill="rgb(248,9,4)" fg:x="76372" fg:w="210"/><text x="85.1351%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,079 samples, 1.20%)</title><rect x="83.9359%" y="117" width="1.1993%" height="15" fill="rgb(210,31,22)" fg:x="75518" fg:w="1079"/><text x="84.1859%" y="127.50"></text></g><g><title>nanov2_malloc_type (14 samples, 0.02%)</title><rect x="85.1196%" y="101" width="0.0156%" height="15" fill="rgb(239,54,39)" fg:x="76583" fg:w="14"/><text x="85.3696%" y="111.50"></text></g><g><title>DYLD-STUB$$memcpy (15 samples, 0.02%)</title><rect x="85.1452%" y="101" width="0.0167%" height="15" fill="rgb(230,99,41)" fg:x="76606" fg:w="15"/><text x="85.3952%" y="111.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (366 samples, 0.41%)</title><rect x="85.1452%" y="117" width="0.4068%" height="15" fill="rgb(253,106,12)" fg:x="76606" fg:w="366"/><text x="85.3952%" y="127.50"></text></g><g><title>_platform_memmove (351 samples, 0.39%)</title><rect x="85.1619%" y="101" width="0.3901%" height="15" fill="rgb(213,46,41)" fg:x="76621" fg:w="351"/><text x="85.4119%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.04%)</title><rect x="85.5576%" y="117" width="0.0389%" height="15" fill="rgb(215,133,35)" fg:x="76977" fg:w="35"/><text x="85.8076%" y="127.50"></text></g><g><title>DYLD-STUB$$memcpy (12 samples, 0.01%)</title><rect x="85.5965%" y="101" width="0.0133%" height="15" fill="rgb(213,28,5)" fg:x="77012" fg:w="12"/><text x="85.8465%" y="111.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (411 samples, 0.46%)</title><rect x="85.5965%" y="117" width="0.4568%" height="15" fill="rgb(215,77,49)" fg:x="77012" fg:w="411"/><text x="85.8465%" y="127.50"></text></g><g><title>_platform_memmove (399 samples, 0.44%)</title><rect x="85.6098%" y="101" width="0.4435%" height="15" fill="rgb(248,100,22)" fg:x="77024" fg:w="399"/><text x="85.8598%" y="111.50"></text></g><g><title>DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="86.0611%" y="101" width="0.0100%" height="15" fill="rgb(208,67,9)" fg:x="77430" fg:w="9"/><text x="86.3111%" y="111.50"></text></g><g><title>_malloc_zone_malloc (36 samples, 0.04%)</title><rect x="86.0755%" y="101" width="0.0400%" height="15" fill="rgb(219,133,21)" fg:x="77443" fg:w="36"/><text x="86.3255%" y="111.50"></text></g><g><title>alloc::alloc::alloc (127 samples, 0.14%)</title><rect x="86.0611%" y="117" width="0.1412%" height="15" fill="rgb(246,46,29)" fg:x="77430" fg:w="127"/><text x="86.3111%" y="127.50"></text></g><g><title>nanov2_malloc_type (78 samples, 0.09%)</title><rect x="86.1155%" y="101" width="0.0867%" height="15" fill="rgb(246,185,52)" fg:x="77479" fg:w="78"/><text x="86.3655%" y="111.50"></text></g><g><title>DYLD-STUB$$free (24 samples, 0.03%)</title><rect x="86.2022%" y="101" width="0.0267%" height="15" fill="rgb(252,136,11)" fg:x="77557" fg:w="24"/><text x="86.4522%" y="111.50"></text></g><g><title>_free (38 samples, 0.04%)</title><rect x="86.2289%" y="101" width="0.0422%" height="15" fill="rgb(219,138,53)" fg:x="77581" fg:w="38"/><text x="86.4789%" y="111.50"></text></g><g><title>__bzero (9 samples, 0.01%)</title><rect x="86.4345%" y="85" width="0.0100%" height="15" fill="rgb(211,51,23)" fg:x="77766" fg:w="9"/><text x="86.6845%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (245 samples, 0.27%)</title><rect x="86.2022%" y="117" width="0.2723%" height="15" fill="rgb(247,221,28)" fg:x="77557" fg:w="245"/><text x="86.4522%" y="127.50"></text></g><g><title>_nanov2_free (183 samples, 0.20%)</title><rect x="86.2711%" y="101" width="0.2034%" height="15" fill="rgb(251,222,45)" fg:x="77619" fg:w="183"/><text x="86.5211%" y="111.50"></text></g><g><title>_platform_memset (27 samples, 0.03%)</title><rect x="86.4445%" y="85" width="0.0300%" height="15" fill="rgb(217,162,53)" fg:x="77775" fg:w="27"/><text x="86.6945%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9 samples, 0.01%)</title><rect x="86.4745%" y="117" width="0.0100%" height="15" fill="rgb(229,93,14)" fg:x="77802" fg:w="9"/><text x="86.7245%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::extend_from_iter (278 samples, 0.31%)</title><rect x="86.4845%" y="117" width="0.3090%" height="15" fill="rgb(209,67,49)" fg:x="77811" fg:w="278"/><text x="86.7345%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (21 samples, 0.02%)</title><rect x="86.7991%" y="117" width="0.0233%" height="15" fill="rgb(213,87,29)" fg:x="78094" fg:w="21"/><text x="87.0491%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::truncate (36 samples, 0.04%)</title><rect x="86.8224%" y="117" width="0.0400%" height="15" fill="rgb(205,151,52)" fg:x="78115" fg:w="36"/><text x="87.0724%" y="127.50"></text></g><g><title>DYLD-STUB$$memcpy (14 samples, 0.02%)</title><rect x="86.8647%" y="101" width="0.0156%" height="15" fill="rgb(253,215,39)" fg:x="78153" fg:w="14"/><text x="87.1147%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.05%)</title><rect x="86.8647%" y="117" width="0.0489%" height="15" fill="rgb(221,220,41)" fg:x="78153" fg:w="44"/><text x="87.1147%" y="127.50"></text></g><g><title>_platform_memmove (30 samples, 0.03%)</title><rect x="86.8802%" y="101" width="0.0333%" height="15" fill="rgb(218,133,21)" fg:x="78167" fg:w="30"/><text x="87.1302%" y="111.50"></text></g><g><title>core::mem::size_of_val_raw (12 samples, 0.01%)</title><rect x="86.9136%" y="117" width="0.0133%" height="15" fill="rgb(221,193,43)" fg:x="78197" fg:w="12"/><text x="87.1636%" y="127.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (157 samples, 0.17%)</title><rect x="86.9269%" y="117" width="0.1745%" height="15" fill="rgb(240,128,52)" fg:x="78209" fg:w="157"/><text x="87.1769%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (17 samples, 0.02%)</title><rect x="87.1047%" y="117" width="0.0189%" height="15" fill="rgb(253,114,12)" fg:x="78369" fg:w="17"/><text x="87.3547%" y="127.50"></text></g><g><title>core::ptr::write (9 samples, 0.01%)</title><rect x="87.1236%" y="117" width="0.0100%" height="15" fill="rgb(215,223,47)" fg:x="78386" fg:w="9"/><text x="87.3736%" y="127.50"></text></g><g><title>nanov2_malloc_type (9 samples, 0.01%)</title><rect x="87.1336%" y="117" width="0.0100%" height="15" fill="rgb(248,225,23)" fg:x="78395" fg:w="9"/><text x="87.3836%" y="127.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color::_{{closure}} (12 samples, 0.01%)</title><rect x="87.1459%" y="117" width="0.0133%" height="15" fill="rgb(250,108,0)" fg:x="78406" fg:w="12"/><text x="87.3959%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (13 samples, 0.01%)</title><rect x="87.1592%" y="117" width="0.0144%" height="15" fill="rgb(228,208,7)" fg:x="78418" fg:w="13"/><text x="87.4092%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::new (22 samples, 0.02%)</title><rect x="87.1736%" y="117" width="0.0245%" height="15" fill="rgb(244,45,10)" fg:x="78431" fg:w="22"/><text x="87.4236%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.04%)</title><rect x="87.2225%" y="101" width="0.0389%" height="15" fill="rgb(207,125,25)" fg:x="78475" fg:w="35"/><text x="87.4725%" y="111.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (102 samples, 0.11%)</title><rect x="87.2615%" y="101" width="0.1134%" height="15" fill="rgb(210,195,18)" fg:x="78510" fg:w="102"/><text x="87.5115%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (609 samples, 0.68%)</title><rect x="88.7375%" y="85" width="0.6769%" height="15" fill="rgb(249,80,12)" fg:x="79838" fg:w="609"/><text x="88.9875%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (264 samples, 0.29%)</title><rect x="89.1209%" y="69" width="0.2934%" height="15" fill="rgb(221,65,9)" fg:x="80183" fg:w="264"/><text x="89.3709%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (37 samples, 0.04%)</title><rect x="89.4144%" y="85" width="0.0411%" height="15" fill="rgb(235,49,36)" fg:x="80447" fg:w="37"/><text x="89.6644%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.03%)</title><rect x="89.4555%" y="85" width="0.0267%" height="15" fill="rgb(225,32,20)" fg:x="80484" fg:w="24"/><text x="89.7055%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (92 samples, 0.10%)</title><rect x="89.4822%" y="85" width="0.1023%" height="15" fill="rgb(215,141,46)" fg:x="80508" fg:w="92"/><text x="89.7322%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (454 samples, 0.50%)</title><rect x="89.5844%" y="85" width="0.5046%" height="15" fill="rgb(250,160,47)" fg:x="80600" fg:w="454"/><text x="89.8344%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (452 samples, 0.50%)</title><rect x="89.5866%" y="69" width="0.5024%" height="15" fill="rgb(216,222,40)" fg:x="80602" fg:w="452"/><text x="89.8366%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.02%)</title><rect x="90.0890%" y="85" width="0.0211%" height="15" fill="rgb(234,217,39)" fg:x="81054" fg:w="19"/><text x="90.3390%" y="95.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.01%)</title><rect x="90.1101%" y="85" width="0.0122%" height="15" fill="rgb(207,178,40)" fg:x="81073" fg:w="11"/><text x="90.3601%" y="95.50"></text></g><g><title>&lt;natto::core::board::BoardSideIter as core::iter::traits::iterator::Iterator&gt;::nth (20 samples, 0.02%)</title><rect x="90.1224%" y="85" width="0.0222%" height="15" fill="rgb(221,136,13)" fg:x="81084" fg:w="20"/><text x="90.3724%" y="95.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (226 samples, 0.25%)</title><rect x="90.1446%" y="85" width="0.2512%" height="15" fill="rgb(249,199,10)" fg:x="81104" fg:w="226"/><text x="90.3946%" y="95.50"></text></g><g><title>&lt;natto::util::bitboard_iterator::BitboardIterator as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.10%)</title><rect x="90.3958%" y="85" width="0.0956%" height="15" fill="rgb(249,222,13)" fg:x="81330" fg:w="86"/><text x="90.6458%" y="95.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (43 samples, 0.05%)</title><rect x="90.4914%" y="85" width="0.0478%" height="15" fill="rgb(244,185,38)" fg:x="81416" fg:w="43"/><text x="90.7414%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (220 samples, 0.24%)</title><rect x="90.5392%" y="85" width="0.2445%" height="15" fill="rgb(236,202,9)" fg:x="81459" fg:w="220"/><text x="90.7892%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.01%)</title><rect x="90.7837%" y="85" width="0.0122%" height="15" fill="rgb(250,229,37)" fg:x="81679" fg:w="11"/><text x="91.0337%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (13 samples, 0.01%)</title><rect x="90.7959%" y="85" width="0.0144%" height="15" fill="rgb(206,174,23)" fg:x="81690" fg:w="13"/><text x="91.0459%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (320 samples, 0.36%)</title><rect x="90.8104%" y="85" width="0.3557%" height="15" fill="rgb(211,33,43)" fg:x="81703" fg:w="320"/><text x="91.0604%" y="95.50"></text></g><g><title>core::hash::Hasher::write_u8 (34 samples, 0.04%)</title><rect x="91.1660%" y="85" width="0.0378%" height="15" fill="rgb(245,58,50)" fg:x="82023" fg:w="34"/><text x="91.4160%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11 samples, 0.01%)</title><rect x="91.2049%" y="85" width="0.0122%" height="15" fill="rgb(244,68,36)" fg:x="82058" fg:w="11"/><text x="91.4549%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (55 samples, 0.06%)</title><rect x="91.2172%" y="85" width="0.0611%" height="15" fill="rgb(232,229,15)" fg:x="82069" fg:w="55"/><text x="91.4672%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (54 samples, 0.06%)</title><rect x="91.2783%" y="85" width="0.0600%" height="15" fill="rgb(254,30,23)" fg:x="82124" fg:w="54"/><text x="91.5283%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (216 samples, 0.24%)</title><rect x="91.3383%" y="85" width="0.2401%" height="15" fill="rgb(235,160,14)" fg:x="82178" fg:w="216"/><text x="91.5883%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (111 samples, 0.12%)</title><rect x="91.5784%" y="85" width="0.1234%" height="15" fill="rgb(212,155,44)" fg:x="82394" fg:w="111"/><text x="91.8284%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (15 samples, 0.02%)</title><rect x="91.7218%" y="69" width="0.0167%" height="15" fill="rgb(226,2,50)" fg:x="82523" fg:w="15"/><text x="91.9718%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (13 samples, 0.01%)</title><rect x="91.7384%" y="69" width="0.0144%" height="15" fill="rgb(234,177,6)" fg:x="82538" fg:w="13"/><text x="91.9884%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (171 samples, 0.19%)</title><rect x="91.7529%" y="69" width="0.1901%" height="15" fill="rgb(217,24,9)" fg:x="82551" fg:w="171"/><text x="92.0029%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (171 samples, 0.19%)</title><rect x="91.7529%" y="53" width="0.1901%" height="15" fill="rgb(220,13,46)" fg:x="82551" fg:w="171"/><text x="92.0029%" y="63.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (18 samples, 0.02%)</title><rect x="91.9430%" y="69" width="0.0200%" height="15" fill="rgb(239,221,27)" fg:x="82722" fg:w="18"/><text x="92.1930%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (115 samples, 0.13%)</title><rect x="91.9630%" y="69" width="0.1278%" height="15" fill="rgb(222,198,25)" fg:x="82740" fg:w="115"/><text x="92.2130%" y="79.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (44 samples, 0.05%)</title><rect x="92.0963%" y="69" width="0.0489%" height="15" fill="rgb(211,99,13)" fg:x="82860" fg:w="44"/><text x="92.3463%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (35 samples, 0.04%)</title><rect x="92.1519%" y="69" width="0.0389%" height="15" fill="rgb(232,111,31)" fg:x="82910" fg:w="35"/><text x="92.4019%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (463 samples, 0.51%)</title><rect x="91.7151%" y="85" width="0.5146%" height="15" fill="rgb(245,82,37)" fg:x="82517" fg:w="463"/><text x="91.9651%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (35 samples, 0.04%)</title><rect x="92.1908%" y="69" width="0.0389%" height="15" fill="rgb(227,149,46)" fg:x="82945" fg:w="35"/><text x="92.4408%" y="79.50"></text></g><g><title>natto::core::board::Board::bitboard_all_pieces (17 samples, 0.02%)</title><rect x="92.2397%" y="85" width="0.0189%" height="15" fill="rgb(218,36,50)" fg:x="82989" fg:w="17"/><text x="92.4897%" y="95.50"></text></g><g><title>natto::core::board::Board::bitboard_by_color_and_piece_type (21 samples, 0.02%)</title><rect x="92.2586%" y="85" width="0.0233%" height="15" fill="rgb(226,80,48)" fg:x="83006" fg:w="21"/><text x="92.5086%" y="95.50"></text></g><g><title>natto::core::move::BaseMove::new (374 samples, 0.42%)</title><rect x="92.2908%" y="85" width="0.4157%" height="15" fill="rgb(238,224,15)" fg:x="83035" fg:w="374"/><text x="92.5408%" y="95.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (526 samples, 0.58%)</title><rect x="92.7110%" y="85" width="0.5846%" height="15" fill="rgb(241,136,10)" fg:x="83413" fg:w="526"/><text x="92.9610%" y="95.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (36 samples, 0.04%)</title><rect x="93.2956%" y="85" width="0.0400%" height="15" fill="rgb(208,32,45)" fg:x="83939" fg:w="36"/><text x="93.5456%" y="95.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (1,072 samples, 1.19%)</title><rect x="93.4279%" y="69" width="1.1915%" height="15" fill="rgb(207,135,9)" fg:x="84058" fg:w="1072"/><text x="93.6779%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 0.03%)</title><rect x="94.6194%" y="69" width="0.0322%" height="15" fill="rgb(206,86,44)" fg:x="85130" fg:w="29"/><text x="94.8694%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (89 samples, 0.10%)</title><rect x="94.6516%" y="69" width="0.0989%" height="15" fill="rgb(245,177,15)" fg:x="85159" fg:w="89"/><text x="94.9016%" y="79.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (51 samples, 0.06%)</title><rect x="94.7505%" y="69" width="0.0567%" height="15" fill="rgb(206,64,50)" fg:x="85248" fg:w="51"/><text x="95.0005%" y="79.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (49 samples, 0.05%)</title><rect x="94.8072%" y="69" width="0.0545%" height="15" fill="rgb(234,36,40)" fg:x="85299" fg:w="49"/><text x="95.0572%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (122 samples, 0.14%)</title><rect x="94.8617%" y="69" width="0.1356%" height="15" fill="rgb(213,64,8)" fg:x="85348" fg:w="122"/><text x="95.1117%" y="79.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (18 samples, 0.02%)</title><rect x="94.9973%" y="69" width="0.0200%" height="15" fill="rgb(210,75,36)" fg:x="85470" fg:w="18"/><text x="95.2473%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.02%)</title><rect x="95.0173%" y="69" width="0.0178%" height="15" fill="rgb(229,88,21)" fg:x="85488" fg:w="16"/><text x="95.2673%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 0.02%)</title><rect x="95.0384%" y="53" width="0.0211%" height="15" fill="rgb(252,204,47)" fg:x="85507" fg:w="19"/><text x="95.2884%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (16 samples, 0.02%)</title><rect x="95.0595%" y="53" width="0.0178%" height="15" fill="rgb(208,77,27)" fg:x="85526" fg:w="16"/><text x="95.3095%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (52 samples, 0.06%)</title><rect x="95.0773%" y="53" width="0.0578%" height="15" fill="rgb(221,76,26)" fg:x="85542" fg:w="52"/><text x="95.3273%" y="63.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (256 samples, 0.28%)</title><rect x="95.1351%" y="53" width="0.2845%" height="15" fill="rgb(225,139,18)" fg:x="85594" fg:w="256"/><text x="95.3851%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (256 samples, 0.28%)</title><rect x="95.1351%" y="37" width="0.2845%" height="15" fill="rgb(230,137,11)" fg:x="85594" fg:w="256"/><text x="95.3851%" y="47.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (27 samples, 0.03%)</title><rect x="95.4196%" y="53" width="0.0300%" height="15" fill="rgb(212,28,1)" fg:x="85850" fg:w="27"/><text x="95.6696%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (237 samples, 0.26%)</title><rect x="95.4496%" y="53" width="0.2634%" height="15" fill="rgb(248,164,17)" fg:x="85877" fg:w="237"/><text x="95.6996%" y="63.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (23 samples, 0.03%)</title><rect x="95.7286%" y="53" width="0.0256%" height="15" fill="rgb(222,171,42)" fg:x="86128" fg:w="23"/><text x="95.9786%" y="63.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (25 samples, 0.03%)</title><rect x="95.7542%" y="53" width="0.0278%" height="15" fill="rgb(243,84,45)" fg:x="86151" fg:w="25"/><text x="96.0042%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (725 samples, 0.81%)</title><rect x="95.0384%" y="69" width="0.8058%" height="15" fill="rgb(252,49,23)" fg:x="85507" fg:w="725"/><text x="95.2884%" y="79.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (56 samples, 0.06%)</title><rect x="95.7820%" y="53" width="0.0622%" height="15" fill="rgb(215,19,7)" fg:x="86176" fg:w="56"/><text x="96.0320%" y="63.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.01%)</title><rect x="95.8442%" y="69" width="0.0111%" height="15" fill="rgb(238,81,41)" fg:x="86232" fg:w="10"/><text x="96.0942%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (54 samples, 0.06%)</title><rect x="95.8653%" y="69" width="0.0600%" height="15" fill="rgb(210,199,37)" fg:x="86251" fg:w="54"/><text x="96.1153%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (2,360 samples, 2.62%)</title><rect x="93.3356%" y="85" width="2.6231%" height="15" fill="rgb(244,192,49)" fg:x="83975" fg:w="2360"/><text x="93.5856%" y="95.50">na..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (30 samples, 0.03%)</title><rect x="95.9254%" y="69" width="0.0333%" height="15" fill="rgb(226,211,11)" fg:x="86305" fg:w="30"/><text x="96.1754%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (64 samples, 0.07%)</title><rect x="95.9587%" y="85" width="0.0711%" height="15" fill="rgb(236,162,54)" fg:x="86335" fg:w="64"/><text x="96.2087%" y="95.50"></text></g><g><title>natto::core::position::Position::can_castle (13 samples, 0.01%)</title><rect x="96.0298%" y="85" width="0.0144%" height="15" fill="rgb(220,229,9)" fg:x="86399" fg:w="13"/><text x="96.2798%" y="95.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (7,827 samples, 8.70%)</title><rect x="87.3748%" y="101" width="8.6995%" height="15" fill="rgb(250,87,22)" fg:x="78612" fg:w="7827"/><text x="87.6248%" y="111.50">natto::core:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (27 samples, 0.03%)</title><rect x="96.0443%" y="85" width="0.0300%" height="15" fill="rgb(239,43,17)" fg:x="86412" fg:w="27"/><text x="96.2943%" y="95.50"></text></g><g><title>natto::core::move_gen::get_non_sliding_moves_by_piece_type (39 samples, 0.04%)</title><rect x="96.0743%" y="101" width="0.0433%" height="15" fill="rgb(231,177,25)" fg:x="86439" fg:w="39"/><text x="96.3243%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves (8,085 samples, 8.99%)</title><rect x="87.1981%" y="117" width="8.9862%" height="15" fill="rgb(219,179,1)" fg:x="78453" fg:w="8085"/><text x="87.4481%" y="127.50">natto::core::..</text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (60 samples, 0.07%)</title><rect x="96.1176%" y="101" width="0.0667%" height="15" fill="rgb(238,219,53)" fg:x="86478" fg:w="60"/><text x="96.3676%" y="111.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (86,307 samples, 95.93%)</title><rect x="0.2579%" y="149" width="95.9276%" height="15" fill="rgb(232,167,36)" fg:x="232" fg:w="86307"/><text x="0.5079%" y="159.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes (11,080 samples, 12.32%)</title><rect x="83.8704%" y="133" width="12.3151%" height="15" fill="rgb(244,19,51)" fg:x="75459" fg:w="11080"/><text x="84.1204%" y="143.50">natto::eval::node_..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.01%)</title><rect x="96.2599%" y="133" width="0.0122%" height="15" fill="rgb(224,6,22)" fg:x="86606" fg:w="11"/><text x="96.5099%" y="143.50"></text></g><g><title>natto::core::board::Board::remove_piece (20 samples, 0.02%)</title><rect x="96.2821%" y="133" width="0.0222%" height="15" fill="rgb(224,145,5)" fg:x="86626" fg:w="20"/><text x="96.5321%" y="143.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (10 samples, 0.01%)</title><rect x="96.3044%" y="133" width="0.0111%" height="15" fill="rgb(234,130,49)" fg:x="86646" fg:w="10"/><text x="96.5544%" y="143.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (68 samples, 0.08%)</title><rect x="96.3155%" y="117" width="0.0756%" height="15" fill="rgb(254,6,2)" fg:x="86656" fg:w="68"/><text x="96.5655%" y="127.50"></text></g><g><title>natto::core::move_gen::non_sliding_piece_attacks (15 samples, 0.02%)</title><rect x="96.3911%" y="117" width="0.0167%" height="15" fill="rgb(208,96,46)" fg:x="86724" fg:w="15"/><text x="96.6411%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.01%)</title><rect x="96.4655%" y="101" width="0.0122%" height="15" fill="rgb(239,3,39)" fg:x="86791" fg:w="11"/><text x="96.7155%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.01%)</title><rect x="96.4655%" y="85" width="0.0122%" height="15" fill="rgb(233,210,1)" fg:x="86791" fg:w="11"/><text x="96.7155%" y="95.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (93 samples, 0.10%)</title><rect x="96.4822%" y="101" width="0.1034%" height="15" fill="rgb(244,137,37)" fg:x="86806" fg:w="93"/><text x="96.7322%" y="111.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11 samples, 0.01%)</title><rect x="96.5933%" y="101" width="0.0122%" height="15" fill="rgb(240,136,2)" fg:x="86906" fg:w="11"/><text x="96.8433%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.01%)</title><rect x="96.6145%" y="101" width="0.0144%" height="15" fill="rgb(239,18,37)" fg:x="86925" fg:w="13"/><text x="96.8645%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16 samples, 0.02%)</title><rect x="96.6467%" y="85" width="0.0178%" height="15" fill="rgb(218,185,22)" fg:x="86954" fg:w="16"/><text x="96.8967%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (66 samples, 0.07%)</title><rect x="96.6645%" y="85" width="0.0734%" height="15" fill="rgb(225,218,4)" fg:x="86970" fg:w="66"/><text x="96.9145%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (66 samples, 0.07%)</title><rect x="96.6645%" y="69" width="0.0734%" height="15" fill="rgb(230,182,32)" fg:x="86970" fg:w="66"/><text x="96.9145%" y="79.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (12 samples, 0.01%)</title><rect x="96.7378%" y="85" width="0.0133%" height="15" fill="rgb(242,56,43)" fg:x="87036" fg:w="12"/><text x="96.9878%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (69 samples, 0.08%)</title><rect x="96.7512%" y="85" width="0.0767%" height="15" fill="rgb(233,99,24)" fg:x="87048" fg:w="69"/><text x="97.0012%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (200 samples, 0.22%)</title><rect x="96.6389%" y="101" width="0.2223%" height="15" fill="rgb(234,209,42)" fg:x="86947" fg:w="200"/><text x="96.8889%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (22 samples, 0.02%)</title><rect x="96.8368%" y="85" width="0.0245%" height="15" fill="rgb(227,7,12)" fg:x="87125" fg:w="22"/><text x="97.0868%" y="95.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (520 samples, 0.58%)</title><rect x="96.3155%" y="133" width="0.5780%" height="15" fill="rgb(245,203,43)" fg:x="86656" fg:w="520"/><text x="96.5655%" y="143.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (437 samples, 0.49%)</title><rect x="96.4077%" y="117" width="0.4857%" height="15" fill="rgb(238,205,33)" fg:x="86739" fg:w="437"/><text x="96.6577%" y="127.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (15 samples, 0.02%)</title><rect x="96.8768%" y="101" width="0.0167%" height="15" fill="rgb(231,56,7)" fg:x="87161" fg:w="15"/><text x="97.1268%" y="111.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (13 samples, 0.01%)</title><rect x="96.8934%" y="133" width="0.0144%" height="15" fill="rgb(244,186,29)" fg:x="87176" fg:w="13"/><text x="97.1434%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (26 samples, 0.03%)</title><rect x="96.9090%" y="133" width="0.0289%" height="15" fill="rgb(234,111,31)" fg:x="87190" fg:w="26"/><text x="97.1590%" y="143.50"></text></g><g><title>natto::core::board::Board::get_piece (16 samples, 0.02%)</title><rect x="96.9457%" y="117" width="0.0178%" height="15" fill="rgb(241,149,10)" fg:x="87223" fg:w="16"/><text x="97.1957%" y="127.50"></text></g><g><title>natto::core::board::Board::remove_piece (14 samples, 0.02%)</title><rect x="96.9635%" y="117" width="0.0156%" height="15" fill="rgb(249,206,44)" fg:x="87239" fg:w="14"/><text x="97.2135%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move::make_basic_move (21 samples, 0.02%)</title><rect x="96.9879%" y="117" width="0.0233%" height="15" fill="rgb(251,153,30)" fg:x="87261" fg:w="21"/><text x="97.2379%" y="127.50"></text></g><g><title>natto::core::board::Board::remove_piece (66 samples, 0.07%)</title><rect x="97.0113%" y="101" width="0.0734%" height="15" fill="rgb(239,152,38)" fg:x="87282" fg:w="66"/><text x="97.2613%" y="111.50"></text></g><g><title>natto::core::position::Position::move_piece (75 samples, 0.08%)</title><rect x="97.0113%" y="117" width="0.0834%" height="15" fill="rgb(249,139,47)" fg:x="87282" fg:w="75"/><text x="97.2613%" y="127.50"></text></g><g><title>natto::core::position::Position::make_move (146 samples, 0.16%)</title><rect x="96.9412%" y="133" width="0.1623%" height="15" fill="rgb(244,64,35)" fg:x="87219" fg:w="146"/><text x="97.1912%" y="143.50"></text></g><g><title>natto::core::board::Board::remove_piece (69 samples, 0.08%)</title><rect x="97.1324%" y="117" width="0.0767%" height="15" fill="rgb(216,46,15)" fg:x="87391" fg:w="69"/><text x="97.3824%" y="127.50"></text></g><g><title>natto::core::position::Position::unmake_move (95 samples, 0.11%)</title><rect x="97.1124%" y="133" width="0.1056%" height="15" fill="rgb(250,74,19)" fg:x="87373" fg:w="95"/><text x="97.3624%" y="143.50"></text></g><g><title>natto::core::position::Position::update_hash_code (23 samples, 0.03%)</title><rect x="97.2180%" y="133" width="0.0256%" height="15" fill="rgb(249,42,33)" fg:x="87468" fg:w="23"/><text x="97.4680%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (12 samples, 0.01%)</title><rect x="97.2513%" y="117" width="0.0133%" height="15" fill="rgb(242,149,17)" fg:x="87498" fg:w="12"/><text x="97.5013%" y="127.50"></text></g><g><title>natto::core::move_gen::is_en_passant_capture_possible (27 samples, 0.03%)</title><rect x="97.2647%" y="117" width="0.0300%" height="15" fill="rgb(244,29,21)" fg:x="87510" fg:w="27"/><text x="97.5147%" y="127.50"></text></g><g><title>natto::core::position::UndoMoveInfo::new (51 samples, 0.06%)</title><rect x="97.2436%" y="133" width="0.0567%" height="15" fill="rgb(220,130,37)" fg:x="87491" fg:w="51"/><text x="97.4936%" y="143.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::process_move (1,010 samples, 1.12%)</title><rect x="96.1854%" y="149" width="1.1226%" height="15" fill="rgb(211,67,2)" fg:x="86539" fg:w="1010"/><text x="96.4354%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (71 samples, 0.08%)</title><rect x="97.3180%" y="117" width="0.0789%" height="15" fill="rgb(235,68,52)" fg:x="87558" fg:w="71"/><text x="97.5680%" y="127.50"></text></g><g><title>_platform_memmove (58 samples, 0.06%)</title><rect x="97.3325%" y="101" width="0.0645%" height="15" fill="rgb(246,142,3)" fg:x="87571" fg:w="58"/><text x="97.5825%" y="111.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.03%)</title><rect x="97.3981%" y="117" width="0.0345%" height="15" fill="rgb(241,25,7)" fg:x="87630" fg:w="31"/><text x="97.6481%" y="127.50"></text></g><g><title>nanov2_malloc_type (19 samples, 0.02%)</title><rect x="97.4114%" y="101" width="0.0211%" height="15" fill="rgb(242,119,39)" fg:x="87642" fg:w="19"/><text x="97.6614%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (11 samples, 0.01%)</title><rect x="97.4325%" y="117" width="0.0122%" height="15" fill="rgb(241,98,45)" fg:x="87661" fg:w="11"/><text x="97.6825%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (44 samples, 0.05%)</title><rect x="97.4481%" y="117" width="0.0489%" height="15" fill="rgb(254,28,30)" fg:x="87675" fg:w="44"/><text x="97.6981%" y="127.50"></text></g><g><title>core::ptr::read (48 samples, 0.05%)</title><rect x="97.5025%" y="117" width="0.0534%" height="15" fill="rgb(241,142,54)" fg:x="87724" fg:w="48"/><text x="97.7525%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (216 samples, 0.24%)</title><rect x="97.3180%" y="133" width="0.2401%" height="15" fill="rgb(222,85,15)" fg:x="87558" fg:w="216"/><text x="97.5680%" y="143.50"></text></g><g><title>DYLD-STUB$$memcpy (9 samples, 0.01%)</title><rect x="97.5614%" y="117" width="0.0100%" height="15" fill="rgb(210,85,47)" fg:x="87777" fg:w="9"/><text x="97.8114%" y="127.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (71 samples, 0.08%)</title><rect x="97.5614%" y="133" width="0.0789%" height="15" fill="rgb(224,206,25)" fg:x="87777" fg:w="71"/><text x="97.8114%" y="143.50"></text></g><g><title>_platform_memmove (62 samples, 0.07%)</title><rect x="97.5714%" y="117" width="0.0689%" height="15" fill="rgb(243,201,19)" fg:x="87786" fg:w="62"/><text x="97.8214%" y="127.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::get_result (94 samples, 0.10%)</title><rect x="97.6492%" y="133" width="0.1045%" height="15" fill="rgb(236,59,4)" fg:x="87856" fg:w="94"/><text x="97.8992%" y="143.50"></text></g><g><title>_platform_memmove (89 samples, 0.10%)</title><rect x="97.6548%" y="117" width="0.0989%" height="15" fill="rgb(254,179,45)" fg:x="87861" fg:w="89"/><text x="97.9048%" y="127.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.02%)</title><rect x="97.7582%" y="133" width="0.0222%" height="15" fill="rgb(226,14,10)" fg:x="87954" fg:w="20"/><text x="98.0082%" y="143.50"></text></g><g><title>nanov2_malloc_type (12 samples, 0.01%)</title><rect x="97.7671%" y="117" width="0.0133%" height="15" fill="rgb(244,27,41)" fg:x="87962" fg:w="12"/><text x="98.0171%" y="127.50"></text></g><g><title>_free (12 samples, 0.01%)</title><rect x="97.7815%" y="117" width="0.0133%" height="15" fill="rgb(235,35,32)" fg:x="87975" fg:w="12"/><text x="98.0315%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.05%)</title><rect x="97.7804%" y="133" width="0.0478%" height="15" fill="rgb(218,68,31)" fg:x="87974" fg:w="43"/><text x="98.0304%" y="143.50"></text></g><g><title>_nanov2_free (30 samples, 0.03%)</title><rect x="97.7948%" y="117" width="0.0333%" height="15" fill="rgb(207,120,37)" fg:x="87987" fg:w="30"/><text x="98.0448%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::extend_from_iter (44 samples, 0.05%)</title><rect x="97.8282%" y="133" width="0.0489%" height="15" fill="rgb(227,98,0)" fg:x="88017" fg:w="44"/><text x="98.0782%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::truncate (11 samples, 0.01%)</title><rect x="97.8849%" y="133" width="0.0122%" height="15" fill="rgb(207,7,3)" fg:x="88068" fg:w="11"/><text x="98.1349%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="97.8971%" y="133" width="0.0111%" height="15" fill="rgb(206,98,19)" fg:x="88079" fg:w="10"/><text x="98.1471%" y="143.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (29 samples, 0.03%)</title><rect x="97.9082%" y="133" width="0.0322%" height="15" fill="rgb(217,5,26)" fg:x="88089" fg:w="29"/><text x="98.1582%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.01%)</title><rect x="97.9660%" y="117" width="0.0133%" height="15" fill="rgb(235,190,38)" fg:x="88141" fg:w="12"/><text x="98.2160%" y="127.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (18 samples, 0.02%)</title><rect x="97.9793%" y="117" width="0.0200%" height="15" fill="rgb(247,86,24)" fg:x="88153" fg:w="18"/><text x="98.2293%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (84 samples, 0.09%)</title><rect x="98.3284%" y="101" width="0.0934%" height="15" fill="rgb(205,101,16)" fg:x="88467" fg:w="84"/><text x="98.5784%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveListMoveProcessor::new::_{{closure}} (34 samples, 0.04%)</title><rect x="98.3839%" y="85" width="0.0378%" height="15" fill="rgb(246,168,33)" fg:x="88517" fg:w="34"/><text x="98.6339%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (19 samples, 0.02%)</title><rect x="98.4328%" y="101" width="0.0211%" height="15" fill="rgb(231,114,1)" fg:x="88561" fg:w="19"/><text x="98.6828%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (74 samples, 0.08%)</title><rect x="98.4539%" y="101" width="0.0822%" height="15" fill="rgb(207,184,53)" fg:x="88580" fg:w="74"/><text x="98.7039%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (74 samples, 0.08%)</title><rect x="98.4539%" y="85" width="0.0822%" height="15" fill="rgb(224,95,51)" fg:x="88580" fg:w="74"/><text x="98.7039%" y="95.50"></text></g><g><title>&lt;natto::core::move_gen::MoveListMoveProcessor as natto::core::move_gen::MoveProcessor&gt;::process_move (61 samples, 0.07%)</title><rect x="98.5462%" y="101" width="0.0678%" height="15" fill="rgb(212,188,45)" fg:x="88663" fg:w="61"/><text x="98.7962%" y="111.50"></text></g><g><title>&lt;natto::util::bitboard_iterator::BitboardIterator as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="98.6140%" y="101" width="0.0233%" height="15" fill="rgb(223,154,38)" fg:x="88724" fg:w="21"/><text x="98.8640%" y="111.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 0.01%)</title><rect x="98.6373%" y="101" width="0.0111%" height="15" fill="rgb(251,22,52)" fg:x="88745" fg:w="10"/><text x="98.8873%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (43 samples, 0.05%)</title><rect x="98.6485%" y="101" width="0.0478%" height="15" fill="rgb(229,209,22)" fg:x="88755" fg:w="43"/><text x="98.8985%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (59 samples, 0.07%)</title><rect x="98.6985%" y="101" width="0.0656%" height="15" fill="rgb(234,138,34)" fg:x="88800" fg:w="59"/><text x="98.9485%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.01%)</title><rect x="98.7729%" y="101" width="0.0111%" height="15" fill="rgb(212,95,11)" fg:x="88867" fg:w="10"/><text x="99.0229%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (40 samples, 0.04%)</title><rect x="98.7929%" y="101" width="0.0445%" height="15" fill="rgb(240,179,47)" fg:x="88885" fg:w="40"/><text x="99.0429%" y="111.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (18 samples, 0.02%)</title><rect x="98.8374%" y="101" width="0.0200%" height="15" fill="rgb(240,163,11)" fg:x="88925" fg:w="18"/><text x="99.0874%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (32 samples, 0.04%)</title><rect x="98.8707%" y="85" width="0.0356%" height="15" fill="rgb(236,37,12)" fg:x="88955" fg:w="32"/><text x="99.1207%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (32 samples, 0.04%)</title><rect x="98.8707%" y="69" width="0.0356%" height="15" fill="rgb(232,164,16)" fg:x="88955" fg:w="32"/><text x="99.1207%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (23 samples, 0.03%)</title><rect x="98.9074%" y="85" width="0.0256%" height="15" fill="rgb(244,205,15)" fg:x="88988" fg:w="23"/><text x="99.1574%" y="95.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 0.01%)</title><rect x="98.9330%" y="85" width="0.0122%" height="15" fill="rgb(223,117,47)" fg:x="89011" fg:w="11"/><text x="99.1830%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (90 samples, 0.10%)</title><rect x="98.8574%" y="101" width="0.1000%" height="15" fill="rgb(244,107,35)" fg:x="88943" fg:w="90"/><text x="99.1074%" y="111.50"></text></g><g><title>natto::core::move::BaseMove::new (65 samples, 0.07%)</title><rect x="98.9708%" y="101" width="0.0722%" height="15" fill="rgb(205,140,8)" fg:x="89045" fg:w="65"/><text x="99.2208%" y="111.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (104 samples, 0.12%)</title><rect x="99.0430%" y="101" width="0.1156%" height="15" fill="rgb(228,84,46)" fg:x="89110" fg:w="104"/><text x="99.2930%" y="111.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (215 samples, 0.24%)</title><rect x="99.1820%" y="85" width="0.2390%" height="15" fill="rgb(254,188,9)" fg:x="89235" fg:w="215"/><text x="99.4320%" y="95.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.01%)</title><rect x="99.4387%" y="85" width="0.0111%" height="15" fill="rgb(206,112,54)" fg:x="89466" fg:w="10"/><text x="99.6887%" y="95.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (9 samples, 0.01%)</title><rect x="99.4498%" y="85" width="0.0100%" height="15" fill="rgb(216,84,49)" fg:x="89476" fg:w="9"/><text x="99.6998%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_sub (19 samples, 0.02%)</title><rect x="99.4598%" y="85" width="0.0211%" height="15" fill="rgb(214,194,35)" fg:x="89485" fg:w="19"/><text x="99.7098%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 0.01%)</title><rect x="99.4843%" y="69" width="0.0122%" height="15" fill="rgb(249,28,3)" fg:x="89507" fg:w="11"/><text x="99.7343%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (51 samples, 0.06%)</title><rect x="99.5076%" y="69" width="0.0567%" height="15" fill="rgb(222,56,52)" fg:x="89528" fg:w="51"/><text x="99.7576%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (49 samples, 0.05%)</title><rect x="99.5098%" y="53" width="0.0545%" height="15" fill="rgb(245,217,50)" fg:x="89530" fg:w="49"/><text x="99.7598%" y="63.50"></text></g><g><title>core::hash::BuildHasher::hash_one (51 samples, 0.06%)</title><rect x="99.5710%" y="69" width="0.0567%" height="15" fill="rgb(213,201,24)" fg:x="89585" fg:w="51"/><text x="99.8210%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (158 samples, 0.18%)</title><rect x="99.4843%" y="85" width="0.1756%" height="15" fill="rgb(248,116,28)" fg:x="89507" fg:w="158"/><text x="99.7343%" y="95.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (16 samples, 0.02%)</title><rect x="99.6421%" y="69" width="0.0178%" height="15" fill="rgb(219,72,43)" fg:x="89649" fg:w="16"/><text x="99.8921%" y="79.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (13 samples, 0.01%)</title><rect x="99.6632%" y="85" width="0.0144%" height="15" fill="rgb(209,138,14)" fg:x="89668" fg:w="13"/><text x="99.9132%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (472 samples, 0.52%)</title><rect x="99.1653%" y="101" width="0.5246%" height="15" fill="rgb(222,18,33)" fg:x="89220" fg:w="472"/><text x="99.4153%" y="111.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (11 samples, 0.01%)</title><rect x="99.6777%" y="85" width="0.0122%" height="15" fill="rgb(213,199,7)" fg:x="89681" fg:w="11"/><text x="99.9277%" y="95.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type_and_square_index (13 samples, 0.01%)</title><rect x="99.6899%" y="101" width="0.0144%" height="15" fill="rgb(250,110,10)" fg:x="89692" fg:w="13"/><text x="99.9399%" y="111.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (1,542 samples, 1.71%)</title><rect x="97.9994%" y="117" width="1.7139%" height="15" fill="rgb(248,123,6)" fg:x="88171" fg:w="1542"/><text x="98.2494%" y="127.50"></text></g><g><title>natto::core::move_gen::generate_moves (1,588 samples, 1.77%)</title><rect x="97.9616%" y="133" width="1.7650%" height="15" fill="rgb(206,91,31)" fg:x="88137" fg:w="1588"/><text x="98.2116%" y="143.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (89,706 samples, 99.71%)</title><rect x="0.0222%" y="165" width="99.7055%" height="15" fill="rgb(211,154,13)" fg:x="20" fg:w="89706"/><text x="0.2722%" y="175.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes (2,177 samples, 2.42%)</title><rect x="97.3080%" y="149" width="2.4197%" height="15" fill="rgb(225,148,7)" fg:x="87549" fg:w="2177"/><text x="97.5580%" y="159.50">na..</text></g><g><title>hashbrown::map::make_hash (10 samples, 0.01%)</title><rect x="99.7599%" y="117" width="0.0111%" height="15" fill="rgb(220,160,43)" fg:x="89755" fg:w="10"/><text x="100.0099%" y="127.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder (32 samples, 0.04%)</title><rect x="99.7377%" y="149" width="0.0356%" height="15" fill="rgb(213,52,39)" fg:x="89735" fg:w="32"/><text x="99.9877%" y="159.50"></text></g><g><title>natto::core::move_gen::square_attacks_finder_internal (23 samples, 0.03%)</title><rect x="99.7477%" y="133" width="0.0256%" height="15" fill="rgb(243,137,7)" fg:x="89744" fg:w="23"/><text x="99.9977%" y="143.50"></text></g><g><title>natto::core::position::Position::make_move (13 samples, 0.01%)</title><rect x="99.7733%" y="149" width="0.0144%" height="15" fill="rgb(230,79,13)" fg:x="89767" fg:w="13"/><text x="100.0233%" y="159.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::process_move (67 samples, 0.07%)</title><rect x="99.7277%" y="165" width="0.0745%" height="15" fill="rgb(247,105,23)" fg:x="89726" fg:w="67"/><text x="99.9777%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.01%)</title><rect x="99.8989%" y="117" width="0.0122%" height="15" fill="rgb(223,179,41)" fg:x="89880" fg:w="11"/><text x="100.1489%" y="127.50"></text></g><g><title>natto::core::move_gen::generate_moves_for_destinations (11 samples, 0.01%)</title><rect x="99.9178%" y="117" width="0.0122%" height="15" fill="rgb(218,9,34)" fg:x="89897" fg:w="11"/><text x="100.1678%" y="127.50"></text></g><g><title>&lt;u64 as bitintr::pext::Pext&gt;::pext::pext_ (18 samples, 0.02%)</title><rect x="99.9322%" y="101" width="0.0200%" height="15" fill="rgb(222,106,8)" fg:x="89910" fg:w="18"/><text x="100.1822%" y="111.50"></text></g><g><title>natto::core::move_gen::get_sliding_moves_by_piece_type (33 samples, 0.04%)</title><rect x="99.9300%" y="117" width="0.0367%" height="15" fill="rgb(211,220,0)" fg:x="89908" fg:w="33"/><text x="100.1800%" y="127.50"></text></g><g><title>natto::core::move_gen::MoveGeneratorImpl&lt;P&gt;::generate (112 samples, 0.12%)</title><rect x="99.8455%" y="133" width="0.1245%" height="15" fill="rgb(229,52,16)" fg:x="89832" fg:w="112"/><text x="100.0955%" y="143.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (89,942 samples, 99.97%)</title><rect x="0.0056%" y="181" width="99.9678%" height="15" fill="rgb(212,155,18)" fg:x="5" fg:w="89942"/><text x="0.2556%" y="191.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes (154 samples, 0.17%)</title><rect x="99.8022%" y="165" width="0.1712%" height="15" fill="rgb(242,21,14)" fg:x="89793" fg:w="154"/><text x="100.0522%" y="175.50"></text></g><g><title>natto::core::move_gen::generate_moves (117 samples, 0.13%)</title><rect x="99.8433%" y="149" width="0.1300%" height="15" fill="rgb(222,19,48)" fg:x="89830" fg:w="117"/><text x="100.0933%" y="159.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (89,962 samples, 99.99%)</title><rect x="0.0033%" y="197" width="99.9900%" height="15" fill="rgb(232,45,27)" fg:x="3" fg:w="89962"/><text x="0.2533%" y="207.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes (12 samples, 0.01%)</title><rect x="99.9800%" y="181" width="0.0133%" height="15" fill="rgb(249,103,42)" fg:x="89953" fg:w="12"/><text x="100.2300%" y="191.50"></text></g><g><title>natto::core::move_gen::generate_moves (9 samples, 0.01%)</title><rect x="99.9833%" y="165" width="0.0100%" height="15" fill="rgb(246,81,33)" fg:x="89956" fg:w="9"/><text x="100.2333%" y="175.50"></text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (89,963 samples, 99.99%)</title><rect x="0.0033%" y="229" width="99.9911%" height="15" fill="rgb(252,33,42)" fg:x="3" fg:w="89963"/><text x="0.2533%" y="239.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>natto::eval::node_counter::do_count_nodes::_{{closure}} (89,963 samples, 99.99%)</title><rect x="0.0033%" y="213" width="99.9911%" height="15" fill="rgb(209,212,41)" fg:x="3" fg:w="89963"/><text x="0.2533%" y="223.50">natto::eval::node_counter::do_count_nodes::_{{closure}}</text></g><g><title>all (89,971 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(207,154,6)" fg:x="0" fg:w="89971"/><text x="0.2500%" y="351.50"></text></g><g><title>start (89,971 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(223,64,47)" fg:x="0" fg:w="89971"/><text x="0.2500%" y="335.50">start</text></g><g><title>main (89,968 samples, 100.00%)</title><rect x="0.0033%" y="309" width="99.9967%" height="15" fill="rgb(211,161,38)" fg:x="3" fg:w="89968"/><text x="0.2533%" y="319.50">main</text></g><g><title>std::rt::lang_start_internal (89,968 samples, 100.00%)</title><rect x="0.0033%" y="293" width="99.9967%" height="15" fill="rgb(219,138,40)" fg:x="3" fg:w="89968"/><text x="0.2533%" y="303.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (89,968 samples, 100.00%)</title><rect x="0.0033%" y="277" width="99.9967%" height="15" fill="rgb(241,228,46)" fg:x="3" fg:w="89968"/><text x="0.2533%" y="287.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (89,968 samples, 100.00%)</title><rect x="0.0033%" y="261" width="99.9967%" height="15" fill="rgb(223,209,38)" fg:x="3" fg:w="89968"/><text x="0.2533%" y="271.50">core::ops::function::FnOnce::call_once</text></g><g><title>natto::main (89,968 samples, 100.00%)</title><rect x="0.0033%" y="245" width="99.9967%" height="15" fill="rgb(236,164,45)" fg:x="3" fg:w="89968"/><text x="0.2533%" y="255.50">natto::main</text></g></svg></svg>